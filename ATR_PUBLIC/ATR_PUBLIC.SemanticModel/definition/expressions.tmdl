expression hospital =
		let
		    Source = #"07_ATRCompleteDataset"[[InstitutionID], [HospitalName]],
		    #"Removed Duplicates" = Table.Distinct(Source, {"InstitutionID"}),
		    #"Sorted Rows" = Table.Sort(#"Removed Duplicates",{{"HospitalName", Order.Ascending}, {"InstitutionID", Order.Ascending}})
		in
		    #"Sorted Rows"
	lineageTag: b988c2d5-8f4c-48bd-bd60-14b38bf9f32d
	queryGroup: Pre-process

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression ATRCompleteDataset =
		let
		    Source = #"07_ATRCompleteDataset",
		    //#"Merged Queries" = Table.NestedJoin(Source, {"InstitutionID"}, hospital_features, {"InstCodeId"}, "hospital_features", JoinKind.LeftOuter),
		    //#"Expanded hospital_features" = Table.ExpandTableColumn(#"Merged Queries", "hospital_features", {"country"}, {"country"}),
		    //Add_TransferType = Table.AddColumn(#"Expanded hospital_features", "TransferType", each if [OtherHospTransfer] = 2 or [OtherHospTransfer] = -99 then "Direct Transport" else "Transfer",type text),
		    Add_TransferType = Table.AddColumn(Source, "TransferType", each if [OtherHospTransfer] = 2 or [OtherHospTransfer] = -99 then "Direct Transport" else "Transfer",type text),
		    #"Inserted ArrDt" = Table.AddColumn(Add_TransferType, "ArrDt", each DateTime.Date([ArrivalDateTime]), type date),
		    #"Inserted ArrTime" = Table.AddColumn(#"Inserted ArrDt", "ArrTime", each DateTime.Time([ArrivalDateTime]), type time),
		    #"Inserted InjuryDt" = Table.AddColumn(#"Inserted ArrTime", "InjuryDt", each DateTime.Date([DOIJ]), type date),
		    #"Inserted InjuryTime" = Table.AddColumn(#"Inserted InjuryDt", "InjuryTime", each DateTime.Time([DOIJ]), type time),
		    #"Inserted EDDischargeDt" = Table.AddColumn(#"Inserted InjuryTime", "EDDischargeDt", each DateTime.Date([EDDischargeDateTime]), type date),
		    #"Inserted EDDischargeTime" = Table.AddColumn(#"Inserted EDDischargeDt", "EDDischargeTime", each DateTime.Time([EDDischargeDateTime]), type time),
		    #"Added KnownArrDt" = Table.AddColumn(
		            #"Inserted EDDischargeTime",
		            "KnownArrDt",
		            each
		                [ArrDt]
		                <> #date(1900, 01, 01)
		                and not ([ArrDt] = null),
		            type logical
		        ),
		    #"Added KnownArrTime" =
		        Table.AddColumn(
		            #"Added KnownArrDt",
		            "KnownArrTime",
		            each
		                [ArrTime]
		                <> #time(0, 0, 0)
		                and not ([ArrTime] = null),
		            type logical
		        ),
		    #"Added KnownInjuryDt" =
		        Table.AddColumn(
		            #"Added KnownArrTime",
		            "KnownInjuryDt",
		            each
		                [InjuryDt]
		                <> #date(1900, 01, 01)
		                and not ([InjuryDt] = null),
		            type logical
		        ),
		    #"Added KnownInjuryTime" =
		        Table.AddColumn(
		            #"Added KnownInjuryDt",
		            "KnownInjuryTime",
		            each
		                [InjuryTime] <> null,
		                // [InjuryTime]
		                // <> #time(0, 0, 0)
		                // and not ([InjuryTime] = null),
		            type logical
		        ),
		    #"Added KnownEDDischargeDt" =
		        Table.AddColumn(
		            #"Added KnownInjuryTime",
		            "KnownEDDischargeDt",
		            each
		                [EDDischargeDt]
		                <> #date(1900, 1, 1)
		                and not ([EDDischargeDt] = null),
		            type logical
		        ),
		    #"Added KnownEDDischargeTime" =
		        Table.AddColumn(
		            #"Added KnownEDDischargeDt",
		            "KnownEDDischargeTime",
		            each
		                [EDDischargeTime]
		                <> #time(0, 0, 0)
		                and not ([EDDischargeTime] = null),
		            type logical
		        ),
		    #"Add TimeToED" =
		        Table.AddColumn(
		            #"Added KnownEDDischargeTime",
		            "TimeToED",
		            each
		                if
		                    [OtherHospTransfer]
		                    = 2
		                    and [KnownInjuryDt]
		                    and [KnownInjuryTime]
		                    and [KnownArrDt]
		                    and [KnownArrTime]
		                    and [ArrivalDateTime]
		                    >= [DOIJ]
		                then
		                    [ArrivalDateTime] - [DOIJ]
		                else
		                    null,
		            Duration.Type
		        ),
		    #"Add TimeInED" =
		        Table.AddColumn(
		            #"Add TimeToED",
		            "TimeInED",
		            each
		                if
		                    [KnownArrDt]
		                    and [KnownArrTime]
		                    and [KnownEDDischargeDt]
		                    and [KnownEDDischargeTime]
		                    and [EDDischargeDateTime]
		                    >= [ArrivalDateTime]
		                then
		                    [EDDischargeDateTime] - [ArrivalDateTime]
		                else
		                    null,
		            Duration.Type
		        ),
		    #"Replaced Value" =
		        Table.ReplaceValue(
		            #"Add TimeInED",
		            "",
		            null,
		            Replacer.ReplaceValue,
		            {
		                "SevereComplications",
		                "OperationProcedures",
		                "Comorb"
		            }
		        ),
		    #"Replaced Value2" =
		        Table.ReplaceValue(
		            #"Replaced Value",
		            each
		                [DOB]
		                = #date(1901, 1, 1)
		                or [DOB]
		                = #date(1900, 1, 1),
		            null,
		            (x, y, z) as nullable date =>
		                if y then
		                    z
		                else
		                    x,
		            {"DOB"}
		        ),
		    #"Replaced Value3" =
		        Table.ReplaceValue(
		            #"Replaced Value2",
		            each [Age] = 999 or[Age] = 9999 or [Age] = null,
		            -1,
		            (x, y, z) as nullable number =>
		                if y then
		                    z
		                else
		                    x,
		            {"Age"}
		        ),
		    Custom1 = Table.ReplaceValue(#"Replaced Value3", each [InjuryPcode]=-99, null, (x,y,z) as nullable number => if y then z else x, {"InjuryPcode"}),
		    #"Changed Type" =
		        Table.TransformColumnTypes(Custom1,{{"Age", Int64.Type}, {"InjuryPcode", type text}}),
		    #"Split Column by Delimiter" = Table.ExpandListColumn(Table.TransformColumns(#"Changed Type", {{"OperationProcedures", Splitter.SplitTextByDelimiter(";", QuoteStyle.Csv), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "OperationProcedures"),
		    #"Split Column by Delimiter1" = Table.ExpandListColumn(Table.TransformColumns(#"Split Column by Delimiter", {{"SevereComplications", Splitter.SplitTextByDelimiter(";", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "SevereComplications"),
		    #"Split Column by Delimiter2" = Table.ExpandListColumn(Table.TransformColumns(#"Split Column by Delimiter1", {{"AISCode", Splitter.SplitTextByDelimiter(";", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "AISCode"),
		    #"Split Column by Delimiter3" = Table.ExpandListColumn(Table.TransformColumns(#"Split Column by Delimiter2", {{"Comorb", Splitter.SplitTextByDelimiter(";", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), "Comorb"),
		    /*bufer_table = Table.Buffer(#"Split Column by Delimiter3"),
		    test =
		        Table.AddColumn(
		            bufer_table,
		            "Custom",
		            each
		                Table.FromColumns(
		                    {
		                        try Text.Split([OperationProcedures], ";") otherwise
		                            {
		                                null
		                            },
		                        try Text.Split([SevereComplications], ";") otherwise
		                            {
		                                null
		                            },
		                        try Text.Split([AIS], ";") otherwise
		                            {
		                                null
		                            },
		                        try Text.Split([ComorbCodeIds], ";") otherwise
		                            {
		                                null
		                            }
		                    },
		                    type table [
		                        OpProcCodeId = text,
		                        SevCompCodeId = text,
		                        AISCodeId = text,
		                        ComorbCodeId = text
		                    ]
		                ),
		            type table [
		                OpProcCodeId = text,
		                SevCompCodeId = text,
		                AISCodeId = text,
		                ComorbCodeId = text
		            ]
		        ),
		    #"Expanded Custom" =
		        Table.ExpandTableColumn(
		            test,
		            "Custom",
		            {
		                "OpProcCodeId",
		                "SevCompCodeId",
		                "AISCodeId",
		                "ComorbCodeId"
		            },
		            {
		                "OpProcCodeId",
		                "SevCompCodeId",
		                "AISCodeId",
		                "ComorbCodeId"
		            }
		        ),*/
		    #"Calculated Total Hours" = Table.TransformColumns(#"Split Column by Delimiter3",{{"TimeToED", Duration.TotalHours, type number}, {"TimeInED", Duration.TotalHours, type number}}),
		    apply_body_region_func = Table.AddColumn(#"Calculated Total Hours", "BodyRegion", each BodyRegion(_), type record),
		    #"Expanded BodyRegion" = Table.ExpandRecordColumn(apply_body_region_func, "BodyRegion", {"iso", "head_other", "serious_spinal", "extrem_spine", "chest_abdo", "no_code", "multiple"}, {"iso", "head_other", "serious_spinal", "extrem_spine", "chest_abdo", "no_code", "multiple"}),
		    #"Changed Type2" = Table.TransformColumnTypes(#"Expanded BodyRegion",{{"iso", Int64.Type}, {"head_other", Int64.Type}, {"serious_spinal", Int64.Type}, {"extrem_spine", Int64.Type}, {"chest_abdo", Int64.Type}, {"no_code", Int64.Type}, {"multiple", Int64.Type}}),
		    #"Replaced Value4" = Table.ReplaceValue(#"Changed Type2",0,null,Replacer.ReplaceValue,{"iso", "head_other", "serious_spinal", "extrem_spine", "chest_abdo", "no_code", "multiple"}),
		    #"Unpivoted Only Selected Columns" = Table.Unpivot(#"Replaced Value4", {"iso", "head_other", "serious_spinal", "extrem_spine", "chest_abdo", "no_code", "multiple"}, "body_region", "Value"),
		    #"Removed Columns" = Table.RemoveColumns(#"Unpivoted Only Selected Columns",{"Value"})
		in
		    #"Removed Columns"
	lineageTag: 59bffb0f-9707-41e1-86e7-7df75762dcc5
	queryGroup: Pre-process

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression hospital_features =
		let
		    Source = hospital_features_csv,
		    #"Capitalized Each Word" = Table.TransformColumns(Source,{{"country", Text.Proper, type text}}),
		    #"Sorted Rows" = Table.Sort(#"Capitalized Each Word",{{"HospitalName", Order.Ascending}})
		in
		    #"Sorted Rows"
	lineageTag: a8501b6b-9642-403c-8913-52634d0a179a
	queryGroup: Pre-process

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression injury_activity =
		let
		    Source = #"07_ATRCompleteDataset"[[ActEngaged]],
		    #"Removed Duplicates" = Table.Distinct(Source)
		in
		    #"Removed Duplicates"
	lineageTag: dc80e1a1-1878-4852-a24c-05c8bd9c3f7c
	queryGroup: Pre-process

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression injury_cause =
		let
		    Source = #"07_ATRCompleteDataset"[[InjuryCause]],
		    #"Removed Duplicates" = Table.Distinct(Source),
		    #"Merged Queries" = Table.NestedJoin(#"Removed Duplicates", {"InjuryCause"}, icd_atr, {"icd_code"}, "icd_am", JoinKind.LeftOuter),
		    #"Expanded icd_am1" = Table.ExpandTableColumn(#"Merged Queries", "icd_am", {"icd_code_group", "Desc", "clean_code_id", "code_letter", "atr_code"}, {"icd_code_group", "Desc", "clean_code_id", "code_letter", "atr_code"}),
		    #"Replaced Value" = Table.ReplaceValue(#"Expanded icd_am1",each Text.Contains([atr_code], "exclude") ,"30",(x,y,z) as text => if y then z else x,{"atr_code"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Replaced Value",{{"atr_code", Int64.Type}}),
		    #"Merged Queries1" = Table.NestedJoin(#"Changed Type", {"atr_code"}, atr_codes, {"atr_code"}, "atr_codes", JoinKind.LeftOuter),
		    #"Expanded atr_codes" = Table.ExpandTableColumn(#"Merged Queries1", "atr_codes", {"atr_description", "atr_broad_group", "atr_broad_group_sort"}, {"atr_description", "atr_broad_group", "atr_broad_group_sort"}),
		    #"Replaced Value2" = Table.ReplaceValue(#"Expanded atr_codes",null,40,Replacer.ReplaceValue,{"atr_code"}),
		    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value2",each [atr_code],"x",(x,y,z) as text => if y = 30 then "Requested for exlusion" else if y = 40 then "New unmatched code" else x ,{"atr_description"}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Replaced Value1",{{"atr_code", Int64.Type}})
		in
		    #"Changed Type1"
	lineageTag: b0088671-d192-45c5-82c0-3488d02945c9
	queryGroup: Pre-process

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression body_region =
		let
		    Source = #table(type table [body_region=text],{{"iso"},{"head_other"},{"serious_spinal"},{"extrem_spine"},{"chest_abdo"},{"no_code"},{"multiple"}}),
		    Custom1 = Source[body_region],
		    description = {"Isolated head injury","Head and other injuries","Serious spinal cord injury","Extremity and/or spine injuries only","Chest and/or abdominal injuries only","No coded injuries","Multiple injuries, burns or other"},
		    code = {"iso","head_other","serious_spinal","extrem_spine","chest_abdo","no_code","multiple"},
		    Custom4 = #table(type table [body_region=text, description=text], List.Zip({code,description})),
		    #"Added Index" = Table.AddIndexColumn(Custom4, "sort_body_region", 1, 1, Int64.Type)
		in
		    #"Added Index"
	lineageTag: 4b73e34f-1fbd-4231-8016-53abaffcfd67
	queryGroup: Pre-process

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression 07_ATRCompleteDataset = ```
		let
		  Source = Csv.Document(
		    File.Contents(data_path & "07_ATRCompleteDataset.csv"), 
		    [Delimiter = ",", Columns = null, Encoding = 1252, QuoteStyle = QuoteStyle.Csv]
		  ), 
		  #"Cleaned Text" = Table.TransformColumns(
		    Source, 
		    {
		      {"Column1", Text.Clean, type text}, 
		      {"Column2", Text.Clean, type text}, 
		      {"Column3", Text.Clean, type text}, 
		      {"Column4", Text.Clean, type text}, 
		      {"Column5", Text.Clean, type text}, 
		      {"Column6", Text.Clean, type text}, 
		      {"Column7", Text.Clean, type text}, 
		      {"Column8", Text.Clean, type text}, 
		      {"Column9", Text.Clean, type text}, 
		      {"Column10", Text.Clean, type text}, 
		      {"Column11", Text.Clean, type text}, 
		      {"Column12", Text.Clean, type text}, 
		      {"Column13", Text.Clean, type text}, 
		      {"Column14", Text.Clean, type text}, 
		      {"Column15", Text.Clean, type text}, 
		      {"Column16", Text.Clean, type text}, 
		      {"Column17", Text.Clean, type text}, 
		      {"Column18", Text.Clean, type text}, 
		      {"Column19", Text.Clean, type text}, 
		      {"Column20", Text.Clean, type text}, 
		      {"Column21", Text.Clean, type text}, 
		      {"Column22", Text.Clean, type text}, 
		      {"Column23", Text.Clean, type text}, 
		      {"Column24", Text.Clean, type text}, 
		      {"Column25", Text.Clean, type text}, 
		      {"Column26", Text.Clean, type text}, 
		      {"Column27", Text.Clean, type text}, 
		      {"Column28", Text.Clean, type text}, 
		      {"Column29", Text.Clean, type text}, 
		      {"Column30", Text.Clean, type text}, 
		      {"Column31", Text.Clean, type text}, 
		      {"Column32", Text.Clean, type text}, 
		      {"Column33", Text.Clean, type text}, 
		      {"Column34", Text.Clean, type text}, 
		      {"Column35", Text.Clean, type text}, 
		      {"Column36", Text.Clean, type text}, 
		      {"Column37", Text.Clean, type text}, 
		      {"Column38", Text.Clean, type text}, 
		      {"Column39", Text.Clean, type text}, 
		      {"Column40", Text.Clean, type text}, 
		      {"Column41", Text.Clean, type text}, 
		      {"Column42", Text.Clean, type text}, 
		      {"Column43", Text.Clean, type text}, 
		      {"Column44", Text.Clean, type text}, 
		      {"Column45", Text.Clean, type text}, 
		      {"Column46", Text.Clean, type text}, 
		      {"Column47", Text.Clean, type text}, 
		      {"Column48", Text.Clean, type text}, 
		      {"Column49", Text.Clean, type text}, 
		      {"Column50", Text.Clean, type text}, 
		      {"Column51", Text.Clean, type text}, 
		      {"Column52", Text.Clean, type text}, 
		      {"Column53", Text.Clean, type text}, 
		      {"Column54", Text.Clean, type text}, 
		      {"Column55", Text.Clean, type text}, 
		      {"Column56", Text.Clean, type text}, 
		      {"Column57", Text.Clean, type text}, 
		      {"Column58", Text.Clean, type text}, 
		      {"Column59", Text.Clean, type text}, 
		      {"Column60", Text.Clean, type text}, 
		      {"Column61", Text.Clean, type text}, 
		      {"Column62", Text.Clean, type text}, 
		      {"Column63", Text.Clean, type text}, 
		      {"Column64", Text.Clean, type text}, 
		      {"Column65", Text.Clean, type text}, 
		      {"Column66", Text.Clean, type text}, 
		      {"Column67", Text.Clean, type text}, 
		      {"Column68", Text.Clean, type text}, 
		      {"Column69", Text.Clean, type text}, 
		      {"Column70", Text.Clean, type text}, 
		      {"Column71", Text.Clean, type text}, 
		      {"Column72", Text.Clean, type text}, 
		      {"Column73", Text.Clean, type text}, 
		      {"Column74", Text.Clean, type text}, 
		      {"Column75", Text.Clean, type text}, 
		      {"Column76", Text.Clean, type text}, 
		      {"Column77", Text.Clean, type text}, 
		      {"Column78", Text.Clean, type text}, 
		      {"Column79", Text.Clean, type text}, 
		      {"Column80", Text.Clean, type text}, 
		      {"Column81", Text.Clean, type text}, 
		      {"Column82", Text.Clean, type text}, 
		      {"Column83", Text.Clean, type text}, 
		      {"Column84", Text.Clean, type text}, 
		      {"Column85", Text.Clean, type text}, 
		      {"Column86", Text.Clean, type text}, 
		      {"Column87", Text.Clean, type text}, 
		      {"Column88", Text.Clean, type text}, 
		      {"Column89", Text.Clean, type text}, 
		      {"Column90", Text.Clean, type text}, 
		      {"Column91", Text.Clean, type text}, 
		      {"Column92", Text.Clean, type text}, 
		      {"Column93", Text.Clean, type text}, 
		      {"Column94", Text.Clean, type text}, 
		      {"Column95", Text.Clean, type text}, 
		      {"Column96", Text.Clean, type text}, 
		      {"Column97", Text.Clean, type text}, 
		      {"Column98", Text.Clean, type text}, 
		      {"Column99", Text.Clean, type text}, 
		      {"Column100", Text.Clean, type text}, 
		      {"Column101", Text.Clean, type text}, 
		      {"Column102", Text.Clean, type text}, 
		      {"Column103", Text.Clean, type text}, 
		      {"Column104", Text.Clean, type text}, 
		      {"Column105", Text.Clean, type text}, 
		      {"Column106", Text.Clean, type text}, 
		      {"Column107", Text.Clean, type text}, 
		      {"Column108", Text.Clean, type text}, 
		      {"Column109", Text.Clean, type text}, 
		      {"Column110", Text.Clean, type text}
		    }
		  ), 
		  #"Trimmed Text" = Table.TransformColumns(
		    #"Cleaned Text", 
		    {
		      {"Column1", Text.Trim, type text}, 
		      {"Column2", Text.Trim, type text}, 
		      {"Column3", Text.Trim, type text}, 
		      {"Column4", Text.Trim, type text}, 
		      {"Column5", Text.Trim, type text}, 
		      {"Column6", Text.Trim, type text}, 
		      {"Column7", Text.Trim, type text}, 
		      {"Column8", Text.Trim, type text}, 
		      {"Column9", Text.Trim, type text}, 
		      {"Column10", Text.Trim, type text}, 
		      {"Column11", Text.Trim, type text}, 
		      {"Column12", Text.Trim, type text}, 
		      {"Column13", Text.Trim, type text}, 
		      {"Column14", Text.Trim, type text}, 
		      {"Column15", Text.Trim, type text}, 
		      {"Column16", Text.Trim, type text}, 
		      {"Column17", Text.Trim, type text}, 
		      {"Column18", Text.Trim, type text}, 
		      {"Column19", Text.Trim, type text}, 
		      {"Column20", Text.Trim, type text}, 
		      {"Column21", Text.Trim, type text}, 
		      {"Column22", Text.Trim, type text}, 
		      {"Column23", Text.Trim, type text}, 
		      {"Column24", Text.Trim, type text}, 
		      {"Column25", Text.Trim, type text}, 
		      {"Column26", Text.Trim, type text}, 
		      {"Column27", Text.Trim, type text}, 
		      {"Column28", Text.Trim, type text}, 
		      {"Column29", Text.Trim, type text}, 
		      {"Column30", Text.Trim, type text}, 
		      {"Column31", Text.Trim, type text}, 
		      {"Column32", Text.Trim, type text}, 
		      {"Column33", Text.Trim, type text}, 
		      {"Column34", Text.Trim, type text}, 
		      {"Column35", Text.Trim, type text}, 
		      {"Column36", Text.Trim, type text}, 
		      {"Column37", Text.Trim, type text}, 
		      {"Column38", Text.Trim, type text}, 
		      {"Column39", Text.Trim, type text}, 
		      {"Column40", Text.Trim, type text}, 
		      {"Column41", Text.Trim, type text}, 
		      {"Column42", Text.Trim, type text}, 
		      {"Column43", Text.Trim, type text}, 
		      {"Column44", Text.Trim, type text}, 
		      {"Column45", Text.Trim, type text}, 
		      {"Column46", Text.Trim, type text}, 
		      {"Column47", Text.Trim, type text}, 
		      {"Column48", Text.Trim, type text}, 
		      {"Column49", Text.Trim, type text}, 
		      {"Column50", Text.Trim, type text}, 
		      {"Column51", Text.Trim, type text}, 
		      {"Column52", Text.Trim, type text}, 
		      {"Column53", Text.Trim, type text}, 
		      {"Column54", Text.Trim, type text}, 
		      {"Column55", Text.Trim, type text}, 
		      {"Column56", Text.Trim, type text}, 
		      {"Column57", Text.Trim, type text}, 
		      {"Column58", Text.Trim, type text}, 
		      {"Column59", Text.Trim, type text}, 
		      {"Column60", Text.Trim, type text}, 
		      {"Column61", Text.Trim, type text}, 
		      {"Column62", Text.Trim, type text}, 
		      {"Column63", Text.Trim, type text}, 
		      {"Column64", Text.Trim, type text}, 
		      {"Column65", Text.Trim, type text}, 
		      {"Column66", Text.Trim, type text}, 
		      {"Column67", Text.Trim, type text}, 
		      {"Column68", Text.Trim, type text}, 
		      {"Column69", Text.Trim, type text}, 
		      {"Column70", Text.Trim, type text}, 
		      {"Column71", Text.Trim, type text}, 
		      {"Column72", Text.Trim, type text}, 
		      {"Column73", Text.Trim, type text}, 
		      {"Column74", Text.Trim, type text}, 
		      {"Column75", Text.Trim, type text}, 
		      {"Column76", Text.Trim, type text}, 
		      {"Column77", Text.Trim, type text}, 
		      {"Column78", Text.Trim, type text}, 
		      {"Column79", Text.Trim, type text}, 
		      {"Column80", Text.Trim, type text}, 
		      {"Column81", Text.Trim, type text}, 
		      {"Column82", Text.Trim, type text}, 
		      {"Column83", Text.Trim, type text}, 
		      {"Column84", Text.Trim, type text}, 
		      {"Column85", Text.Trim, type text}, 
		      {"Column86", Text.Trim, type text}, 
		      {"Column87", Text.Trim, type text}, 
		      {"Column88", Text.Trim, type text}, 
		      {"Column89", Text.Trim, type text}, 
		      {"Column90", Text.Trim, type text}, 
		      {"Column91", Text.Trim, type text}, 
		      {"Column92", Text.Trim, type text}, 
		      {"Column93", Text.Trim, type text}, 
		      {"Column94", Text.Trim, type text}, 
		      {"Column95", Text.Trim, type text}, 
		      {"Column96", Text.Trim, type text}, 
		      {"Column97", Text.Trim, type text}, 
		      {"Column98", Text.Trim, type text}, 
		      {"Column99", Text.Trim, type text}, 
		      {"Column100", Text.Trim, type text}, 
		      {"Column101", Text.Trim, type text}, 
		      {"Column102", Text.Trim, type text}, 
		      {"Column103", Text.Trim, type text}, 
		      {"Column104", Text.Trim, type text}, 
		      {"Column105", Text.Trim, type text}, 
		      {"Column106", Text.Trim, type text}, 
		      {"Column107", Text.Trim, type text}, 
		      {"Column108", Text.Trim, type text}, 
		      {"Column109", Text.Trim, type text}, 
		      {"Column110", Text.Trim, type text}
		    }
		  ), 
		  #"Promoted Headers" = Table.PromoteHeaders(#"Trimmed Text", [PromoteAllScalars = true]),
		    #"Removed Columns" = Table.RemoveColumns(#"Promoted Headers",{"OpProc1", "OpProc2", "OpProc3", "OpProc4", "OpProc5", "OpProc6", "OpProc7", "OpProc8", "OpProc9", "OpProc10", "OpProc11", "OpProc12", "OpProc13", "OpProc14", "OpProc15", "OpProc16", "OpProc17", "OpProc18", "OpProc19", "OpProc20", "OpProc21", "OpProc22", "OpProc23", "OpProc24", "OpProc25", "OpProc26", "OpProc27", "OpProc28", "OpProc29", "OpProc30", "OpProc31", "OpProc32", "OpProc33", "OpProc34", "OpProc35", "OpProc36", "OpProc37", "OpProc38", "OpProc39", "OpProc40", "OpProc41", "OpProc42", "OpProc43", "OpProc44", "OpProc45", "OpProc46", "OpProc47", "OpProc48", "OpProc49", "OpProc50", "OpProc51", "OpProc52", "OpProc53", "OpProc54", "OpProc55", "OpProc56", "OpProc57", "OpProc58", "OpProc59", "OpProc60", "OpProc61", "OpProc62", "OpProc63", "OpProc64", "OpProc65", "OpProc66", "OpProc67", "OpProc68", "OpProc69", "OpProc70", "OpProc71", "OpProc72", "OpProc73", "OpProc74", "OpProc75", "OpProc76", "OpProc77", "OpProc78", "OpProc79", "OpProc80", "OpProc81", "OpProc82", "OpProc83", "OpProc84", "OpProc85", "OpProc86", "OpProc87", "OpProc88", "OpProc89", "OpProc90", "OpProc91", "OpProc92", "OpProc93", "OpProc94", "OpProc95", "OpProc96", "OpProc97", "OpProc98", "OpProc99", "OpProc100", "OpProc101", "OpProc102", "OpProc103", "OpProc104", "OpProc105", "OpProc106", "OpProc107", "OpProc108", "OpProc109", "OpProc110", "OpProc111", "OpProc112", "OpProc113", "OpProc114", "OpProc115", "OpProc116", "OpProc117", "OpProc118", "OpProc119", "OpProc120", "OpProc121", "OpProc122", "OpProc123", "OpProc124", "OpProc125", "OpProc126", "OpProc127", "OpProc128", "OpProc129", "OpProc130", "OpProc131", "OpProc132", "OpProc133", "OpProc134", "OpProc135", "OpProc136", "OpProc137", "OpProc138", "OpProc139", "OpProc140", "OpProc141", "OpProc142", "OpProc143", "OpProc144", "OpProc145", "OpProc146", "OpProc147", "OpProc148", "OpProc149", "OpProc150", "OpProc151", "OpProc152", "OpProc153", "OpProc154", "OpProc155", "OpProc156", "OpProc157", "OpProc158", "OpProc159", "OpProc160", "OpProc161", "OpProc162", "OpProc163", "OpProc164", "OpProc165", "OpProc166", "OpProc167", "OpProc168", "OpProc169", "OpProc170", "OpProc171", "OpProc172", "OpProc173", "OpProc174", "OpProc175", "OpProc176", "OpProc177", "OpProc178", "OpProc179", "OpProc180", "OpProc181", "OpProc182", "OpProc183", "OpProc184", "OpProc185", "OpProc186", "OpProc187", "OpProc188", "OpProc189", "OpProc190", "OpProc191", "OpProc192", "OpProc193", "OpProc194", "OpProc195", "OpProc196", "OpProc197", "OpProc198", "OpProc199", "OpProc200", "OpProc201", "OpProc202", "OpProc203", "OpProc204", "OpProc205", "OpProc206", "OpProc207", "OpProc208", "OpProc209", "OpProc210", "OpProc211", "OpProc212", "OpProc213", "OpProc214", "OpProc215", "OpProc216", "OpProc217", "OpProc218", "OpProc219", "OpProc220", "OpProc221", "OpProc222", "OpProc223", "OpProc224", "OpProc225", "OpProc226", "OpProc227", "OpProc228", "OpProc229", "OpProc230", "OpProc231", "OpProc232", "OpProc233", "OpProc234", "OpProc235", "OpProc236", "OpProc237", "OpProc238", "OpProc239", "OpProc240", "OpProc241", "OpProc242", "OpProc243", "OpProc244", "OpProc245", "OpProc246", "OpProc247", "OpProc248", "OpProc249", "OpProc250"}), 
		  #"Replaced Value" = Table.ReplaceValue(
		    #"Removed Columns", 
		    "-99", 
		    "99", 
		    (x, y, z) as text => if x = y then z else x, 
		    {"ISS", "DischargeDest"}
		  ),
		    #"Changed Type" = Table.TransformColumnTypes(
		    #"Replaced Value", 
		    {
		      {"RegId", Int64.Type}, 
		      {"InstitutionID", type text}, 
		      {"TraumaNo", type text}, 
		      {"IncidentNo", type text}, 
		      {"ICDDiag24HR", Int64.Type}, 
		      {"DOB", type datetime}, 
		      {"Age", Int64.Type}, 
		      {"Sex", Int64.Type}, 
		      {"DOIJ", type datetime}, 
		      //{"InjuryDt", type datetime}, 
		      //{"InjuryTime", type time}, 
		      {"InjuryCause", type text}, 
		      {"InjuryType", Int64.Type}, 
		      {"InjuryIntent", Int64.Type}, 
		      {"InjuryPcode", Int64.Type}, 
		      {"InjuryPlace", type text}, 
		      //{"TransModeCodeId", Int64.Type}, 
		      {"AmbulanceArrTime", type datetime}, 
		      //{"AmbArrDate", type datetime}, 
		      //{"AmbArrTime", type time}, 
		      {"OtherHospTransfer", Int64.Type}, 
		      //{"TotalHospTransfer", Int64.Type}, 
		      {"RefHospID1", type text}, 
		      {"RefHospArrDateTime1", type datetime}, 
		      {"RefHospDeptDateTime1", type datetime}, 
		      {"RefHospTranspMode1", Int64.Type}, 
		      {"RefHospID2", type text}, 
		      {"RefHospArrDateTime2", type datetime}, 
		      {"RefHospDeptDateTime2", type datetime}, 
		      {"RefHospTranspMode2", Int64.Type}, 
		      {"RefHospID3", type text}, 
		      {"RefHospArrDateTime3", type datetime}, 
		      {"RefHospDeptDateTime3", type datetime}, 
		      {"RefHospTranspMode3", type text}, 
		      {"ArrivalDateTime", type datetime}, 
		      //{"ArrDt", type datetime}, 
		      //{"ArrTime", type time}, 
		      {"ArrivalBloodAlcoholCon", type number}, 
		      {"PreHospBloodTransf", Int64.Type}, 
		      {"PreHospCPR", Int64.Type}, 
		      {"PreHospCardArrest", Int64.Type}, 
		      {"ScenePulse", Int64.Type}, 
		      {"SceneSystolic", Int64.Type}, 
		      {"SceneRespiRate", Int64.Type}, 
		      {"SceneTemp", type number}, 
		      {"SceneGCSEye", Int64.Type}, 
		      {"SceneGCSVoice", Int64.Type}, 
		      {"SceneGCSMotor", Int64.Type}, 
		      {"SceneTotalGCS", Int64.Type}, 
		      {"ArrivalPulse", Int64.Type}, 
		      {"ArrivalSystolic", Int64.Type}, 
		      {"ArrivalRespiRate", Int64.Type}, 
		      {"ArrivalTemp", type number}, 
		      {"ArrivalGCSEye", Int64.Type}, 
		      {"ArrivalGCSVoice", Int64.Type}, 
		      {"ArrivalGCSMotor", Int64.Type}, 
		      {"ArrivalTotalGCS", Int64.Type}, 
		      {"ArrivalCPR", Int64.Type}, 
		      {"ArrivalBloodTransf", Int64.Type}, 
		      {"ArrivalPatIntubated", Int64.Type}, 
		      {"ArrivalPatIntubatedDate", type datetime}, 
		      {"ArrivalRespQualifier", Int64.Type}, 
		      {"FirstBaseExcess", Int64.Type}, 
		      {"FirstINR", type number}, 
		      {"EDDischargeDateTime", type datetime}, 
		      //{"EDDischargeDt", type datetime}, 
		      //{"EDDischargeTime", type time}, 
		      {"EDDisposition", Int64.Type}, 
		      {"DischargeDateTime", type datetime}, 
		    //   {"DischargeDt", type datetime}, 
		    //   {"DischargeTime", type time}, 
		      {"DischargeDest", Int64.Type}, 
		      {"ISS", Int64.Type}, 
		      {"LOS", type number}, 
		      {"ICULOS", type number}, 
		      {"Comorb", type text}, 
		      {"ActEngaged", type text}, 
		      {"InjuryEvent", type text}, 
		      {"SafetyDevice", type text}, 
		      {"AISCode", type text}, 
		      {"AISCount", type text}, 
		      {"AIS_BodyRegion", Int64.Type}, 
		      {"Abd_MaxAIS", Int64.Type}, 
		      {"Abdo", Int64.Type}, 
		      {"Ext_MaxAIS", Int64.Type}, 
		      {"External", Int64.Type}, 
		      {"Face_MaxAIS", Int64.Type}, 
		      {"Face", Int64.Type}, 
		      {"Head_MaxAIS", Int64.Type}, 
		      {"Head", Int64.Type}, 
		      {"LoEx_MaxAIS", Int64.Type}, 
		      {"Lowerextrem", Int64.Type}, 
		      {"Neck_MaxAIS", Int64.Type}, 
		      {"Neck", Int64.Type}, 
		      {"Spine_MaxAIS", Int64.Type}, 
		      {"Spine", Int64.Type}, 
		      {"Thor_MaxAIS", Int64.Type}, 
		      {"Thorax", Int64.Type}, 
		      {"UpEx_MaxAIS", Int64.Type}, 
		      {"Upperextrem", Int64.Type}, 
		      {"NISS", Int64.Type}, 
		      {"SevereComplications", type text}, 
		      {"OperationProcedures", type text}, 
		      {"VentDays", Int64.Type}, 
		      {"ED_LOS", type number}, 
		    //   {"ATR_AGE", Int64.Type}, 
		      {"ATR_ISS", Int64.Type}
		    }
		  ), 
		  #"Extracted Date" = Table.TransformColumns(
		    #"Changed Type", 
		    {
		      {"DOB", DateTime.Date, type date}
		      // {"DOB", DateTime.Date, type date}, 
		      // {"InjuryDt", DateTime.Date, type date}, 
		      // {"AmbArrDate", DateTime.Date, type date}, 
		      // {"RefHospArrDt1", DateTime.Date, type date}, 
		      // {"RefHospDeptDt1", DateTime.Date, type date}, 
		      // {"RefHospArrDt2", DateTime.Date, type date}, 
		      // {"RefHospDeptDt2", DateTime.Date, type date}, 
		      // {"RefHospArrDt3", DateTime.Date, type date}, 
		      // {"RefHospDeptDt3", DateTime.Date, type date}, 
		      // {"ArrDt", DateTime.Date, type date}, 
		      // {"EDDischargeDt", DateTime.Date, type date}, 
		      // {"DischargeDt", DateTime.Date, type date}
		    }
		  ), 
		  #"Extracted Text Between Delimiters" = Table.TransformColumns(
		    #"Extracted Date", 
		    {
		      {"InjuryEvent", each Text.BetweenDelimiters(_, """", """"), type text}, 
		      {"AISCode", each Text.BetweenDelimiters(_, """", """"), type text}, 
		      {"AISCount", each Text.BetweenDelimiters(_, """", """"), type text}, 
		      {"OperationProcedures", each Text.BetweenDelimiters(_, """", """"), type text}, 
		      {"SafetyDevice", each Text.BetweenDelimiters(_, """", """"), type text}, 
		      {"SevereComplications", each Text.BetweenDelimiters(_, """", """"), type text}, 
		      {"Comorb", each Text.BetweenDelimiters(_, """", """"), type text}
		    }
		  ), 
		  #"Changed Type1" = Table.TransformColumnTypes(
		    #"Extracted Text Between Delimiters", 
		    {{"AISCount", Int64.Type}}
		  ),
		    filter_incorrect_ages = Table.SelectRows(#"Changed Type1", each ([Age] <> 120 and [Age] <> 121 and [Age] <> 122 and [Age] <> 123 and [Age] <> 999) ),
		    filter_historical_nz_data = Table.SelectRows(filter_incorrect_ages, each not ( [State] = "NZ" and [DOIJ] < #datetime(2017,7,1,0,0,0)))
		in
		    filter_historical_nz_data
		```
	lineageTag: d483fa6c-fc92-46b8-9ad6-c8de7ac3123c
	queryGroup: Source

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

expression TableType =
		let
		  Source = (InputTable as table) as type =>
		    let
		      Source = Table.Schema(InputTable),
		      SortRows = Table.Sort(Source, {{"Position", Order.Ascending}}),
		      AddCustom = Table.AddColumn(
		        SortRows,
		        "TypeNames",
		        each Expression.Identifier([Name]) & " = " & [Kind]
		      ),
		      TypeString = "type table [" & Text.Combine(AddCustom[TypeNames], ", ") & "]",
		      Output = Expression.Evaluate(TypeString)
		    in
		      Output
		in
		  Source
	lineageTag: 4a7dce2a-aa5b-4161-af1c-9d3b1223f1bf
	queryGroup: Functions

	annotation PBI_ResultType = Function

	annotation PBI_NavigationStepName = Navigation

expression BodyRegion =
		let
		  Source = (_) =>
		    let
		      UE_NN = [Upperextrem] <> null,
		      LE_NN = [Lowerextrem] <> null,
		      S_NN = [Spine] <> null,
		      H_NN = [Head] <> null,
		      F_NN = [Face] <> null,
		      N_NN = [Neck] <> null,
		      E_NN = [External] <> null,
		      T_NN = [Thorax] <> null,
		      A_NN = [Abdo] <> null,
		      ortho =
		        if ([Upperextrem] > 1 and UE_NN)
		          or ([Lowerextrem] > 1 and LE_NN)
		          or ([Spine] = 2 and S_NN)
		          or ([Spine] = 3 and S_NN)
		        then
		          true
		        else
		          false,
		      sci = if ([Spine] > 3 and S_NN) then true else false,
		      heads = if ([Head] > 2 and H_NN) then true else false,
		      othchestabdo =
		        if (
		          ([Thorax] = 2 and [Abdo] = 2)
		            or ([Thorax] = 2 and [Abdo] = 1)
		            or ([Thorax] = 2 and A_NN)
		            or ([Abdo] = 2 and [Thorax] = 1)
		            or ([Abdo] = 2 and T_NN)
		        )
		        then
		          true
		        else
		          false,
		      otherinj =
		        if (
		          ([Head] = 2 and H_NN)
		            or ([Face] > 1 and F_NN)
		            or ([Neck] > 1 and N_NN)
		            or ([External] > 1 and E_NN)
		            or othchestabdo
		            and not sci
		        )
		        then
		          true
		        else
		          false,
		      thoraxoth =
		        if (([Thorax] > 2 and T_NN) and (heads or ortho or otherinj) and not sci) then
		          true
		        else
		          false,
		      abdooth =
		        if (([Abdo] > 2 and A_NN) and (heads or ortho or otherinj) and not sci) then
		          true
		        else
		          false,
		      chestabdo =
		        if (
		          (
		            ([Thorax] > 2 and T_NN and [Abdo] > 1 and A_NN)
		              or ([Abdo] > 2 and A_NN and [Thorax] > 1 and T_NN)
		          )
		            and ([Head] < 2 or H_NN)
		            and not thoraxoth
		            and not abdooth
		            and not ortho
		            and not otherinj
		            and not sci
		        )
		        then
		          true
		        else
		          false,
		      isothorax =
		        if (
		          ([Thorax] > 2 and T_NN)
		            and ([Head] < 2 or [Head] = null)
		            and ([Abdo] > 2 or [Abdo] = null)
		            and not thoraxoth
		            and not abdooth
		            and not ortho
		            and not otherinj
		            and not sci
		        )
		        then
		          true
		        else
		          false,
		      isoabdo =
		        if (
		          ([Abdo] > 2 and A_NN)
		            and ([Head] < 2 or [Head] = null)
		            and ([Thorax] < 2 or [Thorax] = null)
		            and not abdooth
		            and not ortho
		            and not otherinj
		            and not isothorax
		            and not sci
		        )
		        then
		          true
		        else
		          false,
		      abdches =
		        if ((isothorax and isoabdo) or (not isothorax and isoabdo) or (isothorax and not isoabdo)) then
		          true
		        else
		          false,
		      noinj =
		        if (not (H_NN or F_NN or N_NN or T_NN or A_NN or S_NN or UE_NN or LE_NN or E_NN)) then
		          true
		        else
		          false,
		      Isolated_head_injury =
		        if (
		          heads
		            and not sci
		            and not otherinj
		            and not thoraxoth
		            and not abdooth
		            and not chestabdo
		            and not isothorax
		            and not isoabdo
		            and not abdches
		            and not ortho
		        )
		        then
		          true
		        else
		          false,
		      Head_and_other_injuries =
		        if (
		          heads
		            and (otherinj or ortho or thoraxoth or abdooth or chestabdo or isothorax or isoabdo)
		            and not sci
		        )
		        then
		          true
		        else
		          false,
		      Serious_spinal_cord_injury = if sci then true else false,
		      Extremity_and_or_spine_injuries_only =
		        if (
		          ortho
		            and not heads
		            and not sci
		            and not thoraxoth
		            and not abdooth
		            and not chestabdo
		            and not isothorax
		            and not isoabdo
		            and not abdches
		            and not otherinj
		        )
		        then
		          true
		        else
		          false,
		      Chest_and_or_abdominal_injuries_only =
		        if (abdches and not heads and not sci and not ortho and not otherinj) then
		          true
		        else
		          false,
		      No_coded_injuries = if noinj then true else false,
		      Multiple_injuries_burns_or_other =
		        if not Isolated_head_injury
		          and not Head_and_other_injuries
		          and not Serious_spinal_cord_injury
		          and not Extremity_and_or_spine_injuries_only
		          and not Chest_and_or_abdominal_injuries_only
		          and not No_coded_injuries
		        then
		          true
		        else
		          false
		    in
		      [
		        iso            = Isolated_head_injury,
		        head_other     = Head_and_other_injuries,
		        serious_spinal = Serious_spinal_cord_injury,
		        extrem_spine   = Extremity_and_or_spine_injuries_only,
		        chest_abdo     = Chest_and_or_abdominal_injuries_only,
		        no_code        = No_coded_injuries,
		        multiple       = Multiple_injuries_burns_or_other
		      ]
		in
		  Source
	lineageTag: 6b458418-9f5f-4d6c-bcbd-8e234fe981a2
	queryGroup: Functions

	annotation PBI_ResultType = Function

	annotation PBI_NavigationStepName = Navigation

expression StartDate = #date(2000, 1, 1) meta [IsParameterQuery=true, Type="Date", IsParameterQueryRequired=true]
	lineageTag: dbba15e3-e954-483a-abd0-4a0c45a47d3a

	annotation PBI_ResultType = Date

expression EndDate = #date(2025, 1, 1) meta [IsParameterQuery=true, Type="Date", IsParameterQueryRequired=true]
	lineageTag: 16342a7d-b4f0-4441-86e7-acf24a077aba

	annotation PBI_ResultType = Date

	annotation PBI_NavigationStepName = Navigation

expression data_path = "C:\Users\maba0001\Projects\ATR\data\" meta [IsParameterQuery=true, List={"E:\projects\ATR\data\", "C:\Users\maba0001\Projects\ATR\data\"}, DefaultValue="E:\projects\ATR\data\", Type="Text", IsParameterQueryRequired=true]
	lineageTag: d33d6cbc-baeb-411c-a777-0043c198ad8f

	annotation PBI_ResultType = Text

	annotation PBI_NavigationStepName = Navigation

expression #shared =
		let
		    Source = #shared,
		    #"Converted to Table" = Record.ToTable(Source),
		    #"Filtered Rows" = Table.SelectRows(#"Converted to Table", each ([Name] = "Table.ExpandRecordColumn")),
		    Value = #"Filtered Rows"{0}[Value]
		in
		    Value
	lineageTag: dd38ae48-f8bd-4e13-8cf7-d5b194d428d4

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Function

expression hospital_features_csv =
		let
		    Source = Csv.Document(File.Contents(data_path &"Hospital features.csv"),[Delimiter=",", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"InstCodeId", type text}, {"HospitalName", type text}, {"lat", type number}, {"long", type number}, {"postcode", type text}, {"state", type text}, {"country", type text}})
		in
		    #"Changed Type"
	lineageTag: 7bde0b26-8c73-4fc9-98ec-458d498d9450
	queryGroup: Source

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression ATRCompleteDataset_Aggregated =
		let
		    Source = ATRCompleteDataset,
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"InstitutionID", "RegId", "Age", "Sex", "InjuryCause", "InjuryType", "InjuryIntent", "InjuryPlace", "ActEngaged", "TranspMode", "OtherHospTransfer", "DischargeDest", "ISS", "ATR_ISS", "LOS", "TransferType", "InjuryDt", "TimeToED", "TimeInED", "body_region"}),
		    #"Removed Duplicates" = Table.Distinct(#"Removed Other Columns"),
		    #"Added Index" = Table.AddIndexColumn(#"Removed Duplicates", "Index", 1, 1, Int64.Type),
		    #"Changed Type" = Table.TransformColumnTypes(#"Added Index",{{"Age", type text}}),
		    #"Replaced Value" = Table.ReplaceValue(#"Changed Type",each [Age], each  Record.Field(age_lookup, [Age])  ,Replacer.ReplaceText,{"Age"}),
		    Custom1 = Table.ReplaceValue(#"Replaced Value",each [InstitutionID], each  Record.Field(hospital_lookup, [InstitutionID])  ,Replacer.ReplaceText,{"InstitutionID"}),
		    #"Renamed Columns" = Table.RenameColumns(Custom1,{{"InstitutionID", "State"}}),
		    #"Rounded Off1" = Table.TransformColumns(#"Renamed Columns",{{"TimeInED", each Number.Round(_, 1), type number},{"TimeToED", each Number.Round(_, 1), type number}}),
		    #"Calculated End of Week" = Table.TransformColumns(#"Rounded Off1",{{"InjuryDt", Date.EndOfWeek, type date}})
		in
		    #"Calculated End of Week"
	lineageTag: f8379ab5-21b8-4e25-94d0-2a18bde20899
	queryGroup: Pre-process

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression injury_place =
		let
		    Source = Table.NestedJoin(injury_place_new, {"Code"}, icd_atr, {"clean_code_id"}, "icd_atr", JoinKind.LeftOuter),
		    #"Expanded icd_atr" = Table.ExpandTableColumn(Source, "icd_atr", {"icd_code"}, {"icd_code"})
		in
		    #"Expanded icd_atr"
	lineageTag: 195f24db-7a56-4351-acc8-30cc2889c2f6
	queryGroup: Pre-process

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression ICD-10-AM_injury_place =
		let
		    Source = #"ICD-10-AM",
		    #"Filtered Rows" = Table.SelectRows(Source, each Text.StartsWith([icd_code], "Y92")),
		    #"Merged Queries" = Table.NestedJoin(#"Filtered Rows", {"icd_code"}, #"B  ICD-10 Place of occurrence", {"ICD-10-AM map"}, "B  ICD-10 Place of occurrence", JoinKind.LeftOuter),
		    #"Expanded B  ICD-10 Place of occurrence" = Table.ExpandTableColumn(#"Merged Queries", "B  ICD-10 Place of occurrence", {"ICD-10 category descriptor"}, {"icd_place_category"}),
		    #"Sorted Rows" = Table.Sort(#"Expanded B  ICD-10 Place of occurrence",{{"icd_code", Order.Ascending}}),
		    #"Removed Duplicates" = Table.Distinct(#"Sorted Rows", {"icd_code"}),
		    replace_record = [Y92="Other specified places",Y92.22="Medical hospital",Y92.63="Mine or quarry",Y92.89 ="Other specified places",Y92.40="Street and highway"],
		    #"Replaced Value" = Table.ReplaceValue(#"Removed Duplicates",each [icd_code] ,replace_record,(x,y,z) as text => if Record.HasFields(z, y) then Record.Field(z,y) else x,{"icd_place_category"}),
		    #"Filled Up" = Table.FillUp(#"Replaced Value",{"icd_place_category"})
		in
		    #"Filled Up"
	lineageTag: 18630809-4bd0-4161-9b5f-438ca988fc9b
	queryGroup: Source\ICD-10-AM/ACHI

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression ICD-10-AM_injury_activity =
		let
		    Source = #"ICD-10-AM",
		    #"Filtered Rows" = Table.SelectRows(Source, each Text.StartsWith([icd_code], "U5") or Text.StartsWith([icd_code], "U6") or Text.StartsWith([icd_code], "U7") and not Text.StartsWith([icd_code], "U78") and not Text.StartsWith([icd_code], "U79")),
		    #"Merged Queries" = Table.NestedJoin(#"Filtered Rows", {"icd_code"}, #"C  ICD-10 Activity", {"ICD-10-AM map"}, "C  ICD-10 Activity", JoinKind.LeftOuter),
		    #"Expanded C  ICD-10 Activity" = Table.ExpandTableColumn(#"Merged Queries", "C  ICD-10 Activity", {"ICD-10 category descriptor"}, {"icd_activity_category"}),
		    #"Sorted Rows" = Table.Sort(#"Expanded C  ICD-10 Activity",{{"icd_code", Order.Ascending}})
		in
		    #"Sorted Rows"
	lineageTag: daf77e64-dfd6-45bf-9726-ce4f1c4e9542
	queryGroup: Source\ICD-10-AM/ACHI

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'B  ICD-10 Place of occurrence' =
		let
		    Source = Excel.Workbook(File.Contents(data_path & "ICD-10 and ICD-10-AM mapping tables - Twelfth Edition.XLSX"), null, true),
		    #"B. ICD-10 Place of occurrence_Sheet" = Source{[Item="B. ICD-10 Place of occurrence",Kind="Sheet"]}[Data],
		    #"Removed Top Rows" = Table.Skip(#"B. ICD-10 Place of occurrence_Sheet",1),
		    #"Promoted Headers" = Table.PromoteHeaders(#"Removed Top Rows", [PromoteAllScalars=true]),
		    #"Removed Other Columns" = Table.SelectColumns(#"Promoted Headers",{"ICD-10 Place of occurence category", "ICD-10 category descriptor", "ICD-10-AM map", "ICD-10-AM code descriptor of map"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Removed Other Columns",{{"ICD-10 Place of occurence category", type text}, {"ICD-10 category descriptor", type text}, {"ICD-10-AM map", type text}, {"ICD-10-AM code descriptor of map", type text}})
		in
		    #"Changed Type"
	lineageTag: cd7996f3-7a85-4e30-9596-1f76f5694735
	queryGroup: Source\ICD-10-AM/ACHI\ICD-10

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'C  ICD-10 Activity' =
		let
		    Source = Excel.Workbook(File.Contents(data_path & "ICD-10 and ICD-10-AM mapping tables - Twelfth Edition.XLSX"), null, true),
		    #"C. ICD-10 Activity_Sheet" = Source{[Item="C. ICD-10 Activity",Kind="Sheet"]}[Data],
		    #"Removed Top Rows" = Table.Skip(#"C. ICD-10 Activity_Sheet",1),
		    #"Promoted Headers" = Table.PromoteHeaders(#"Removed Top Rows", [PromoteAllScalars=true]),
		    #"Removed Other Columns" = Table.SelectColumns(#"Promoted Headers",{"ICD-10 Activity category", "ICD-10 category descriptor", "ICD-10-AM map", "ICD-10-AM code descriptor of map"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Removed Other Columns",{{"ICD-10 Activity category", type text}, {"ICD-10 category descriptor", type text}, {"ICD-10-AM map", type text}, {"ICD-10-AM code descriptor of map", type text}})
		in
		    #"Changed Type"
	lineageTag: f5fc25bc-63bd-4c7a-ab22-cc151b3f15fc
	queryGroup: Source\ICD-10-AM/ACHI\ICD-10

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression vemd_code =
		let
		    Source = #"VOTOR_ICDevent_Mapping_ATR mapping",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"VEMD Code_1", "Description_2"}),
		    #"Renamed Columns" = Table.RenameColumns(#"Removed Other Columns",{{"VEMD Code_1", "vemd_code"}, {"Description_2", "description"}}),
		    #"Removed Blank Rows" = Table.SelectRows(#"Renamed Columns", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {"", null})))
		in
		    #"Removed Blank Rows"
	lineageTag: 08ccd004-2d6a-4113-a137-00e4cd21ab73
	queryGroup: Pre-process

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'VOTOR_ICDevent_Mapping_ATR mapping' =
		let
		    Source = Excel.Workbook(File.Contents(data_path & "VOTOR_ICDevent_Mapping_ATR mapping.xlsx"), null, true),
		    Cause1 = Source{[Name="Cause"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Cause1, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"ICD10 Code", type text}, {"Description", type text}, {"VEMD Code", Int64.Type}, {"ATR Code", Int64.Type}, {"Column5", type any}, {"VEMD Code_1", Int64.Type}, {"Description_2", type text}, {"Column8", type any}, {"Column9", type any}, {"Column10", type any}, {"ATR Code_3", Int64.Type}, {"Description_4", type text}, {"VEMD Code_5", type text}, {"Column14", type text}})
		in
		    #"Changed Type"
	lineageTag: 91eb6000-e949-4301-abb2-ec3857d56bd9
	queryGroup: Source

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

/// Direct grab of 07_complete_dataset injury cause code.
expression InjuryCause =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("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", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [InjuryCause = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"InjuryCause", type text}})
		in
		    #"Changed Type"
	lineageTag: 1caed80e-ce4a-4510-9474-7c49f1e7bd81
	queryGroup: DEV

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression cause_code_modification =
		let
		    //Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#"ICD10 Code" = _t]),
		    Source = #"VOTOR_ICDevent_Mapping_ATR mapping"[[#"ICD10 Code"]],
		    #"Cleaned Text1" = Table.TransformColumns(Source,{{"ICD10 Code", Text.Clean, type text}}),
		    #"Trimmed Text" = Table.TransformColumns(#"Cleaned Text1",{{"ICD10 Code", Text.Trim, type text}}),
		    #"Duplicated Column" = Table.DuplicateColumn(#"Trimmed Text", "ICD10 Code", "ICD10 Code - Copy"),
		    #"Split Column by Position" = Table.SplitColumn(#"Duplicated Column", "ICD10 Code - Copy", Splitter.SplitTextByPositions({0, 3}, false), {"ICD10 Code.1", "ICD10 Code.2"}),
		    #"Inserted Merged Column" = Table.AddColumn(#"Split Column by Position", "look_up_v4", each Text.TrimEnd( Text.Combine({[ICD10 Code.1], ".", [ICD10 Code.2]}),"."), type text)
		in
		    #"Inserted Merged Column"
	lineageTag: 143f35db-036e-4bd0-ab7b-a7f017b82927
	queryGroup: DEV

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression missing_cause_code =
		let
		    Source = Table.NestedJoin(InjuryCause, {"InjuryCause"}, cause_code_modification, {"look_up_v4"}, "cause_code_modification", JoinKind.FullOuter),
		    #"Expanded cause_code_modification" = Table.ExpandTableColumn(Source, "cause_code_modification", {"ICD10 Code", "ICD10 Code.1", "ICD10 Code.2", "look_up_v4"}, {"ICD10 Code", "ICD10 Code.1", "ICD10 Code.2", "look_up_v4"}),
		    #"Kept Duplicates" = let columnNames = {"ICD10 Code"}, addCount = Table.Group(#"Expanded cause_code_modification", columnNames, {{"Count", Table.RowCount, type number}}), selectDuplicates = Table.SelectRows(addCount, each [Count] > 1), removeCount = Table.RemoveColumns(selectDuplicates, "Count") in Table.Join(#"Expanded cause_code_modification", columnNames, removeCount, columnNames, JoinKind.Inner),
		    #"Sorted Rows" = Table.Sort(#"Kept Duplicates",{{"InjuryCause", Order.Ascending}}),
		    #"Duplicated Column" = Table.DuplicateColumn(#"Sorted Rows", "InjuryCause", "InjuryCause - Copy"),
		    #"Replaced Value" = Table.ReplaceValue(#"Duplicated Column",".","",Replacer.ReplaceText,{"InjuryCause - Copy"}),
		    #"Renamed Columns" = Table.RenameColumns(#"Replaced Value",{{"InjuryCause - Copy", "missing_cause_code"}}),
		    #"Reordered Columns" = Table.ReorderColumns(#"Renamed Columns",{"InjuryCause", "missing_cause_code", "ICD10 Code", "ICD10 Code.1", "ICD10 Code.2", "look_up_v4"}),
		    #"Removed Other Columns" = Table.SelectColumns(#"Reordered Columns",{"InjuryCause", "missing_cause_code"}),
		    #"Renamed Columns1" = Table.RenameColumns(#"Removed Other Columns",{{"missing_cause_code", "ICD10 Code"}, {"InjuryCause", "Description"}})
		in
		    #"Renamed Columns1"
	lineageTag: 4080d56e-f574-47ab-935f-c1777767aa3e
	queryGroup: DEV

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression age_lookup =
		let
		    Source = {0..130},
		    #"Converted to Table" = Table.FromList(Source, Splitter.SplitByNothing(),type table [age= Int64.Type], null, ExtraValues.Error),
		    #"Inserted Integer-Division" = Table.AddColumn(#"Converted to Table", "age 5y", each Number.IntegerDivide([age], 5)*5, Int64.Type),
		    #"Inserted Addition" = Table.AddColumn(#"Inserted Integer-Division", "Addition", each [age 5y] + 4, type number),
		    #"Merged Columns" = Table.CombineColumns(Table.TransformColumnTypes(#"Inserted Addition", {{"age 5y", type text}, {"Addition", type text}}, "en-AU"),{"age 5y", "Addition"},Combiner.CombineTextByDelimiter("-", QuoteStyle.None),"age_5y"),
		    #"Changed Type" = Table.TransformColumnTypes(#"Merged Columns",{{"age", type text}}),
		    #"Renamed Columns" = Record.FromTable( Table.RenameColumns(#"Changed Type",{{"age", "Name"}, {"age_5y", "Value"}}))
		in
		    #"Renamed Columns"
	lineageTag: 215e8941-8c4e-4f20-81dd-92d234ee3c1b
	queryGroup: Pre-process

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Record

expression hospital_lookup =
		let
		    Source = Table.NestedJoin(hospital, {"InstitutionID"}, hospital_features, {"InstCodeId"}, "hospital_features", JoinKind.LeftOuter),
		    #"Removed Columns" = Table.RemoveColumns(Source,{"HospitalName"}),
		    #"Expanded hospital_features" = Table.ExpandTableColumn(#"Removed Columns", "hospital_features", {"HospitalName", "lat", "long", "postcode", "state", "country"}, {"HospitalName", "lat", "long", "postcode", "state", "country"}),
		    #"Added Index" = #"Expanded hospital_features"[[InstitutionID],[state]],
		    #"Renamed Columns" = Record.FromTable( Table.RenameColumns(#"Added Index",{{"InstitutionID", "Name"}, {"state", "Value"}}))
		in
		    #"Renamed Columns"
	lineageTag: a1054e01-25aa-4849-9366-8031a46f906d
	queryGroup: Pre-process

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Record

expression FACT_NATIONAL =
		let
		    Source = FACT_ATR
		in
		    Source
	lineageTag: 4571fc17-a764-438c-a871-f0ea9e4ffcdd
	queryGroup: Production

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression icd_10_vemd_atr_code =
		let
		    Source = #"VOTOR_ICDevent_Mapping_ATR mapping",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"ICD10 Code", "Description", "VEMD Code", "ATR Code"}),
		    #"Appended Query" = Table.Combine({#"Removed Other Columns", missing_cause_code}),
		    #"Sorted Rows" = Table.Sort(#"Appended Query",{{"ICD10 Code", Order.Ascending}})
		in
		    #"Sorted Rows"
	lineageTag: 8b706975-318d-4c14-9841-4febc621243f
	queryGroup: DEV

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression ICD-10-AM =
		let
		    Source = Csv.Document(File.Contents(data_path & "ICD_ALL_CODES.csv"),[Delimiter=",", Columns=2, Encoding=65001, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		    #"Inserted Replaced Text" = Table.AddColumn(#"Promoted Headers", "clean_code_id", each Text.Replace([CodeId], ".", ""), type text),
		    #"Renamed Columns" = Table.RenameColumns(#"Inserted Replaced Text",{{"CodeId", "icd_code"}, {"Desc", "icd_code_description"}})
		in
		    #"Renamed Columns"
	lineageTag: d6e9dcd5-ad0c-4e4a-9058-e50703ae0a50
	queryGroup: Source\ICD-10-AM/ACHI

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression icd_atr =
		let
		    Source = Excel.Workbook(File.Contents(data_path & "VOTOR_ICDevent_Mapping_ATR mapping.xlsx"), null, true),
		    FINAL_CODE_MAPPING_Sheet = Source{[Item="FINAL_CODE_MAPPING",Kind="Sheet"]}[Data],
		    #"Removed Top Rows" = Table.Skip(FINAL_CODE_MAPPING_Sheet,2),
		    #"Promoted Headers" = Table.PromoteHeaders(#"Removed Top Rows", [PromoteAllScalars=true]),
		    #"Cleaned Text" = Table.TransformColumns(Table.TransformColumnTypes(#"Promoted Headers", {{"icd_code", type text}, {"clean_code_id", type text}, {"prior_completion", type text}, {"prior ATR Code", type text}, {"atr_code", type text}}, "en-AU"),{{"icd_code_group", Text.Clean, type text}, {"icd_code", Text.Clean, type text}, {"Desc", Text.Clean, type text}, {"clean_code_id", Text.Clean, type text}, {"code_letter", Text.Clean, type text}, {"prior_completion", Text.Clean, type text}, {"prior ATR Code", Text.Clean, type text}, {"atr_code", Text.Clean, type text}}),
		    #"Trimmed Text" = Table.TransformColumns(#"Cleaned Text",{{"icd_code_group", Text.Trim, type text}, {"icd_code", Text.Trim, type text}, {"Desc", Text.Trim, type text}, {"clean_code_id", Text.Trim, type text}, {"code_letter", Text.Trim, type text}, {"prior_completion", Text.Trim, type text}, {"prior ATR Code", Text.Trim, type text}, {"atr_code", Text.Trim, type text}}),
		    #"Removed Other Columns" = Table.SelectColumns(#"Trimmed Text",{"icd_code_group", "icd_code", "Desc", "clean_code_id", "code_letter", "atr_code"})
		in
		    #"Removed Other Columns"
	lineageTag: d3158263-b3c3-4cf4-bbc9-ca3b882f4c2e
	queryGroup: Source

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression injury_place_new =
		let
		    Source = Excel.Workbook(File.Contents(data_path & "injury place codes.xlsx"), null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Code", type text}, {"Description", type text}, {"VEMD code", Int64.Type}, {"Column4", type any}, {"VEMD Code", Int64.Type}, {"Description_1", type text}}),
		    #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"Code", "Description", "VEMD code"}),
		    #"Merged Queries" = Table.NestedJoin(#"Removed Other Columns", {"VEMD code"}, VEMD_place, {"VEMD Code"}, "VEMD_place", JoinKind.LeftOuter),
		    #"Expanded VEMD_place" = Table.ExpandTableColumn(#"Merged Queries", "VEMD_place", {"Description_1"}, {"vemd_place_description"})
		in
		    #"Expanded VEMD_place"
	lineageTag: b60f01fe-e5f5-4437-a24c-36ce6cb326d6
	queryGroup: Source

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Exception

expression VEMD_place =
		let
		    Source = Excel.Workbook(File.Contents(data_path & "injury place codes.xlsx"), null, true),
		    Sheet1_Sheet = Source{[Item="Sheet1",Kind="Sheet"]}[Data],
		    #"Promoted Headers" = Table.PromoteHeaders(Sheet1_Sheet, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"Code", type text}, {"Description", type text}, {"VEMD code", Int64.Type}, {"Column4", type any}, {"VEMD Code", Int64.Type}, {"Description_1", type text}}),
		    #"Removed Other Columns" = Table.SelectColumns(#"Changed Type",{"VEMD Code", "Description_1"}),
		    #"Kept First Rows" = Table.FirstN(#"Removed Other Columns",13)
		in
		    #"Kept First Rows"
	lineageTag: 5cb3eab2-7fd6-4e94-bef9-bdc4b8a460a5
	queryGroup: Source

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Exception

expression atr_codes =
		let
		    Source = #"VOTOR_ICDevent_Mapping_ATR mapping",
		    #"Removed Other Columns" = Table.SelectColumns(Source,{"ATR Code_3", "Description_4"}),
		    #"Cleaned Text1" = Table.TransformColumns(#"Removed Other Columns",{{"Description_4", Text.Clean, type text}}),
		    #"Trimmed Text" = Table.TransformColumns(#"Cleaned Text1",{{"Description_4", Text.Trim, type text}}),
		    #"Kept First Rows" = Table.FirstN(#"Trimmed Text",17),
		    #"Renamed Columns" = Table.RenameColumns(#"Kept First Rows",{{"ATR Code_3", "atr_code"}, {"Description_4", "atr_description"} }),
		    #"Added Conditional Column" = Table.AddColumn(#"Renamed Columns", "atr_broad_group", each if  List.Contains( {1,2,3,4,7,8}, [atr_code]) then [atr_description] else "Other", type text),
		    #"Added Conditional Column1" = Table.AddColumn(#"Added Conditional Column", "atr_broad_group_sort", each if [atr_broad_group] = "Other" then 9 else [atr_code], Int64.Type)
		in
		    #"Added Conditional Column1"
	lineageTag: ba9abd45-d39a-491b-b65e-c17ef323a861
	queryGroup: Pre-process

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression DIM_ICD_ALL_CODES =
		let
		    Source = Csv.Document(File.Contents(data_path & "ICD_ALL_CODES.csv"),[Delimiter=",", Columns=2, Encoding=65001, QuoteStyle=QuoteStyle.None]),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		    #"Inserted Replaced Text" = Table.AddColumn(#"Promoted Headers", "clean_code_id", each Text.Replace([CodeId], ".", ""), type text),
		    #"Filtered Rows" = Table.SelectRows(#"Inserted Replaced Text", each ([CodeId] = "-99"))
		in
		    #"Filtered Rows"
	lineageTag: bde04a96-317d-4786-8545-4e294da207b9
	queryGroup: Dimension

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression '07_ATRCompleteDataset (2)' =
		let
		    Source = #"07_ATRCompleteDataset"
		in
		    Source
	lineageTag: bcf39959-80a0-4139-88a0-9404b377cc35
	queryGroup: DEV

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'ATRCompleteDataset (2)' =
		let
		    Source = ATRCompleteDataset
		in
		    Source
	lineageTag: 2d45ca0d-af93-4a4b-ad96-27e8c7d77d5a
	queryGroup: DEV

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

