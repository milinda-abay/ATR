{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "Calendar",
      "lineageTag": "0eacafb2-20e6-4e5d-bc6a-0795aaaa3553",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = List.Dates(StartDate, Length, #duration(1, 0, 0, 0)),",
        "    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Converted to Table\",{{\"Column1\", type date}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"Column1\", \"cal_date\"}}),",
        "    Today = DateTime.Date(DateTime.LocalNow()),",
        "    Length = Duration.Days(EndDate-StartDate),",
        "    #\"Inserted Year\" = Table.AddColumn(#\"Renamed Columns\", \"cal_year\", each Date.Year([cal_date]), Int64.Type),",
        "    #\"Inserted Month\" = Table.AddColumn(#\"Inserted Year\", \"cal_month\", each Date.Month([cal_date]), Int64.Type),",
        "    #\"Inserted Month Name\" = Table.AddColumn(#\"Inserted Month\", \"cal_month_name\", each Date.MonthName([cal_date]), type text),",
        "    #\"Added Custom Column\" = Table.AddColumn(#\"Inserted Month Name\", \"MonthYear\", each Text.Combine({Text.Start([cal_month_name], 3), \"-\", Text.From([cal_year], \"en-AU\")}), type text),",
        "    #\"Inserted Addition\" = Table.AddColumn(#\"Added Custom Column\", \"cal_mon_yeat_int\", each [cal_year]*100 + [cal_month], Int64.Type),",
        "    #\"Inserted Day Name\" = Table.AddColumn(#\"Inserted Addition\", \"Day\", each Date.DayOfWeekName([cal_date]), type text),",
        "    #\"Inserted Day\" = Table.AddColumn(#\"Inserted Day Name\", \"Date\", each Date.Day([cal_date]), Int64.Type),",
        "    #\"Inserted Day of Week\" = Table.AddColumn(#\"Inserted Day\", \"Day of Week\", each Date.DayOfWeek([cal_date]), Int64.Type),",
        "    #\"Inserted Day of Year\" = Table.AddColumn(#\"Inserted Day of Week\", \"Day of Year\", each Date.DayOfYear([cal_date]), Int64.Type)",
        "in",
        "    #\"Inserted Day of Year\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = List.Dates(StartDate, Length, #duration(1, 0, 0, 0)),\\n    #\\\"Converted to Table\\\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Converted to Table\\\",{{\\\"Column1\\\", type date}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"Column1\\\", \\\"cal_date\\\"}}),\\n    Today = DateTime.Date(DateTime.LocalNow()),\\n    Length = Duration.Days(EndDate-StartDate),\\n    #\\\"Inserted Year\\\" = Table.AddColumn(#\\\"Renamed Columns\\\", \\\"cal_year\\\", each Date.Year([cal_date]), Int64.Type),\\n    #\\\"Inserted Month\\\" = Table.AddColumn(#\\\"Inserted Year\\\", \\\"cal_month\\\", each Date.Month([cal_date]), Int64.Type),\\n    #\\\"Inserted Month Name\\\" = Table.AddColumn(#\\\"Inserted Month\\\", \\\"cal_month_name\\\", each Date.MonthName([cal_date]), type text),\\n    #\\\"Added Custom Column\\\" = Table.AddColumn(#\\\"Inserted Month Name\\\", \\\"MonthYear\\\", each Text.Combine({Text.Start([cal_month_name], 3), \\\"-\\\", Text.From([cal_year], \\\"en-AU\\\")}), type text),\\n    #\\\"Inserted Addition\\\" = Table.AddColumn(#\\\"Added Custom Column\\\", \\\"cal_mon_yeat_int\\\", each [cal_year]*100 + [cal_month], Int64.Type),\\n    #\\\"Inserted Day Name\\\" = Table.AddColumn(#\\\"Inserted Addition\\\", \\\"Day\\\", each Date.DayOfWeekName([cal_date]), type text),\\n    #\\\"Inserted Day\\\" = Table.AddColumn(#\\\"Inserted Day Name\\\", \\\"Date\\\", each Date.Day([cal_date]), Int64.Type),\\n    #\\\"Inserted Day of Week\\\" = Table.AddColumn(#\\\"Inserted Day\\\", \\\"Day of Week\\\", each Date.DayOfWeek([cal_date]), Int64.Type),\\n    #\\\"Inserted Day of Year\\\" = Table.AddColumn(#\\\"Inserted Day of Week\\\", \\\"Day of Year\\\", each Date.DayOfYear([cal_date]), Int64.Type)\\nin\\n    #\\\"Inserted Day of Year\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_AGE",
      "lineageTag": "bbda7cb2-f964-4241-817d-d7bd147de2cf",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = {0..130},",
        "    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(),type table [age= Int64.Type], null, ExtraValues.Error),",
        "    #\"Inserted Integer-Division\" = Table.AddColumn(#\"Converted to Table\", \"age 5y\", each Number.IntegerDivide([age], 5)*5, Int64.Type),",
        "    #\"Inserted Addition\" = Table.AddColumn(#\"Inserted Integer-Division\", \"Addition\", each [age 5y] + 4, type number),",
        "    #\"Duplicated Column\" = Table.DuplicateColumn(#\"Inserted Addition\", \"age 5y\", \"order_age_5y\"),",
        "    #\"Merged Columns\" = Table.CombineColumns(Table.TransformColumnTypes(#\"Duplicated Column\", {{\"age 5y\", type text}, {\"Addition\", type text}}, \"en-AU\"),{\"age 5y\", \"Addition\"},Combiner.CombineTextByDelimiter(\"-\", QuoteStyle.None),\"age_5y\"),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Merged Columns\", \"order_age_85\", each if [age] < 80 then [order_age_5y] else 80, Int64.Type),",
        "    Custom1 = Table.InsertRows( #\"Added Custom\",  0, {[age=-1, age_5y=\"NA\", order_age_5y = -1, order_age_85=-1 ]})",
        "in",
        "    Custom1"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = {0..130},\\n    #\\\"Converted to Table\\\" = Table.FromList(Source, Splitter.SplitByNothing(),type table [age= Int64.Type], null, ExtraValues.Error),\\n    #\\\"Inserted Integer-Division\\\" = Table.AddColumn(#\\\"Converted to Table\\\", \\\"age 5y\\\", each Number.IntegerDivide([age], 5)*5, Int64.Type),\\n    #\\\"Inserted Addition\\\" = Table.AddColumn(#\\\"Inserted Integer-Division\\\", \\\"Addition\\\", each [age 5y] + 4, type number),\\n    #\\\"Duplicated Column\\\" = Table.DuplicateColumn(#\\\"Inserted Addition\\\", \\\"age 5y\\\", \\\"order_age_5y\\\"),\\n    #\\\"Merged Columns\\\" = Table.CombineColumns(Table.TransformColumnTypes(#\\\"Duplicated Column\\\", {{\\\"age 5y\\\", type text}, {\\\"Addition\\\", type text}}, \\\"en-AU\\\"),{\\\"age 5y\\\", \\\"Addition\\\"},Combiner.CombineTextByDelimiter(\\\"-\\\", QuoteStyle.None),\\\"age_5y\\\"),\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Merged Columns\\\", \\\"order_age_85\\\", each if [age] < 80 then [order_age_5y] else 80, Int64.Type),\\n    Custom1 = Table.InsertRows( #\\\"Added Custom\\\",  0, {[age=-1, age_5y=\\\"NA\\\", order_age_5y = -1, order_age_85=-1 ]})\\nin\\n    Custom1\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_GENDER",
      "lineageTag": "0ae4c4ec-3eaf-4226-9740-0cd8db420aa6",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = #table( type table [pat_gender_code_id=Int64.Type, description=text],{{1,\"Male\"}, {2,\"Female\"},{3,\"Intersex or indeterminate\"},{9,\"Not stated/inadequately described\"}})",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #table( type table [pat_gender_code_id=Int64.Type, description=text],{{1,\\\"Male\\\"}, {2,\\\"Female\\\"},{3,\\\"Intersex or indeterminate\\\"},{9,\\\"Not stated/inadequately described\\\"}})\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_INJURY_TYPE",
      "lineageTag": "ec7427fe-baac-40b0-ac83-0ee93cb2b448",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = #table( type table [injury_type_code_id=Int64.Type, description=text],{{1,\"Blunt\"}, {2,\"Penetrating\"},{3,\"Burn\"},{8,\"Other trauma\"},{9,\"Not stated/inadequately described\"}})",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #table( type table [injury_type_code_id=Int64.Type, description=text],{{1,\\\"Blunt\\\"}, {2,\\\"Penetrating\\\"},{3,\\\"Burn\\\"},{8,\\\"Other trauma\\\"},{9,\\\"Not stated/inadequately described\\\"}})\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_HOSPITAL",
      "lineageTag": "ca130987-a201-4982-809c-76b08d10b11a",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = Table.NestedJoin(hospital, {\"InstCodeId\"}, hospital_features, {\"InstCodeId\"}, \"hospital_features\", JoinKind.LeftOuter),",
        "    #\"Removed Columns\" = Table.RemoveColumns(Source,{\"HospitalName\"}),",
        "    #\"Expanded hospital_features\" = Table.ExpandTableColumn(#\"Removed Columns\", \"hospital_features\", {\"HospitalName\", \"lat\", \"long\", \"postcode\", \"state\", \"country\"}, {\"HospitalName\", \"lat\", \"long\", \"postcode\", \"state\", \"country\"}),",
        "    #\"Added Index\" = Table.AddIndexColumn(#\"Expanded hospital_features\", \"Index\", 1, 1, Int64.Type)",
        "in",
        "    #\"Added Index\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.NestedJoin(hospital, {\\\"InstCodeId\\\"}, hospital_features, {\\\"InstCodeId\\\"}, \\\"hospital_features\\\", JoinKind.LeftOuter),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(Source,{\\\"HospitalName\\\"}),\\n    #\\\"Expanded hospital_features\\\" = Table.ExpandTableColumn(#\\\"Removed Columns\\\", \\\"hospital_features\\\", {\\\"HospitalName\\\", \\\"lat\\\", \\\"long\\\", \\\"postcode\\\", \\\"state\\\", \\\"country\\\"}, {\\\"HospitalName\\\", \\\"lat\\\", \\\"long\\\", \\\"postcode\\\", \\\"state\\\", \\\"country\\\"}),\\n    #\\\"Added Index\\\" = Table.AddIndexColumn(#\\\"Expanded hospital_features\\\", \\\"Index\\\", 1, 1, Int64.Type)\\nin\\n    #\\\"Added Index\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_TRANSPORT",
      "lineageTag": "e544d893-de04-4208-ac71-3465cb51df4b",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = #table( type table [trans_mode_code_id=Int64.Type, description=text],{{1,\"Road Ambulance\"}, {2,\"Helicopter Ambulance\"},{3,\"Fixed-wing Ambulance\"},{4,\"Private/Public Vehicle/Taxi/Walk-in\"},{5,\"Interstate Ambulance\"},{6,\"Private Ambulance\"},{7,\"Police/Prison Vehicle\"},{8,\"Other\"},{9,\"Not stated/inadequately described\"}})",
        "in",
        "",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #table( type table [trans_mode_code_id=Int64.Type, description=text],{{1,\\\"Road Ambulance\\\"}, {2,\\\"Helicopter Ambulance\\\"},{3,\\\"Fixed-wing Ambulance\\\"},{4,\\\"Private/Public Vehicle/Taxi/Walk-in\\\"},{5,\\\"Interstate Ambulance\\\"},{6,\\\"Private Ambulance\\\"},{7,\\\"Police/Prison Vehicle\\\"},{8,\\\"Other\\\"},{9,\\\"Not stated/inadequately described\\\"}})\\nin\\n\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_INJURY_PLACE",
      "lineageTag": "f197a711-df9f-43c5-ad6a-af9d56b84b20",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = injury_place",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = injury_place\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_INJURY_INTENT",
      "lineageTag": "69d4d3af-b501-4e3a-a876-d8f10f24cf70",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = #table( type table [injury_intent_code_id=Int64.Type, description=text],{{1,\"Accidental or unintentional - injury not intended\"}, {2,\"Intentional self-harm\"},{3,\"Sexual assault\"},{4,\"Maltreatment by parent (including neglect)\"},{5,\"Maltreatment by spouse or partner (including domestic violence)\"},{6,\"Other and unspecified assault\"},{7,\"Event of undetermined intent\"},{8,\"Legal intervention (including police), operations of war or acts of terrorism\"},{9,\"Adverse effect or complications of medical and surgical care\"},{10,\"Other specified intent\"},{11,\"Intent not specified\"}})",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #table( type table [injury_intent_code_id=Int64.Type, description=text],{{1,\\\"Accidental or unintentional - injury not intended\\\"}, {2,\\\"Intentional self-harm\\\"},{3,\\\"Sexual assault\\\"},{4,\\\"Maltreatment by parent (including neglect)\\\"},{5,\\\"Maltreatment by spouse or partner (including domestic violence)\\\"},{6,\\\"Other and unspecified assault\\\"},{7,\\\"Event of undetermined intent\\\"},{8,\\\"Legal intervention (including police), operations of war or acts of terrorism\\\"},{9,\\\"Adverse effect or complications of medical and surgical care\\\"},{10,\\\"Other specified intent\\\"},{11,\\\"Intent not specified\\\"}})\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_INJURY_ACTIVITY",
      "lineageTag": "03b4465e-269e-415b-8b44-fb51a722c7b1",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = injury_activity",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = injury_activity\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_INJURY_CAUSE",
      "lineageTag": "3c833ef7-1be0-48bb-86e0-9c202ea3e667",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = injury_cause,",
        "    ",
        "    assault_list = {",
        "        \"X86.07\",",
        "        \"X89.08\",",
        "        \"X91\",",
        "        \"X91.00\",",
        "        \"X91.01\",",
        "        \"X91.03\",",
        "        \"X91.04\",",
        "        \"X91.08\",",
        "        \"X91.09\",",
        "        \"X91.1\",",
        "        \"X92.01\",",
        "        \"X93\",",
        "        \"X93.00\",",
        "        \"X93.05\",",
        "        \"X93.08\",",
        "        \"X93.09\",",
        "        \"X95\",",
        "        \"X95.08\",",
        "        \"X95.09\",",
        "        \"X95.14\",",
        "        \"X95.17\",",
        "        \"X95.19\",",
        "        \"X95.2\",",
        "        \"X95.20\",",
        "        \"X95.22\",",
        "        \"X95.24\",",
        "        \"X95.26\",",
        "        \"X95.27\",",
        "        \"X95.28\",",
        "        \"X95.29\",",
        "        \"X95.37\",",
        "        \"X95.39\",",
        "        \"X95.42\",",
        "        \"X95.48\",",
        "        \"X95.81\",",
        "        \"X95.89\",",
        "        \"X95.9\",",
        "        \"X95.91\",",
        "        \"X95.92\",",
        "        \"X95.94\",",
        "        \"X95.95\",",
        "        \"X95.96\",",
        "        \"X95.97\",",
        "        \"X95.98\",",
        "        \"X95.99\",",
        "        \"X97.00\",",
        "        \"X97.01\",",
        "        \"X97.04\",",
        "        \"X97.08\",",
        "        \"X97.09\",",
        "        \"X98.09\",",
        "        \"X99\",",
        "        \"X99.0\",",
        "        \"X99.00\",",
        "        \"X99.01\",",
        "        \"X99.02\",",
        "        \"X99.04\",",
        "        \"X99.06\",",
        "        \"X99.07\",",
        "        \"X99.08\",",
        "        \"X99.09\",",
        "        \"X99.1\",",
        "        \"X99.16\",",
        "        \"X99.28\",",
        "        \"X99.30\",",
        "        \"X99.32\",",
        "        \"X99.34\",",
        "        \"X99.36\",",
        "        \"X99.37\",",
        "        \"X99.39\",",
        "        \"X99.4\",",
        "        \"X99.48\",",
        "        \"X99.49\",",
        "        \"X99.58\",",
        "        \"X99.8\",",
        "        \"X99.80\",",
        "        \"X99.81\",",
        "        \"X99.82\",",
        "        \"X99.84\",",
        "        \"X99.86\",",
        "        \"X99.87\",",
        "        \"X99.88\",",
        "        \"X99.89\",",
        "        \"X99.9\",",
        "        \"X99.90\",",
        "        \"X99.92\",",
        "        \"X99.94\",",
        "        \"X99.96\",",
        "        \"X99.97\",",
        "        \"X99.98\",",
        "        \"X99.99\",",
        "        \"Y00\",",
        "        \"Y00.00\",",
        "        \"Y00.01\",",
        "        \"Y00.02\",",
        "        \"Y00.03\",",
        "        \"Y00.04\",",
        "        \"Y00.05\",",
        "        \"Y00.06\",",
        "        \"Y00.07\",",
        "        \"Y00.08\",",
        "        \"Y00.09\",",
        "        \"Y00.18\",",
        "        \"Y00.41\",",
        "        \"Y00.48\",",
        "        \"Y00.49\",",
        "        \"Y00.51\",",
        "        \"Y00.59\",",
        "        \"Y00.88\",",
        "        \"Y00.89\",",
        "        \"Y01\",",
        "        \"Y01.00\",",
        "        \"Y01.02\",",
        "        \"Y01.04\",",
        "        \"Y01.06\",",
        "        \"Y01.07\",",
        "        \"Y01.08\",",
        "        \"Y01.09\",",
        "        \"Y02.34\",",
        "        \"Y02.36\",",
        "        \"Y02.39\",",
        "        \"Y02.90\",",
        "        \"Y03.00\",",
        "        \"Y03.09\",",
        "        \"Y03.20\",",
        "        \"Y03.28\",",
        "        \"Y03.29\",",
        "        \"Y03.37\",",
        "        \"Y03.48\",",
        "        \"Y03.49\",",
        "        \"Y03.59\",",
        "        \"Y03.80\",",
        "        \"Y03.82\",",
        "        \"Y03.86\",",
        "        \"Y03.88\",",
        "        \"Y03.89\",",
        "        \"Y04\",",
        "        \"Y04.00\",",
        "        \"Y04.01\",",
        "        \"Y04.02\",",
        "        \"Y04.03\",",
        "        \"Y04.04\",",
        "        \"Y04.05\",",
        "        \"Y04.06\",",
        "        \"Y04.07\",",
        "        \"Y04.08\",",
        "        \"Y04.09\",",
        "        \"Y04.18\",",
        "        \"Y04.19\",",
        "        \"Y04.29\",",
        "        \"Y04.41\",",
        "        \"Y04.48\",",
        "        \"Y04.49\",",
        "        \"Y04.58\",",
        "        \"Y04.59\",",
        "        \"Y04.8\",",
        "        \"Y04.80\",",
        "        \"Y04.88\",",
        "        \"Y04.89\",",
        "        \"Y05.04\",",
        "        \"Y05.06\",",
        "        \"Y05.08\",",
        "        \"Y06.01\",",
        "        \"Y07\",",
        "        \"Y07.0\",",
        "        \"Y07.01\",",
        "        \"Y07.04\",",
        "        \"Y07.08\",",
        "        \"Y07.09\",",
        "        \"Y07.8\",",
        "        \"Y08\",",
        "        \"Y08.00\",",
        "        \"Y08.01\",",
        "        \"Y08.03\",",
        "        \"Y08.04\",",
        "        \"Y08.06\",",
        "        \"Y08.07\",",
        "        \"Y08.08\",",
        "        \"Y08.09\",",
        "        \"Y08.48\",",
        "        \"Y09\",",
        "        \"Y09.00\",",
        "        \"Y09.01\",",
        "        \"Y09.02\",",
        "        \"Y09.04\",",
        "        \"Y09.05\",",
        "        \"Y09.06\",",
        "        \"Y09.07\",",
        "        \"Y09.08\",",
        "        \"Y09.09\",",
        "        \"Y09.9\",",
        "        \"Y09.99\"",
        "    },",
        "    high_fall_list = {",
        "        \"W09\",",
        "        \"W09.0\",",
        "        \"W09.08\",",
        "        \"W09.1\",",
        "        \"W09.2\",",
        "        \"W09.3\",",
        "        \"W09.4\",",
        "        \"W09.40\",",
        "        \"W09.5\",",
        "        \"W09.6\",",
        "        \"W09.60\",",
        "        \"W09.8\",",
        "        \"W09.9\",",
        "        \"W10\",",
        "        \"W10.0\",",
        "        \"W10.01\",",
        "        \"W10.03\",",
        "        \"W10.08\",",
        "        \"W10.09\",",
        "        \"W10.1\",",
        "        \"W10.2\",",
        "        \"W10.21\",",
        "        \"W10.48\",",
        "        \"W10.5\",",
        "        \"W10.58\",",
        "        \"W10.59\",",
        "        \"W10.62\",",
        "        \"W10.8\",",
        "        \"W10.88\",",
        "        \"W10.9\",",
        "        \"W11\",",
        "        \"W11.03\",",
        "        \"W11.04\",",
        "        \"W11.08\",",
        "        \"W11.09\",",
        "        \"W11.13\",",
        "        \"W11.52\",",
        "        \"W11.53\",",
        "        \"W11.59\",",
        "        \"W11.62\",",
        "        \"W11.72\",",
        "        \"W11.74\",",
        "        \"W12\",",
        "        \"W12.08\",",
        "        \"W12.52\",",
        "        \"W13\",",
        "        \"W13.0\",",
        "        \"W13.03\",",
        "        \"W13.08\",",
        "        \"W13.1\",",
        "        \"W13.2\",",
        "        \"W13.3\",",
        "        \"W13.30\",",
        "        \"W13.4\",",
        "        \"W13.5\",",
        "        \"W13.58\",",
        "        \"W13.62\",",
        "        \"W13.7\",",
        "        \"W13.73\",",
        "        \"W13.8\",",
        "        \"W13.80\",",
        "        \"W13.88\",",
        "        \"W13.9\",",
        "        \"W14\",",
        "        \"W14.01\",",
        "        \"W14.03\",",
        "        \"W14.08\",",
        "        \"W14.82\",",
        "        \"W14.88\",",
        "        \"W14.89\",",
        "        \"W15\",",
        "        \"W15.30\",",
        "        \"W15.81\",",
        "        \"W15.88\",",
        "        \"W16\",",
        "        \"W16.0\",",
        "        \"W16.08\",",
        "        \"W16.1\",",
        "        \"W16.2\",",
        "        \"W16.6\",",
        "        \"W16.8\",",
        "        \"W16.83\",",
        "        \"W16.88\",",
        "        \"W16.9\",",
        "        \"W17\",",
        "        \"W17.0\",",
        "        \"W17.02\",",
        "        \"W17.03\",",
        "        \"W17.08\",",
        "        \"W17.1\",",
        "        \"W17.2\",",
        "        \"W17.3\",",
        "        \"W17.4\",",
        "        \"W17.48\",",
        "        \"W17.5\",",
        "        \"W17.52\",",
        "        \"W17.58\",",
        "        \"W17.6\",",
        "        \"W17.68\",",
        "        \"W17.7\",",
        "        \"W17.8\",",
        "        \"W17.80\",",
        "        \"W17.81\",",
        "        \"W17.89\",",
        "        \"W17.9\",",
        "        \"X80\",",
        "        \"X80.08\",",
        "        \"X80.58\",",
        "        \"X80.88\",",
        "        \"X80.89\",",
        "        \"Y30\"",
        "    },",
        "    low_fall_list = {",
        "        \"W00\",",
        "        \"W00.08\",",
        "        \"W00.2\",",
        "        \"W00.80\",",
        "        \"W01\",",
        "        \"W01.0\",",
        "        \"W01.00\",",
        "        \"W01.01\",",
        "        \"W01.02\",",
        "        \"W01.04\",",
        "        \"W01.08\",",
        "        \"W01.09\",",
        "        \"W01.1\",",
        "        \"W01.10\",",
        "        \"W01.14\",",
        "        \"W01.18\",",
        "        \"W01.19\",",
        "        \"W01.2\",",
        "        \"W01.24\",",
        "        \"W01.28\",",
        "        \"W01.3\",",
        "        \"W01.30\",",
        "        \"W01.31\",",
        "        \"W01.39\",",
        "        \"W01.4\",",
        "        \"W01.40\",",
        "        \"W01.41\",",
        "        \"W01.48\",",
        "        \"W01.49\",",
        "        \"W01.5\",",
        "        \"W01.52\",",
        "        \"W01.54\",",
        "        \"W01.58\",",
        "        \"W01.59\",",
        "        \"W01.72\",",
        "        \"W01.8\",",
        "        \"W01.88\",",
        "        \"W01.89\",",
        "        \"W01.9\",",
        "        \"W02\",",
        "        \"W02.0\",",
        "        \"W02.01\",",
        "        \"W02.1\",",
        "        \"W02.2\",",
        "        \"W02.3\",",
        "        \"W02.4\",",
        "        \"W02.41\",",
        "        \"W02.5\",",
        "        \"W02.6\",",
        "        \"W02.60\",",
        "        \"W02.7\",",
        "        \"W02.8\",",
        "        \"W02.81\",",
        "        \"W02.88\",",
        "        \"W02.9\",",
        "        \"W02.90\",",
        "        \"W03\",",
        "        \"W04\",",
        "        \"W04.00\",",
        "        \"W04.04\",",
        "        \"W04.08\",",
        "        \"W04.09\",",
        "        \"W04.14\",",
        "        \"W04.48\",",
        "        \"W04.49\",",
        "        \"W05\",",
        "        \"W06\",",
        "        \"W06.0\",",
        "        \"W06.04\",",
        "        \"W06.08\",",
        "        \"W06.09\",",
        "        \"W06.1\",",
        "        \"W06.14\",",
        "        \"W06.18\",",
        "        \"W06.2\",",
        "        \"W06.20\",",
        "        \"W06.3\",",
        "        \"W06.5\",",
        "        \"W06.6\",",
        "        \"W06.60\",",
        "        \"W06.8\",",
        "        \"W06.9\",",
        "        \"W07\",",
        "        \"W07.0\",",
        "        \"W07.08\",",
        "        \"W07.1\",",
        "        \"W07.14\",",
        "        \"W07.2\",",
        "        \"W07.3\",",
        "        \"W07.4\",",
        "        \"W07.5\",",
        "        \"W07.6\",",
        "        \"W07.7\",",
        "        \"W07.8\",",
        "        \"W07.9\",",
        "        \"W08\",",
        "        \"W08.0\",",
        "        \"W08.04\",",
        "        \"W08.08\",",
        "        \"W08.1\",",
        "        \"W08.2\",",
        "        \"W08.29\",",
        "        \"W08.8\",",
        "        \"W08.9\",",
        "        \"W18\",",
        "        \"W18.0\",",
        "        \"W18.03\",",
        "        \"W18.08\",",
        "        \"W18.1\",",
        "        \"W18.12\",",
        "        \"W18.2\",",
        "        \"W18.4\",",
        "        \"W18.6\",",
        "        \"W18.62\",",
        "        \"W18.8\",",
        "        \"W18.88\",",
        "        \"W18.9\",",
        "        \"W18.92\",",
        "        \"W19\",",
        "        \"W19.0\",",
        "        \"W19.01\",",
        "        \"W19.03\",",
        "        \"W19.04\",",
        "        \"W19.08\",",
        "        \"W19.09\",",
        "        \"W19.18\",",
        "        \"W19.19\",",
        "        \"W19.3\",",
        "        \"W19.43\",",
        "        \"W19.48\",",
        "        \"W19.59\",",
        "        \"W19.62\",",
        "        \"W19.72\",",
        "        \"W19.82\",",
        "        \"W19.89\",",
        "        \"W19.99\"",
        "    },",
        "    motor_vehical_list = {",
        "        \"V40.00\",",
        "        \"V40.08\",",
        "        \"V40.10\",",
        "        \"V40.19\",",
        "        \"V40.20\",",
        "        \"V40.29\",",
        "        \"V40.30\",",
        "        \"V40.32\",",
        "        \"V40.40\",",
        "        \"V40.5\",",
        "        \"V40.51\",",
        "        \"V40.58\",",
        "        \"V40.59\",",
        "        \"V40.61\",",
        "        \"V40.68\",",
        "        \"V40.69\",",
        "        \"V40.78\",",
        "        \"V40.79\",",
        "        \"V41.51\",",
        "        \"V41.59\",",
        "        \"V42.51\",",
        "        \"V42.59\",",
        "        \"V42.60\",",
        "        \"V42.61\",",
        "        \"V42.69\",",
        "        \"V43\",",
        "        \"V43.00\",",
        "        \"V43.01\",",
        "        \"V43.03\",",
        "        \"V43.08\",",
        "        \"V43.09\",",
        "        \"V43.10\",",
        "        \"V43.18\",",
        "        \"V43.19\",",
        "        \"V43.20\",",
        "        \"V43.21\",",
        "        \"V43.28\",",
        "        \"V43.29\",",
        "        \"V43.39\",",
        "        \"V43.40\",",
        "        \"V43.41\",",
        "        \"V43.42\",",
        "        \"V43.43\",",
        "        \"V43.48\",",
        "        \"V43.49\",",
        "        \"V43.5\",",
        "        \"V43.50\",",
        "        \"V43.51\",",
        "        \"V43.52\",",
        "        \"V43.53\",",
        "        \"V43.58\",",
        "        \"V43.59\",",
        "        \"V43.6\",",
        "        \"V43.60\",",
        "        \"V43.61\",",
        "        \"V43.62\",",
        "        \"V43.63\",",
        "        \"V43.68\",",
        "        \"V43.69\",",
        "        \"V43.70\",",
        "        \"V43.71\",",
        "        \"V43.78\",",
        "        \"V43.79\",",
        "        \"V43.9\",",
        "        \"V43.90\",",
        "        \"V43.92\",",
        "        \"V43.98\",",
        "        \"V43.99\",",
        "        \"V44\",",
        "        \"V44.00\",",
        "        \"V44.03\",",
        "        \"V44.08\",",
        "        \"V44.09\",",
        "        \"V44.20\",",
        "        \"V44.48\",",
        "        \"V44.5\",",
        "        \"V44.50\",",
        "        \"V44.51\",",
        "        \"V44.52\",",
        "        \"V44.53\",",
        "        \"V44.58\",",
        "        \"V44.59\",",
        "        \"V44.6\",",
        "        \"V44.60\",",
        "        \"V44.61\",",
        "        \"V44.63\",",
        "        \"V44.68\",",
        "        \"V44.69\",",
        "        \"V44.99\",",
        "        \"V45.00\",",
        "        \"V45.50\",",
        "        \"V45.51\",",
        "        \"V45.58\",",
        "        \"V45.59\",",
        "        \"V45.60\",",
        "        \"V45.61\",",
        "        \"V45.69\",",
        "        \"V46.09\",",
        "        \"V46.50\",",
        "        \"V46.51\",",
        "        \"V46.52\",",
        "        \"V46.59\",",
        "        \"V46.60\",",
        "        \"V46.61\",",
        "        \"V46.69\",",
        "        \"V46.71\",",
        "        \"V46.78\",",
        "        \"V46.99\",",
        "        \"V47\",",
        "        \"V47.0\",",
        "        \"V47.00\",",
        "        \"V47.01\",",
        "        \"V47.02\",",
        "        \"V47.08\",",
        "        \"V47.09\",",
        "        \"V47.1\",",
        "        \"V47.10\",",
        "        \"V47.11\",",
        "        \"V47.18\",",
        "        \"V47.19\",",
        "        \"V47.2\",",
        "        \"V47.20\",",
        "        \"V47.29\",",
        "        \"V47.39\",",
        "        \"V47.40\",",
        "        \"V47.41\",",
        "        \"V47.43\",",
        "        \"V47.48\",",
        "        \"V47.5\",",
        "        \"V47.50\",",
        "        \"V47.51\",",
        "        \"V47.52\",",
        "        \"V47.53\",",
        "        \"V47.58\",",
        "        \"V47.59\",",
        "        \"V47.6\",",
        "        \"V47.60\",",
        "        \"V47.61\",",
        "        \"V47.62\",",
        "        \"V47.63\",",
        "        \"V47.68\",",
        "        \"V47.69\",",
        "        \"V47.70\",",
        "        \"V47.78\",",
        "        \"V47.79\",",
        "        \"V47.9\",",
        "        \"V47.90\",",
        "        \"V47.92\",",
        "        \"V47.99\",",
        "        \"V48\",",
        "        \"V48.00\",",
        "        \"V48.01\",",
        "        \"V48.02\",",
        "        \"V48.08\",",
        "        \"V48.09\",",
        "        \"V48.1\",",
        "        \"V48.10\",",
        "        \"V48.11\",",
        "        \"V48.18\",",
        "        \"V48.19\",",
        "        \"V48.2\",",
        "        \"V48.21\",",
        "        \"V48.28\",",
        "        \"V48.29\",",
        "        \"V48.30\",",
        "        \"V48.32\",",
        "        \"V48.38\",",
        "        \"V48.39\",",
        "        \"V48.4\",",
        "        \"V48.40\",",
        "        \"V48.41\",",
        "        \"V48.43\",",
        "        \"V48.48\",",
        "        \"V48.49\",",
        "        \"V48.5\",",
        "        \"V48.50\",",
        "        \"V48.51\",",
        "        \"V48.52\",",
        "        \"V48.53\",",
        "        \"V48.54\",",
        "        \"V48.58\",",
        "        \"V48.59\",",
        "        \"V48.6\",",
        "        \"V48.60\",",
        "        \"V48.61\",",
        "        \"V48.62\",",
        "        \"V48.63\",",
        "        \"V48.68\",",
        "        \"V48.69\",",
        "        \"V48.7\",",
        "        \"V48.70\",",
        "        \"V48.71\",",
        "        \"V48.78\",",
        "        \"V48.79\",",
        "        \"V48.9\",",
        "        \"V48.90\",",
        "        \"V48.91\",",
        "        \"V48.99\",",
        "        \"V49\",",
        "        \"V49.0\",",
        "        \"V49.1\",",
        "        \"V49.18\",",
        "        \"V49.2\",",
        "        \"V49.3\",",
        "        \"V49.4\",",
        "        \"V49.40\",",
        "        \"V49.5\",",
        "        \"V49.59\",",
        "        \"V49.6\",",
        "        \"V49.69\",",
        "        \"V49.8\",",
        "        \"V49.81\",",
        "        \"V49.9\",",
        "        \"V50.6\",",
        "        \"V53.0\",",
        "        \"V53.2\",",
        "        \"V53.4\",",
        "        \"V53.5\",",
        "        \"V53.6\",",
        "        \"V53.7\",",
        "        \"V53.9\",",
        "        \"V54.0\",",
        "        \"V54.4\",",
        "        \"V54.5\",",
        "        \"V54.6\",",
        "        \"V55.5\",",
        "        \"V56.0\",",
        "        \"V57.0\",",
        "        \"V57.1\",",
        "        \"V57.2\",",
        "        \"V57.4\",",
        "        \"V57.5\",",
        "        \"V57.6\",",
        "        \"V57.7\",",
        "        \"V57.9\",",
        "        \"V58.0\",",
        "        \"V58.1\",",
        "        \"V58.2\",",
        "        \"V58.4\",",
        "        \"V58.48\",",
        "        \"V58.5\",",
        "        \"V58.6\",",
        "        \"V58.7\",",
        "        \"V58.9\",",
        "        \"V59.0\",",
        "        \"V59.1\",",
        "        \"V59.4\",",
        "        \"V59.6\",",
        "        \"V59.8\",",
        "        \"V59.9\",",
        "        \"V60.0\",",
        "        \"V60.2\",",
        "        \"V63.0\",",
        "        \"V63.4\",",
        "        \"V63.5\",",
        "        \"V63.51\",",
        "        \"V63.6\",",
        "        \"V63.7\",",
        "        \"V63.9\",",
        "        \"V64.4\",",
        "        \"V64.5\",",
        "        \"V64.6\",",
        "        \"V64.7\",",
        "        \"V64.9\",",
        "        \"V65.3\",",
        "        \"V66.3\",",
        "        \"V66.5\",",
        "        \"V66.9\",",
        "        \"V67.0\",",
        "        \"V67.2\",",
        "        \"V67.5\",",
        "        \"V67.6\",",
        "        \"V67.9\",",
        "        \"V68\",",
        "        \"V68.0\",",
        "        \"V68.1\",",
        "        \"V68.2\",",
        "        \"V68.4\",",
        "        \"V68.42\",",
        "        \"V68.5\",",
        "        \"V68.51\",",
        "        \"V68.6\",",
        "        \"V68.61\",",
        "        \"V68.7\",",
        "        \"V68.9\",",
        "        \"V69.0\",",
        "        \"V69.1\",",
        "        \"V69.3\",",
        "        \"V69.32\",",
        "        \"V69.4\",",
        "        \"V69.8\",",
        "        \"V69.9\",",
        "        \"V70.6\",",
        "        \"V73.4\",",
        "        \"V73.5\",",
        "        \"V73.6\",",
        "        \"V74.5\",",
        "        \"V74.6\",",
        "        \"V77.5\",",
        "        \"V77.6\",",
        "        \"V78.0\",",
        "        \"V78.1\",",
        "        \"V78.4\",",
        "        \"V78.5\",",
        "        \"V78.6\",",
        "        \"V78.7\",",
        "        \"V79.1\",",
        "        \"V79.3\",",
        "        \"V79.5\",",
        "        \"V79.8\",",
        "        \"V79.9\"",
        "    },",
        "    motorcycle_list = {",
        "        \"V20.00\",",
        "        \"V20.01\",",
        "        \"V20.02\",",
        "        \"V20.08\",",
        "        \"V20.09\",",
        "        \"V20.22\",",
        "        \"V20.31\",",
        "        \"V20.4\",",
        "        \"V20.40\",",
        "        \"V20.41\",",
        "        \"V20.42\",",
        "        \"V20.48\",",
        "        \"V20.49\",",
        "        \"V20.51\",",
        "        \"V20.52\",",
        "        \"V20.59\",",
        "        \"V20.92\",",
        "        \"V20.99\",",
        "        \"V21.40\",",
        "        \"V21.49\",",
        "        \"V21.91\",",
        "        \"V22.0\",",
        "        \"V22.00\",",
        "        \"V22.01\",",
        "        \"V22.02\",",
        "        \"V22.08\",",
        "        \"V22.09\",",
        "        \"V22.11\",",
        "        \"V22.18\",",
        "        \"V22.19\",",
        "        \"V22.22\",",
        "        \"V22.4\",",
        "        \"V22.40\",",
        "        \"V22.41\",",
        "        \"V22.42\",",
        "        \"V22.43\",",
        "        \"V22.48\",",
        "        \"V22.49\",",
        "        \"V22.51\",",
        "        \"V22.58\",",
        "        \"V22.59\",",
        "        \"V22.91\",",
        "        \"V22.92\",",
        "        \"V22.99\",",
        "        \"V23\",",
        "        \"V23.0\",",
        "        \"V23.00\",",
        "        \"V23.01\",",
        "        \"V23.02\",",
        "        \"V23.08\",",
        "        \"V23.09\",",
        "        \"V23.11\",",
        "        \"V23.12\",",
        "        \"V23.20\",",
        "        \"V23.21\",",
        "        \"V23.4\",",
        "        \"V23.40\",",
        "        \"V23.41\",",
        "        \"V23.42\",",
        "        \"V23.48\",",
        "        \"V23.49\",",
        "        \"V23.5\",",
        "        \"V23.50\",",
        "        \"V23.51\",",
        "        \"V23.52\",",
        "        \"V23.58\",",
        "        \"V23.59\",",
        "        \"V23.90\",",
        "        \"V23.91\",",
        "        \"V23.92\",",
        "        \"V23.98\",",
        "        \"V23.99\",",
        "        \"V24.00\",",
        "        \"V24.02\",",
        "        \"V24.08\",",
        "        \"V24.11\",",
        "        \"V24.29\",",
        "        \"V24.4\",",
        "        \"V24.40\",",
        "        \"V24.41\",",
        "        \"V24.48\",",
        "        \"V24.49\",",
        "        \"V24.51\",",
        "        \"V24.90\",",
        "        \"V24.99\",",
        "        \"V25.40\",",
        "        \"V25.41\",",
        "        \"V25.48\",",
        "        \"V26.00\",",
        "        \"V26.01\",",
        "        \"V26.02\",",
        "        \"V26.08\",",
        "        \"V26.09\",",
        "        \"V26.19\",",
        "        \"V26.29\",",
        "        \"V26.39\",",
        "        \"V26.41\",",
        "        \"V26.49\",",
        "        \"V26.59\",",
        "        \"V26.90\",",
        "        \"V26.99\",",
        "        \"V27\",",
        "        \"V27.0\",",
        "        \"V27.00\",",
        "        \"V27.01\",",
        "        \"V27.02\",",
        "        \"V27.08\",",
        "        \"V27.09\",",
        "        \"V27.1\",",
        "        \"V27.12\",",
        "        \"V27.18\",",
        "        \"V27.19\",",
        "        \"V27.20\",",
        "        \"V27.22\",",
        "        \"V27.29\",",
        "        \"V27.30\",",
        "        \"V27.39\",",
        "        \"V27.4\",",
        "        \"V27.40\",",
        "        \"V27.41\",",
        "        \"V27.42\",",
        "        \"V27.44\",",
        "        \"V27.48\",",
        "        \"V27.49\",",
        "        \"V27.5\",",
        "        \"V27.50\",",
        "        \"V27.51\",",
        "        \"V27.58\",",
        "        \"V27.59\",",
        "        \"V27.90\",",
        "        \"V27.91\",",
        "        \"V27.92\",",
        "        \"V27.98\",",
        "        \"V27.99\",",
        "        \"V28\",",
        "        \"V28.0\",",
        "        \"V28.00\",",
        "        \"V28.01\",",
        "        \"V28.02\",",
        "        \"V28.08\",",
        "        \"V28.09\",",
        "        \"V28.10\",",
        "        \"V28.11\",",
        "        \"V28.12\",",
        "        \"V28.18\",",
        "        \"V28.21\",",
        "        \"V28.22\",",
        "        \"V28.29\",",
        "        \"V28.30\",",
        "        \"V28.32\",",
        "        \"V28.4\",",
        "        \"V28.40\",",
        "        \"V28.41\",",
        "        \"V28.42\",",
        "        \"V28.48\",",
        "        \"V28.49\",",
        "        \"V28.5\",",
        "        \"V28.50\",",
        "        \"V28.51\",",
        "        \"V28.52\",",
        "        \"V28.58\",",
        "        \"V28.59\",",
        "        \"V28.90\",",
        "        \"V28.91\",",
        "        \"V28.92\",",
        "        \"V28.98\",",
        "        \"V28.99\",",
        "        \"V29\",",
        "        \"V29.0\",",
        "        \"V29.00\",",
        "        \"V29.01\",",
        "        \"V29.08\",",
        "        \"V29.1\",",
        "        \"V29.2\",",
        "        \"V29.3\",",
        "        \"V29.30\",",
        "        \"V29.38\",",
        "        \"V29.4\",",
        "        \"V29.49\",",
        "        \"V29.5\",",
        "        \"V29.6\",",
        "        \"V29.8\",",
        "        \"V29.81\",",
        "        \"V29.9\",",
        "        \"V29.90\",",
        "        \"V30.11\",",
        "        \"V30.5\",",
        "        \"V31.0\",",
        "        \"V32.1\",",
        "        \"V32.5\",",
        "        \"V32.6\",",
        "        \"V32.9\",",
        "        \"V33.0\",",
        "        \"V33.1\",",
        "        \"V33.5\",",
        "        \"V33.6\",",
        "        \"V33.7\",",
        "        \"V33.9\",",
        "        \"V37.0\",",
        "        \"V37.1\",",
        "        \"V37.2\",",
        "        \"V37.3\",",
        "        \"V37.41\",",
        "        \"V37.6\",",
        "        \"V37.7\",",
        "        \"V37.9\",",
        "        \"V38.0\",",
        "        \"V38.4\",",
        "        \"V38.41\",",
        "        \"V38.5\",",
        "        \"V38.6\",",
        "        \"V38.71\",",
        "        \"V38.9\",",
        "        \"V39.0\",",
        "        \"V39.3\",",
        "        \"V39.4\",",
        "        \"V39.8\",",
        "        \"V39.9\",",
        "        \"V86\",",
        "        \"V86.00\",",
        "        \"V86.01\",",
        "        \"V86.02\",",
        "        \"V86.08\",",
        "        \"V86.09\",",
        "        \"V86.12\",",
        "        \"V86.14\",",
        "        \"V86.18\",",
        "        \"V86.2\",",
        "        \"V86.39\",",
        "        \"V86.40\",",
        "        \"V86.41\",",
        "        \"V86.42\",",
        "        \"V86.5\",",
        "        \"V86.50\",",
        "        \"V86.51\",",
        "        \"V86.52\",",
        "        \"V86.53\",",
        "        \"V86.58\",",
        "        \"V86.59\",",
        "        \"V86.62\",",
        "        \"V86.69\",",
        "        \"V86.7\",",
        "        \"V86.70\",",
        "        \"V86.71\",",
        "        \"V86.72\",",
        "        \"V86.91\",",
        "        \"V86.92\",",
        "        \"V86.99\"",
        "    },",
        "    pedal_cyclist_list = {",
        "        \"V10\",",
        "        \"V10.0\",",
        "        \"V10.1\",",
        "        \"V10.2\",",
        "        \"V10.4\",",
        "        \"V10.41\",",
        "        \"V10.5\",",
        "        \"V10.9\",",
        "        \"V11\",",
        "        \"V11.0\",",
        "        \"V11.2\",",
        "        \"V11.4\",",
        "        \"V11.41\",",
        "        \"V11.9\",",
        "        \"V12.0\",",
        "        \"V12.4\",",
        "        \"V12.41\",",
        "        \"V12.5\",",
        "        \"V12.9\",",
        "        \"V13\",",
        "        \"V13.0\",",
        "        \"V13.1\",",
        "        \"V13.2\",",
        "        \"V13.28\",",
        "        \"V13.3\",",
        "        \"V13.4\",",
        "        \"V13.40\",",
        "        \"V13.41\",",
        "        \"V13.48\",",
        "        \"V13.5\",",
        "        \"V13.9\",",
        "        \"V14.0\",",
        "        \"V14.4\",",
        "        \"V14.41\",",
        "        \"V14.48\",",
        "        \"V14.5\",",
        "        \"V14.9\",",
        "        \"V15.4\",",
        "        \"V16.0\",",
        "        \"V16.1\",",
        "        \"V16.2\",",
        "        \"V16.4\",",
        "        \"V16.5\",",
        "        \"V16.9\",",
        "        \"V17\",",
        "        \"V17.0\",",
        "        \"V17.01\",",
        "        \"V17.1\",",
        "        \"V17.2\",",
        "        \"V17.3\",",
        "        \"V17.4\",",
        "        \"V17.41\",",
        "        \"V17.48\",",
        "        \"V17.5\",",
        "        \"V17.9\",",
        "        \"V18\",",
        "        \"V18.0\",",
        "        \"V18.00\",",
        "        \"V18.01\",",
        "        \"V18.08\",",
        "        \"V18.1\",",
        "        \"V18.2\",",
        "        \"V18.3\",",
        "        \"V18.4\",",
        "        \"V18.41\",",
        "        \"V18.48\",",
        "        \"V18.49\",",
        "        \"V18.5\",",
        "        \"V18.9\",",
        "        \"V18.94\",",
        "        \"V19\",",
        "        \"V19.0\",",
        "        \"V19.03\",",
        "        \"V19.2\",",
        "        \"V19.3\",",
        "        \"V19.30\",",
        "        \"V19.38\",",
        "        \"V19.4\",",
        "        \"V19.6\",",
        "        \"V19.60\",",
        "        \"V19.62\",",
        "        \"V19.8\",",
        "        \"V19.80\",",
        "        \"V19.9\"",
        "    },",
        "    pedestrian_list = {",
        "        \"V00.00\",",
        "        \"V00.01\",",
        "        \"V00.02\",",
        "        \"V00.04\",",
        "        \"V00.05\",",
        "        \"V00.11\",",
        "        \"V00.12\",",
        "        \"V00.13\",",
        "        \"V00.14\",",
        "        \"V00.15\",",
        "        \"V00.18\",",
        "        \"V00.90\",",
        "        \"V00.92\",",
        "        \"V00.99\",",
        "        \"V01\",",
        "        \"V01.0\",",
        "        \"V01.00\",",
        "        \"V01.01\",",
        "        \"V01.03\",",
        "        \"V01.08\",",
        "        \"V01.1\",",
        "        \"V01.9\",",
        "        \"V02\",",
        "        \"V02.0\",",
        "        \"V02.00\",",
        "        \"V02.1\",",
        "        \"V02.10\",",
        "        \"V02.9\",",
        "        \"V03\",",
        "        \"V03.0\",",
        "        \"V03.00\",",
        "        \"V03.01\",",
        "        \"V03.08\",",
        "        \"V03.09\",",
        "        \"V03.1\",",
        "        \"V03.10\",",
        "        \"V03.11\",",
        "        \"V03.18\",",
        "        \"V03.19\",",
        "        \"V03.9\",",
        "        \"V03.90\",",
        "        \"V03.99\",",
        "        \"V04\",",
        "        \"V04.0\",",
        "        \"V04.1\",",
        "        \"V04.10\",",
        "        \"V04.11\",",
        "        \"V04.14\",",
        "        \"V04.18\",",
        "        \"V04.9\",",
        "        \"V05.0\",",
        "        \"V05.08\",",
        "        \"V05.1\",",
        "        \"V05.18\",",
        "        \"V05.9\",",
        "        \"V06.0\",",
        "        \"V06.1\",",
        "        \"V06.9\",",
        "        \"V09.0\",",
        "        \"V09.09\",",
        "        \"V09.1\",",
        "        \"V09.2\",",
        "        \"V09.3\",",
        "        \"V09.9\",",
        "        \"V09.99\"",
        "    },",
        "    #\"Added Conditional Column\" =",
        "        Table.AddColumn(",
        "            Source,",
        "            \"Cause\",",
        "            each",
        "                if",
        "                    List.Contains(",
        "                        assault_list,",
        "                        [cause_icd_code_id]",
        "                    )",
        "                then",
        "                    \"Assault\"",
        "                else if",
        "                    List.Contains(",
        "                        high_fall_list,",
        "                        [cause_icd_code_id]",
        "                    )",
        "                then",
        "                    \"High fall >1m\"",
        "                else if",
        "                    List.Contains(",
        "                        low_fall_list,",
        "                        [cause_icd_code_id]",
        "                    )",
        "                then",
        "                    \"Low Fall\"",
        "                else if",
        "                    List.Contains(",
        "                        motor_vehical_list,",
        "                        [cause_icd_code_id]",
        "                    )",
        "                then",
        "                    \"Motor Vehicle Driver/Passenger\"",
        "                else if",
        "                    List.Contains(",
        "                        motorcycle_list,",
        "                        [cause_icd_code_id]",
        "                    )",
        "                then",
        "                    \"Motorcycle rider/pillion\"",
        "                else if",
        "                    List.Contains(",
        "                        pedal_cyclist_list,",
        "                        [cause_icd_code_id]",
        "                    )",
        "                then",
        "                    \"Pedal cyclist\"",
        "                else if",
        "                    List.Contains(",
        "                        pedestrian_list,",
        "                        [cause_icd_code_id]",
        "                    )",
        "                then",
        "                    \"Pedestrian\"",
        "                else",
        "                    \"Other\",",
        "            type text",
        "        ),",
        "    look_up_cause = [#\"Motor Vehicle Driver/Passenger\"=1, #\"Motorcycle rider/pillion\"=2, #\"Pedal cyclist\"=3,#\"Pedestrian\"=4,Assault=5,#\"High fall >1m\"=6, Low Fall=7, Other = 8],",
        "    look_up_transport = [#\"Motor Vehicle Driver/Passenger\"=\"Transport\", #\"Motorcycle rider/pillion\"=\"Transport\", #\"Pedal cyclist\"=\"Transport\",#\"Pedestrian\"=\"Transport\",Assault=\"Non Transport\",#\"High fall >1m\"=\"Non Transport\", Low Fall=\"Non Transport\", Other = \"Non Transport\"],",
        "    #\"Added Custom\" = Table.AddColumn(#\"Added Conditional Column\", \"cause_order\", each Record.Field(look_up_cause,[Cause]), Int64.Type),",
        "    #\"Added Custom1\" = Table.AddColumn(#\"Added Custom\", \"Transport\", each Record.Field(look_up_transport, [Cause]), type text),",
        "    #\"Duplicated Column1\" = Table.DuplicateColumn(#\"Added Custom1\", \"Transport\", \"Transport - order\"),",
        "    #\"Replaced Value1\" = Table.ReplaceValue(#\"Duplicated Column1\",\"Non Transport\",\"2\",Replacer.ReplaceText,{\"Transport - order\"}),",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Replaced Value1\",\"Transport\",\"1\",Replacer.ReplaceText,{\"Transport - order\"})",
        "in",
        "    #\"Replaced Value\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = injury_cause,\\n    \\n    assault_list = {\\n        \\\"X86.07\\\",\\n        \\\"X89.08\\\",\\n        \\\"X91\\\",\\n        \\\"X91.00\\\",\\n        \\\"X91.01\\\",\\n        \\\"X91.03\\\",\\n        \\\"X91.04\\\",\\n        \\\"X91.08\\\",\\n        \\\"X91.09\\\",\\n        \\\"X91.1\\\",\\n        \\\"X92.01\\\",\\n        \\\"X93\\\",\\n        \\\"X93.00\\\",\\n        \\\"X93.05\\\",\\n        \\\"X93.08\\\",\\n        \\\"X93.09\\\",\\n        \\\"X95\\\",\\n        \\\"X95.08\\\",\\n        \\\"X95.09\\\",\\n        \\\"X95.14\\\",\\n        \\\"X95.17\\\",\\n        \\\"X95.19\\\",\\n        \\\"X95.2\\\",\\n        \\\"X95.20\\\",\\n        \\\"X95.22\\\",\\n        \\\"X95.24\\\",\\n        \\\"X95.26\\\",\\n        \\\"X95.27\\\",\\n        \\\"X95.28\\\",\\n        \\\"X95.29\\\",\\n        \\\"X95.37\\\",\\n        \\\"X95.39\\\",\\n        \\\"X95.42\\\",\\n        \\\"X95.48\\\",\\n        \\\"X95.81\\\",\\n        \\\"X95.89\\\",\\n        \\\"X95.9\\\",\\n        \\\"X95.91\\\",\\n        \\\"X95.92\\\",\\n        \\\"X95.94\\\",\\n        \\\"X95.95\\\",\\n        \\\"X95.96\\\",\\n        \\\"X95.97\\\",\\n        \\\"X95.98\\\",\\n        \\\"X95.99\\\",\\n        \\\"X97.00\\\",\\n        \\\"X97.01\\\",\\n        \\\"X97.04\\\",\\n        \\\"X97.08\\\",\\n        \\\"X97.09\\\",\\n        \\\"X98.09\\\",\\n        \\\"X99\\\",\\n        \\\"X99.0\\\",\\n        \\\"X99.00\\\",\\n        \\\"X99.01\\\",\\n        \\\"X99.02\\\",\\n        \\\"X99.04\\\",\\n        \\\"X99.06\\\",\\n        \\\"X99.07\\\",\\n        \\\"X99.08\\\",\\n        \\\"X99.09\\\",\\n        \\\"X99.1\\\",\\n        \\\"X99.16\\\",\\n        \\\"X99.28\\\",\\n        \\\"X99.30\\\",\\n        \\\"X99.32\\\",\\n        \\\"X99.34\\\",\\n        \\\"X99.36\\\",\\n        \\\"X99.37\\\",\\n        \\\"X99.39\\\",\\n        \\\"X99.4\\\",\\n        \\\"X99.48\\\",\\n        \\\"X99.49\\\",\\n        \\\"X99.58\\\",\\n        \\\"X99.8\\\",\\n        \\\"X99.80\\\",\\n        \\\"X99.81\\\",\\n        \\\"X99.82\\\",\\n        \\\"X99.84\\\",\\n        \\\"X99.86\\\",\\n        \\\"X99.87\\\",\\n        \\\"X99.88\\\",\\n        \\\"X99.89\\\",\\n        \\\"X99.9\\\",\\n        \\\"X99.90\\\",\\n        \\\"X99.92\\\",\\n        \\\"X99.94\\\",\\n        \\\"X99.96\\\",\\n        \\\"X99.97\\\",\\n        \\\"X99.98\\\",\\n        \\\"X99.99\\\",\\n        \\\"Y00\\\",\\n        \\\"Y00.00\\\",\\n        \\\"Y00.01\\\",\\n        \\\"Y00.02\\\",\\n        \\\"Y00.03\\\",\\n        \\\"Y00.04\\\",\\n        \\\"Y00.05\\\",\\n        \\\"Y00.06\\\",\\n        \\\"Y00.07\\\",\\n        \\\"Y00.08\\\",\\n        \\\"Y00.09\\\",\\n        \\\"Y00.18\\\",\\n        \\\"Y00.41\\\",\\n        \\\"Y00.48\\\",\\n        \\\"Y00.49\\\",\\n        \\\"Y00.51\\\",\\n        \\\"Y00.59\\\",\\n        \\\"Y00.88\\\",\\n        \\\"Y00.89\\\",\\n        \\\"Y01\\\",\\n        \\\"Y01.00\\\",\\n        \\\"Y01.02\\\",\\n        \\\"Y01.04\\\",\\n        \\\"Y01.06\\\",\\n        \\\"Y01.07\\\",\\n        \\\"Y01.08\\\",\\n        \\\"Y01.09\\\",\\n        \\\"Y02.34\\\",\\n        \\\"Y02.36\\\",\\n        \\\"Y02.39\\\",\\n        \\\"Y02.90\\\",\\n        \\\"Y03.00\\\",\\n        \\\"Y03.09\\\",\\n        \\\"Y03.20\\\",\\n        \\\"Y03.28\\\",\\n        \\\"Y03.29\\\",\\n        \\\"Y03.37\\\",\\n        \\\"Y03.48\\\",\\n        \\\"Y03.49\\\",\\n        \\\"Y03.59\\\",\\n        \\\"Y03.80\\\",\\n        \\\"Y03.82\\\",\\n        \\\"Y03.86\\\",\\n        \\\"Y03.88\\\",\\n        \\\"Y03.89\\\",\\n        \\\"Y04\\\",\\n        \\\"Y04.00\\\",\\n        \\\"Y04.01\\\",\\n        \\\"Y04.02\\\",\\n        \\\"Y04.03\\\",\\n        \\\"Y04.04\\\",\\n        \\\"Y04.05\\\",\\n        \\\"Y04.06\\\",\\n        \\\"Y04.07\\\",\\n        \\\"Y04.08\\\",\\n        \\\"Y04.09\\\",\\n        \\\"Y04.18\\\",\\n        \\\"Y04.19\\\",\\n        \\\"Y04.29\\\",\\n        \\\"Y04.41\\\",\\n        \\\"Y04.48\\\",\\n        \\\"Y04.49\\\",\\n        \\\"Y04.58\\\",\\n        \\\"Y04.59\\\",\\n        \\\"Y04.8\\\",\\n        \\\"Y04.80\\\",\\n        \\\"Y04.88\\\",\\n        \\\"Y04.89\\\",\\n        \\\"Y05.04\\\",\\n        \\\"Y05.06\\\",\\n        \\\"Y05.08\\\",\\n        \\\"Y06.01\\\",\\n        \\\"Y07\\\",\\n        \\\"Y07.0\\\",\\n        \\\"Y07.01\\\",\\n        \\\"Y07.04\\\",\\n        \\\"Y07.08\\\",\\n        \\\"Y07.09\\\",\\n        \\\"Y07.8\\\",\\n        \\\"Y08\\\",\\n        \\\"Y08.00\\\",\\n        \\\"Y08.01\\\",\\n        \\\"Y08.03\\\",\\n        \\\"Y08.04\\\",\\n        \\\"Y08.06\\\",\\n        \\\"Y08.07\\\",\\n        \\\"Y08.08\\\",\\n        \\\"Y08.09\\\",\\n        \\\"Y08.48\\\",\\n        \\\"Y09\\\",\\n        \\\"Y09.00\\\",\\n        \\\"Y09.01\\\",\\n        \\\"Y09.02\\\",\\n        \\\"Y09.04\\\",\\n        \\\"Y09.05\\\",\\n        \\\"Y09.06\\\",\\n        \\\"Y09.07\\\",\\n        \\\"Y09.08\\\",\\n        \\\"Y09.09\\\",\\n        \\\"Y09.9\\\",\\n        \\\"Y09.99\\\"\\n    },\\n    high_fall_list = {\\n        \\\"W09\\\",\\n        \\\"W09.0\\\",\\n        \\\"W09.08\\\",\\n        \\\"W09.1\\\",\\n        \\\"W09.2\\\",\\n        \\\"W09.3\\\",\\n        \\\"W09.4\\\",\\n        \\\"W09.40\\\",\\n        \\\"W09.5\\\",\\n        \\\"W09.6\\\",\\n        \\\"W09.60\\\",\\n        \\\"W09.8\\\",\\n        \\\"W09.9\\\",\\n        \\\"W10\\\",\\n        \\\"W10.0\\\",\\n        \\\"W10.01\\\",\\n        \\\"W10.03\\\",\\n        \\\"W10.08\\\",\\n        \\\"W10.09\\\",\\n        \\\"W10.1\\\",\\n        \\\"W10.2\\\",\\n        \\\"W10.21\\\",\\n        \\\"W10.48\\\",\\n        \\\"W10.5\\\",\\n        \\\"W10.58\\\",\\n        \\\"W10.59\\\",\\n        \\\"W10.62\\\",\\n        \\\"W10.8\\\",\\n        \\\"W10.88\\\",\\n        \\\"W10.9\\\",\\n        \\\"W11\\\",\\n        \\\"W11.03\\\",\\n        \\\"W11.04\\\",\\n        \\\"W11.08\\\",\\n        \\\"W11.09\\\",\\n        \\\"W11.13\\\",\\n        \\\"W11.52\\\",\\n        \\\"W11.53\\\",\\n        \\\"W11.59\\\",\\n        \\\"W11.62\\\",\\n        \\\"W11.72\\\",\\n        \\\"W11.74\\\",\\n        \\\"W12\\\",\\n        \\\"W12.08\\\",\\n        \\\"W12.52\\\",\\n        \\\"W13\\\",\\n        \\\"W13.0\\\",\\n        \\\"W13.03\\\",\\n        \\\"W13.08\\\",\\n        \\\"W13.1\\\",\\n        \\\"W13.2\\\",\\n        \\\"W13.3\\\",\\n        \\\"W13.30\\\",\\n        \\\"W13.4\\\",\\n        \\\"W13.5\\\",\\n        \\\"W13.58\\\",\\n        \\\"W13.62\\\",\\n        \\\"W13.7\\\",\\n        \\\"W13.73\\\",\\n        \\\"W13.8\\\",\\n        \\\"W13.80\\\",\\n        \\\"W13.88\\\",\\n        \\\"W13.9\\\",\\n        \\\"W14\\\",\\n        \\\"W14.01\\\",\\n        \\\"W14.03\\\",\\n        \\\"W14.08\\\",\\n        \\\"W14.82\\\",\\n        \\\"W14.88\\\",\\n        \\\"W14.89\\\",\\n        \\\"W15\\\",\\n        \\\"W15.30\\\",\\n        \\\"W15.81\\\",\\n        \\\"W15.88\\\",\\n        \\\"W16\\\",\\n        \\\"W16.0\\\",\\n        \\\"W16.08\\\",\\n        \\\"W16.1\\\",\\n        \\\"W16.2\\\",\\n        \\\"W16.6\\\",\\n        \\\"W16.8\\\",\\n        \\\"W16.83\\\",\\n        \\\"W16.88\\\",\\n        \\\"W16.9\\\",\\n        \\\"W17\\\",\\n        \\\"W17.0\\\",\\n        \\\"W17.02\\\",\\n        \\\"W17.03\\\",\\n        \\\"W17.08\\\",\\n        \\\"W17.1\\\",\\n        \\\"W17.2\\\",\\n        \\\"W17.3\\\",\\n        \\\"W17.4\\\",\\n        \\\"W17.48\\\",\\n        \\\"W17.5\\\",\\n        \\\"W17.52\\\",\\n        \\\"W17.58\\\",\\n        \\\"W17.6\\\",\\n        \\\"W17.68\\\",\\n        \\\"W17.7\\\",\\n        \\\"W17.8\\\",\\n        \\\"W17.80\\\",\\n        \\\"W17.81\\\",\\n        \\\"W17.89\\\",\\n        \\\"W17.9\\\",\\n        \\\"X80\\\",\\n        \\\"X80.08\\\",\\n        \\\"X80.58\\\",\\n        \\\"X80.88\\\",\\n        \\\"X80.89\\\",\\n        \\\"Y30\\\"\\n    },\\n    low_fall_list = {\\n        \\\"W00\\\",\\n        \\\"W00.08\\\",\\n        \\\"W00.2\\\",\\n        \\\"W00.80\\\",\\n        \\\"W01\\\",\\n        \\\"W01.0\\\",\\n        \\\"W01.00\\\",\\n        \\\"W01.01\\\",\\n        \\\"W01.02\\\",\\n        \\\"W01.04\\\",\\n        \\\"W01.08\\\",\\n        \\\"W01.09\\\",\\n        \\\"W01.1\\\",\\n        \\\"W01.10\\\",\\n        \\\"W01.14\\\",\\n        \\\"W01.18\\\",\\n        \\\"W01.19\\\",\\n        \\\"W01.2\\\",\\n        \\\"W01.24\\\",\\n        \\\"W01.28\\\",\\n        \\\"W01.3\\\",\\n        \\\"W01.30\\\",\\n        \\\"W01.31\\\",\\n        \\\"W01.39\\\",\\n        \\\"W01.4\\\",\\n        \\\"W01.40\\\",\\n        \\\"W01.41\\\",\\n        \\\"W01.48\\\",\\n        \\\"W01.49\\\",\\n        \\\"W01.5\\\",\\n        \\\"W01.52\\\",\\n        \\\"W01.54\\\",\\n        \\\"W01.58\\\",\\n        \\\"W01.59\\\",\\n        \\\"W01.72\\\",\\n        \\\"W01.8\\\",\\n        \\\"W01.88\\\",\\n        \\\"W01.89\\\",\\n        \\\"W01.9\\\",\\n        \\\"W02\\\",\\n        \\\"W02.0\\\",\\n        \\\"W02.01\\\",\\n        \\\"W02.1\\\",\\n        \\\"W02.2\\\",\\n        \\\"W02.3\\\",\\n        \\\"W02.4\\\",\\n        \\\"W02.41\\\",\\n        \\\"W02.5\\\",\\n        \\\"W02.6\\\",\\n        \\\"W02.60\\\",\\n        \\\"W02.7\\\",\\n        \\\"W02.8\\\",\\n        \\\"W02.81\\\",\\n        \\\"W02.88\\\",\\n        \\\"W02.9\\\",\\n        \\\"W02.90\\\",\\n        \\\"W03\\\",\\n        \\\"W04\\\",\\n        \\\"W04.00\\\",\\n        \\\"W04.04\\\",\\n        \\\"W04.08\\\",\\n        \\\"W04.09\\\",\\n        \\\"W04.14\\\",\\n        \\\"W04.48\\\",\\n        \\\"W04.49\\\",\\n        \\\"W05\\\",\\n        \\\"W06\\\",\\n        \\\"W06.0\\\",\\n        \\\"W06.04\\\",\\n        \\\"W06.08\\\",\\n        \\\"W06.09\\\",\\n        \\\"W06.1\\\",\\n        \\\"W06.14\\\",\\n        \\\"W06.18\\\",\\n        \\\"W06.2\\\",\\n        \\\"W06.20\\\",\\n        \\\"W06.3\\\",\\n        \\\"W06.5\\\",\\n        \\\"W06.6\\\",\\n        \\\"W06.60\\\",\\n        \\\"W06.8\\\",\\n        \\\"W06.9\\\",\\n        \\\"W07\\\",\\n        \\\"W07.0\\\",\\n        \\\"W07.08\\\",\\n        \\\"W07.1\\\",\\n        \\\"W07.14\\\",\\n        \\\"W07.2\\\",\\n        \\\"W07.3\\\",\\n        \\\"W07.4\\\",\\n        \\\"W07.5\\\",\\n        \\\"W07.6\\\",\\n        \\\"W07.7\\\",\\n        \\\"W07.8\\\",\\n        \\\"W07.9\\\",\\n        \\\"W08\\\",\\n        \\\"W08.0\\\",\\n        \\\"W08.04\\\",\\n        \\\"W08.08\\\",\\n        \\\"W08.1\\\",\\n        \\\"W08.2\\\",\\n        \\\"W08.29\\\",\\n        \\\"W08.8\\\",\\n        \\\"W08.9\\\",\\n        \\\"W18\\\",\\n        \\\"W18.0\\\",\\n        \\\"W18.03\\\",\\n        \\\"W18.08\\\",\\n        \\\"W18.1\\\",\\n        \\\"W18.12\\\",\\n        \\\"W18.2\\\",\\n        \\\"W18.4\\\",\\n        \\\"W18.6\\\",\\n        \\\"W18.62\\\",\\n        \\\"W18.8\\\",\\n        \\\"W18.88\\\",\\n        \\\"W18.9\\\",\\n        \\\"W18.92\\\",\\n        \\\"W19\\\",\\n        \\\"W19.0\\\",\\n        \\\"W19.01\\\",\\n        \\\"W19.03\\\",\\n        \\\"W19.04\\\",\\n        \\\"W19.08\\\",\\n        \\\"W19.09\\\",\\n        \\\"W19.18\\\",\\n        \\\"W19.19\\\",\\n        \\\"W19.3\\\",\\n        \\\"W19.43\\\",\\n        \\\"W19.48\\\",\\n        \\\"W19.59\\\",\\n        \\\"W19.62\\\",\\n        \\\"W19.72\\\",\\n        \\\"W19.82\\\",\\n        \\\"W19.89\\\",\\n        \\\"W19.99\\\"\\n    },\\n    motor_vehical_list = {\\n        \\\"V40.00\\\",\\n        \\\"V40.08\\\",\\n        \\\"V40.10\\\",\\n        \\\"V40.19\\\",\\n        \\\"V40.20\\\",\\n        \\\"V40.29\\\",\\n        \\\"V40.30\\\",\\n        \\\"V40.32\\\",\\n        \\\"V40.40\\\",\\n        \\\"V40.5\\\",\\n        \\\"V40.51\\\",\\n        \\\"V40.58\\\",\\n        \\\"V40.59\\\",\\n        \\\"V40.61\\\",\\n        \\\"V40.68\\\",\\n        \\\"V40.69\\\",\\n        \\\"V40.78\\\",\\n        \\\"V40.79\\\",\\n        \\\"V41.51\\\",\\n        \\\"V41.59\\\",\\n        \\\"V42.51\\\",\\n        \\\"V42.59\\\",\\n        \\\"V42.60\\\",\\n        \\\"V42.61\\\",\\n        \\\"V42.69\\\",\\n        \\\"V43\\\",\\n        \\\"V43.00\\\",\\n        \\\"V43.01\\\",\\n        \\\"V43.03\\\",\\n        \\\"V43.08\\\",\\n        \\\"V43.09\\\",\\n        \\\"V43.10\\\",\\n        \\\"V43.18\\\",\\n        \\\"V43.19\\\",\\n        \\\"V43.20\\\",\\n        \\\"V43.21\\\",\\n        \\\"V43.28\\\",\\n        \\\"V43.29\\\",\\n        \\\"V43.39\\\",\\n        \\\"V43.40\\\",\\n        \\\"V43.41\\\",\\n        \\\"V43.42\\\",\\n        \\\"V43.43\\\",\\n        \\\"V43.48\\\",\\n        \\\"V43.49\\\",\\n        \\\"V43.5\\\",\\n        \\\"V43.50\\\",\\n        \\\"V43.51\\\",\\n        \\\"V43.52\\\",\\n        \\\"V43.53\\\",\\n        \\\"V43.58\\\",\\n        \\\"V43.59\\\",\\n        \\\"V43.6\\\",\\n        \\\"V43.60\\\",\\n        \\\"V43.61\\\",\\n        \\\"V43.62\\\",\\n        \\\"V43.63\\\",\\n        \\\"V43.68\\\",\\n        \\\"V43.69\\\",\\n        \\\"V43.70\\\",\\n        \\\"V43.71\\\",\\n        \\\"V43.78\\\",\\n        \\\"V43.79\\\",\\n        \\\"V43.9\\\",\\n        \\\"V43.90\\\",\\n        \\\"V43.92\\\",\\n        \\\"V43.98\\\",\\n        \\\"V43.99\\\",\\n        \\\"V44\\\",\\n        \\\"V44.00\\\",\\n        \\\"V44.03\\\",\\n        \\\"V44.08\\\",\\n        \\\"V44.09\\\",\\n        \\\"V44.20\\\",\\n        \\\"V44.48\\\",\\n        \\\"V44.5\\\",\\n        \\\"V44.50\\\",\\n        \\\"V44.51\\\",\\n        \\\"V44.52\\\",\\n        \\\"V44.53\\\",\\n        \\\"V44.58\\\",\\n        \\\"V44.59\\\",\\n        \\\"V44.6\\\",\\n        \\\"V44.60\\\",\\n        \\\"V44.61\\\",\\n        \\\"V44.63\\\",\\n        \\\"V44.68\\\",\\n        \\\"V44.69\\\",\\n        \\\"V44.99\\\",\\n        \\\"V45.00\\\",\\n        \\\"V45.50\\\",\\n        \\\"V45.51\\\",\\n        \\\"V45.58\\\",\\n        \\\"V45.59\\\",\\n        \\\"V45.60\\\",\\n        \\\"V45.61\\\",\\n        \\\"V45.69\\\",\\n        \\\"V46.09\\\",\\n        \\\"V46.50\\\",\\n        \\\"V46.51\\\",\\n        \\\"V46.52\\\",\\n        \\\"V46.59\\\",\\n        \\\"V46.60\\\",\\n        \\\"V46.61\\\",\\n        \\\"V46.69\\\",\\n        \\\"V46.71\\\",\\n        \\\"V46.78\\\",\\n        \\\"V46.99\\\",\\n        \\\"V47\\\",\\n        \\\"V47.0\\\",\\n        \\\"V47.00\\\",\\n        \\\"V47.01\\\",\\n        \\\"V47.02\\\",\\n        \\\"V47.08\\\",\\n        \\\"V47.09\\\",\\n        \\\"V47.1\\\",\\n        \\\"V47.10\\\",\\n        \\\"V47.11\\\",\\n        \\\"V47.18\\\",\\n        \\\"V47.19\\\",\\n        \\\"V47.2\\\",\\n        \\\"V47.20\\\",\\n        \\\"V47.29\\\",\\n        \\\"V47.39\\\",\\n        \\\"V47.40\\\",\\n        \\\"V47.41\\\",\\n        \\\"V47.43\\\",\\n        \\\"V47.48\\\",\\n        \\\"V47.5\\\",\\n        \\\"V47.50\\\",\\n        \\\"V47.51\\\",\\n        \\\"V47.52\\\",\\n        \\\"V47.53\\\",\\n        \\\"V47.58\\\",\\n        \\\"V47.59\\\",\\n        \\\"V47.6\\\",\\n        \\\"V47.60\\\",\\n        \\\"V47.61\\\",\\n        \\\"V47.62\\\",\\n        \\\"V47.63\\\",\\n        \\\"V47.68\\\",\\n        \\\"V47.69\\\",\\n        \\\"V47.70\\\",\\n        \\\"V47.78\\\",\\n        \\\"V47.79\\\",\\n        \\\"V47.9\\\",\\n        \\\"V47.90\\\",\\n        \\\"V47.92\\\",\\n        \\\"V47.99\\\",\\n        \\\"V48\\\",\\n        \\\"V48.00\\\",\\n        \\\"V48.01\\\",\\n        \\\"V48.02\\\",\\n        \\\"V48.08\\\",\\n        \\\"V48.09\\\",\\n        \\\"V48.1\\\",\\n        \\\"V48.10\\\",\\n        \\\"V48.11\\\",\\n        \\\"V48.18\\\",\\n        \\\"V48.19\\\",\\n        \\\"V48.2\\\",\\n        \\\"V48.21\\\",\\n        \\\"V48.28\\\",\\n        \\\"V48.29\\\",\\n        \\\"V48.30\\\",\\n        \\\"V48.32\\\",\\n        \\\"V48.38\\\",\\n        \\\"V48.39\\\",\\n        \\\"V48.4\\\",\\n        \\\"V48.40\\\",\\n        \\\"V48.41\\\",\\n        \\\"V48.43\\\",\\n        \\\"V48.48\\\",\\n        \\\"V48.49\\\",\\n        \\\"V48.5\\\",\\n        \\\"V48.50\\\",\\n        \\\"V48.51\\\",\\n        \\\"V48.52\\\",\\n        \\\"V48.53\\\",\\n        \\\"V48.54\\\",\\n        \\\"V48.58\\\",\\n        \\\"V48.59\\\",\\n        \\\"V48.6\\\",\\n        \\\"V48.60\\\",\\n        \\\"V48.61\\\",\\n        \\\"V48.62\\\",\\n        \\\"V48.63\\\",\\n        \\\"V48.68\\\",\\n        \\\"V48.69\\\",\\n        \\\"V48.7\\\",\\n        \\\"V48.70\\\",\\n        \\\"V48.71\\\",\\n        \\\"V48.78\\\",\\n        \\\"V48.79\\\",\\n        \\\"V48.9\\\",\\n        \\\"V48.90\\\",\\n        \\\"V48.91\\\",\\n        \\\"V48.99\\\",\\n        \\\"V49\\\",\\n        \\\"V49.0\\\",\\n        \\\"V49.1\\\",\\n        \\\"V49.18\\\",\\n        \\\"V49.2\\\",\\n        \\\"V49.3\\\",\\n        \\\"V49.4\\\",\\n        \\\"V49.40\\\",\\n        \\\"V49.5\\\",\\n        \\\"V49.59\\\",\\n        \\\"V49.6\\\",\\n        \\\"V49.69\\\",\\n        \\\"V49.8\\\",\\n        \\\"V49.81\\\",\\n        \\\"V49.9\\\",\\n        \\\"V50.6\\\",\\n        \\\"V53.0\\\",\\n        \\\"V53.2\\\",\\n        \\\"V53.4\\\",\\n        \\\"V53.5\\\",\\n        \\\"V53.6\\\",\\n        \\\"V53.7\\\",\\n        \\\"V53.9\\\",\\n        \\\"V54.0\\\",\\n        \\\"V54.4\\\",\\n        \\\"V54.5\\\",\\n        \\\"V54.6\\\",\\n        \\\"V55.5\\\",\\n        \\\"V56.0\\\",\\n        \\\"V57.0\\\",\\n        \\\"V57.1\\\",\\n        \\\"V57.2\\\",\\n        \\\"V57.4\\\",\\n        \\\"V57.5\\\",\\n        \\\"V57.6\\\",\\n        \\\"V57.7\\\",\\n        \\\"V57.9\\\",\\n        \\\"V58.0\\\",\\n        \\\"V58.1\\\",\\n        \\\"V58.2\\\",\\n        \\\"V58.4\\\",\\n        \\\"V58.48\\\",\\n        \\\"V58.5\\\",\\n        \\\"V58.6\\\",\\n        \\\"V58.7\\\",\\n        \\\"V58.9\\\",\\n        \\\"V59.0\\\",\\n        \\\"V59.1\\\",\\n        \\\"V59.4\\\",\\n        \\\"V59.6\\\",\\n        \\\"V59.8\\\",\\n        \\\"V59.9\\\",\\n        \\\"V60.0\\\",\\n        \\\"V60.2\\\",\\n        \\\"V63.0\\\",\\n        \\\"V63.4\\\",\\n        \\\"V63.5\\\",\\n        \\\"V63.51\\\",\\n        \\\"V63.6\\\",\\n        \\\"V63.7\\\",\\n        \\\"V63.9\\\",\\n        \\\"V64.4\\\",\\n        \\\"V64.5\\\",\\n        \\\"V64.6\\\",\\n        \\\"V64.7\\\",\\n        \\\"V64.9\\\",\\n        \\\"V65.3\\\",\\n        \\\"V66.3\\\",\\n        \\\"V66.5\\\",\\n        \\\"V66.9\\\",\\n        \\\"V67.0\\\",\\n        \\\"V67.2\\\",\\n        \\\"V67.5\\\",\\n        \\\"V67.6\\\",\\n        \\\"V67.9\\\",\\n        \\\"V68\\\",\\n        \\\"V68.0\\\",\\n        \\\"V68.1\\\",\\n        \\\"V68.2\\\",\\n        \\\"V68.4\\\",\\n        \\\"V68.42\\\",\\n        \\\"V68.5\\\",\\n        \\\"V68.51\\\",\\n        \\\"V68.6\\\",\\n        \\\"V68.61\\\",\\n        \\\"V68.7\\\",\\n        \\\"V68.9\\\",\\n        \\\"V69.0\\\",\\n        \\\"V69.1\\\",\\n        \\\"V69.3\\\",\\n        \\\"V69.32\\\",\\n        \\\"V69.4\\\",\\n        \\\"V69.8\\\",\\n        \\\"V69.9\\\",\\n        \\\"V70.6\\\",\\n        \\\"V73.4\\\",\\n        \\\"V73.5\\\",\\n        \\\"V73.6\\\",\\n        \\\"V74.5\\\",\\n        \\\"V74.6\\\",\\n        \\\"V77.5\\\",\\n        \\\"V77.6\\\",\\n        \\\"V78.0\\\",\\n        \\\"V78.1\\\",\\n        \\\"V78.4\\\",\\n        \\\"V78.5\\\",\\n        \\\"V78.6\\\",\\n        \\\"V78.7\\\",\\n        \\\"V79.1\\\",\\n        \\\"V79.3\\\",\\n        \\\"V79.5\\\",\\n        \\\"V79.8\\\",\\n        \\\"V79.9\\\"\\n    },\\n    motorcycle_list = {\\n        \\\"V20.00\\\",\\n        \\\"V20.01\\\",\\n        \\\"V20.02\\\",\\n        \\\"V20.08\\\",\\n        \\\"V20.09\\\",\\n        \\\"V20.22\\\",\\n        \\\"V20.31\\\",\\n        \\\"V20.4\\\",\\n        \\\"V20.40\\\",\\n        \\\"V20.41\\\",\\n        \\\"V20.42\\\",\\n        \\\"V20.48\\\",\\n        \\\"V20.49\\\",\\n        \\\"V20.51\\\",\\n        \\\"V20.52\\\",\\n        \\\"V20.59\\\",\\n        \\\"V20.92\\\",\\n        \\\"V20.99\\\",\\n        \\\"V21.40\\\",\\n        \\\"V21.49\\\",\\n        \\\"V21.91\\\",\\n        \\\"V22.0\\\",\\n        \\\"V22.00\\\",\\n        \\\"V22.01\\\",\\n        \\\"V22.02\\\",\\n        \\\"V22.08\\\",\\n        \\\"V22.09\\\",\\n        \\\"V22.11\\\",\\n        \\\"V22.18\\\",\\n        \\\"V22.19\\\",\\n        \\\"V22.22\\\",\\n        \\\"V22.4\\\",\\n        \\\"V22.40\\\",\\n        \\\"V22.41\\\",\\n        \\\"V22.42\\\",\\n        \\\"V22.43\\\",\\n        \\\"V22.48\\\",\\n        \\\"V22.49\\\",\\n        \\\"V22.51\\\",\\n        \\\"V22.58\\\",\\n        \\\"V22.59\\\",\\n        \\\"V22.91\\\",\\n        \\\"V22.92\\\",\\n        \\\"V22.99\\\",\\n        \\\"V23\\\",\\n        \\\"V23.0\\\",\\n        \\\"V23.00\\\",\\n        \\\"V23.01\\\",\\n        \\\"V23.02\\\",\\n        \\\"V23.08\\\",\\n        \\\"V23.09\\\",\\n        \\\"V23.11\\\",\\n        \\\"V23.12\\\",\\n        \\\"V23.20\\\",\\n        \\\"V23.21\\\",\\n        \\\"V23.4\\\",\\n        \\\"V23.40\\\",\\n        \\\"V23.41\\\",\\n        \\\"V23.42\\\",\\n        \\\"V23.48\\\",\\n        \\\"V23.49\\\",\\n        \\\"V23.5\\\",\\n        \\\"V23.50\\\",\\n        \\\"V23.51\\\",\\n        \\\"V23.52\\\",\\n        \\\"V23.58\\\",\\n        \\\"V23.59\\\",\\n        \\\"V23.90\\\",\\n        \\\"V23.91\\\",\\n        \\\"V23.92\\\",\\n        \\\"V23.98\\\",\\n        \\\"V23.99\\\",\\n        \\\"V24.00\\\",\\n        \\\"V24.02\\\",\\n        \\\"V24.08\\\",\\n        \\\"V24.11\\\",\\n        \\\"V24.29\\\",\\n        \\\"V24.4\\\",\\n        \\\"V24.40\\\",\\n        \\\"V24.41\\\",\\n        \\\"V24.48\\\",\\n        \\\"V24.49\\\",\\n        \\\"V24.51\\\",\\n        \\\"V24.90\\\",\\n        \\\"V24.99\\\",\\n        \\\"V25.40\\\",\\n        \\\"V25.41\\\",\\n        \\\"V25.48\\\",\\n        \\\"V26.00\\\",\\n        \\\"V26.01\\\",\\n        \\\"V26.02\\\",\\n        \\\"V26.08\\\",\\n        \\\"V26.09\\\",\\n        \\\"V26.19\\\",\\n        \\\"V26.29\\\",\\n        \\\"V26.39\\\",\\n        \\\"V26.41\\\",\\n        \\\"V26.49\\\",\\n        \\\"V26.59\\\",\\n        \\\"V26.90\\\",\\n        \\\"V26.99\\\",\\n        \\\"V27\\\",\\n        \\\"V27.0\\\",\\n        \\\"V27.00\\\",\\n        \\\"V27.01\\\",\\n        \\\"V27.02\\\",\\n        \\\"V27.08\\\",\\n        \\\"V27.09\\\",\\n        \\\"V27.1\\\",\\n        \\\"V27.12\\\",\\n        \\\"V27.18\\\",\\n        \\\"V27.19\\\",\\n        \\\"V27.20\\\",\\n        \\\"V27.22\\\",\\n        \\\"V27.29\\\",\\n        \\\"V27.30\\\",\\n        \\\"V27.39\\\",\\n        \\\"V27.4\\\",\\n        \\\"V27.40\\\",\\n        \\\"V27.41\\\",\\n        \\\"V27.42\\\",\\n        \\\"V27.44\\\",\\n        \\\"V27.48\\\",\\n        \\\"V27.49\\\",\\n        \\\"V27.5\\\",\\n        \\\"V27.50\\\",\\n        \\\"V27.51\\\",\\n        \\\"V27.58\\\",\\n        \\\"V27.59\\\",\\n        \\\"V27.90\\\",\\n        \\\"V27.91\\\",\\n        \\\"V27.92\\\",\\n        \\\"V27.98\\\",\\n        \\\"V27.99\\\",\\n        \\\"V28\\\",\\n        \\\"V28.0\\\",\\n        \\\"V28.00\\\",\\n        \\\"V28.01\\\",\\n        \\\"V28.02\\\",\\n        \\\"V28.08\\\",\\n        \\\"V28.09\\\",\\n        \\\"V28.10\\\",\\n        \\\"V28.11\\\",\\n        \\\"V28.12\\\",\\n        \\\"V28.18\\\",\\n        \\\"V28.21\\\",\\n        \\\"V28.22\\\",\\n        \\\"V28.29\\\",\\n        \\\"V28.30\\\",\\n        \\\"V28.32\\\",\\n        \\\"V28.4\\\",\\n        \\\"V28.40\\\",\\n        \\\"V28.41\\\",\\n        \\\"V28.42\\\",\\n        \\\"V28.48\\\",\\n        \\\"V28.49\\\",\\n        \\\"V28.5\\\",\\n        \\\"V28.50\\\",\\n        \\\"V28.51\\\",\\n        \\\"V28.52\\\",\\n        \\\"V28.58\\\",\\n        \\\"V28.59\\\",\\n        \\\"V28.90\\\",\\n        \\\"V28.91\\\",\\n        \\\"V28.92\\\",\\n        \\\"V28.98\\\",\\n        \\\"V28.99\\\",\\n        \\\"V29\\\",\\n        \\\"V29.0\\\",\\n        \\\"V29.00\\\",\\n        \\\"V29.01\\\",\\n        \\\"V29.08\\\",\\n        \\\"V29.1\\\",\\n        \\\"V29.2\\\",\\n        \\\"V29.3\\\",\\n        \\\"V29.30\\\",\\n        \\\"V29.38\\\",\\n        \\\"V29.4\\\",\\n        \\\"V29.49\\\",\\n        \\\"V29.5\\\",\\n        \\\"V29.6\\\",\\n        \\\"V29.8\\\",\\n        \\\"V29.81\\\",\\n        \\\"V29.9\\\",\\n        \\\"V29.90\\\",\\n        \\\"V30.11\\\",\\n        \\\"V30.5\\\",\\n        \\\"V31.0\\\",\\n        \\\"V32.1\\\",\\n        \\\"V32.5\\\",\\n        \\\"V32.6\\\",\\n        \\\"V32.9\\\",\\n        \\\"V33.0\\\",\\n        \\\"V33.1\\\",\\n        \\\"V33.5\\\",\\n        \\\"V33.6\\\",\\n        \\\"V33.7\\\",\\n        \\\"V33.9\\\",\\n        \\\"V37.0\\\",\\n        \\\"V37.1\\\",\\n        \\\"V37.2\\\",\\n        \\\"V37.3\\\",\\n        \\\"V37.41\\\",\\n        \\\"V37.6\\\",\\n        \\\"V37.7\\\",\\n        \\\"V37.9\\\",\\n        \\\"V38.0\\\",\\n        \\\"V38.4\\\",\\n        \\\"V38.41\\\",\\n        \\\"V38.5\\\",\\n        \\\"V38.6\\\",\\n        \\\"V38.71\\\",\\n        \\\"V38.9\\\",\\n        \\\"V39.0\\\",\\n        \\\"V39.3\\\",\\n        \\\"V39.4\\\",\\n        \\\"V39.8\\\",\\n        \\\"V39.9\\\",\\n        \\\"V86\\\",\\n        \\\"V86.00\\\",\\n        \\\"V86.01\\\",\\n        \\\"V86.02\\\",\\n        \\\"V86.08\\\",\\n        \\\"V86.09\\\",\\n        \\\"V86.12\\\",\\n        \\\"V86.14\\\",\\n        \\\"V86.18\\\",\\n        \\\"V86.2\\\",\\n        \\\"V86.39\\\",\\n        \\\"V86.40\\\",\\n        \\\"V86.41\\\",\\n        \\\"V86.42\\\",\\n        \\\"V86.5\\\",\\n        \\\"V86.50\\\",\\n        \\\"V86.51\\\",\\n        \\\"V86.52\\\",\\n        \\\"V86.53\\\",\\n        \\\"V86.58\\\",\\n        \\\"V86.59\\\",\\n        \\\"V86.62\\\",\\n        \\\"V86.69\\\",\\n        \\\"V86.7\\\",\\n        \\\"V86.70\\\",\\n        \\\"V86.71\\\",\\n        \\\"V86.72\\\",\\n        \\\"V86.91\\\",\\n        \\\"V86.92\\\",\\n        \\\"V86.99\\\"\\n    },\\n    pedal_cyclist_list = {\\n        \\\"V10\\\",\\n        \\\"V10.0\\\",\\n        \\\"V10.1\\\",\\n        \\\"V10.2\\\",\\n        \\\"V10.4\\\",\\n        \\\"V10.41\\\",\\n        \\\"V10.5\\\",\\n        \\\"V10.9\\\",\\n        \\\"V11\\\",\\n        \\\"V11.0\\\",\\n        \\\"V11.2\\\",\\n        \\\"V11.4\\\",\\n        \\\"V11.41\\\",\\n        \\\"V11.9\\\",\\n        \\\"V12.0\\\",\\n        \\\"V12.4\\\",\\n        \\\"V12.41\\\",\\n        \\\"V12.5\\\",\\n        \\\"V12.9\\\",\\n        \\\"V13\\\",\\n        \\\"V13.0\\\",\\n        \\\"V13.1\\\",\\n        \\\"V13.2\\\",\\n        \\\"V13.28\\\",\\n        \\\"V13.3\\\",\\n        \\\"V13.4\\\",\\n        \\\"V13.40\\\",\\n        \\\"V13.41\\\",\\n        \\\"V13.48\\\",\\n        \\\"V13.5\\\",\\n        \\\"V13.9\\\",\\n        \\\"V14.0\\\",\\n        \\\"V14.4\\\",\\n        \\\"V14.41\\\",\\n        \\\"V14.48\\\",\\n        \\\"V14.5\\\",\\n        \\\"V14.9\\\",\\n        \\\"V15.4\\\",\\n        \\\"V16.0\\\",\\n        \\\"V16.1\\\",\\n        \\\"V16.2\\\",\\n        \\\"V16.4\\\",\\n        \\\"V16.5\\\",\\n        \\\"V16.9\\\",\\n        \\\"V17\\\",\\n        \\\"V17.0\\\",\\n        \\\"V17.01\\\",\\n        \\\"V17.1\\\",\\n        \\\"V17.2\\\",\\n        \\\"V17.3\\\",\\n        \\\"V17.4\\\",\\n        \\\"V17.41\\\",\\n        \\\"V17.48\\\",\\n        \\\"V17.5\\\",\\n        \\\"V17.9\\\",\\n        \\\"V18\\\",\\n        \\\"V18.0\\\",\\n        \\\"V18.00\\\",\\n        \\\"V18.01\\\",\\n        \\\"V18.08\\\",\\n        \\\"V18.1\\\",\\n        \\\"V18.2\\\",\\n        \\\"V18.3\\\",\\n        \\\"V18.4\\\",\\n        \\\"V18.41\\\",\\n        \\\"V18.48\\\",\\n        \\\"V18.49\\\",\\n        \\\"V18.5\\\",\\n        \\\"V18.9\\\",\\n        \\\"V18.94\\\",\\n        \\\"V19\\\",\\n        \\\"V19.0\\\",\\n        \\\"V19.03\\\",\\n        \\\"V19.2\\\",\\n        \\\"V19.3\\\",\\n        \\\"V19.30\\\",\\n        \\\"V19.38\\\",\\n        \\\"V19.4\\\",\\n        \\\"V19.6\\\",\\n        \\\"V19.60\\\",\\n        \\\"V19.62\\\",\\n        \\\"V19.8\\\",\\n        \\\"V19.80\\\",\\n        \\\"V19.9\\\"\\n    },\\n    pedestrian_list = {\\n        \\\"V00.00\\\",\\n        \\\"V00.01\\\",\\n        \\\"V00.02\\\",\\n        \\\"V00.04\\\",\\n        \\\"V00.05\\\",\\n        \\\"V00.11\\\",\\n        \\\"V00.12\\\",\\n        \\\"V00.13\\\",\\n        \\\"V00.14\\\",\\n        \\\"V00.15\\\",\\n        \\\"V00.18\\\",\\n        \\\"V00.90\\\",\\n        \\\"V00.92\\\",\\n        \\\"V00.99\\\",\\n        \\\"V01\\\",\\n        \\\"V01.0\\\",\\n        \\\"V01.00\\\",\\n        \\\"V01.01\\\",\\n        \\\"V01.03\\\",\\n        \\\"V01.08\\\",\\n        \\\"V01.1\\\",\\n        \\\"V01.9\\\",\\n        \\\"V02\\\",\\n        \\\"V02.0\\\",\\n        \\\"V02.00\\\",\\n        \\\"V02.1\\\",\\n        \\\"V02.10\\\",\\n        \\\"V02.9\\\",\\n        \\\"V03\\\",\\n        \\\"V03.0\\\",\\n        \\\"V03.00\\\",\\n        \\\"V03.01\\\",\\n        \\\"V03.08\\\",\\n        \\\"V03.09\\\",\\n        \\\"V03.1\\\",\\n        \\\"V03.10\\\",\\n        \\\"V03.11\\\",\\n        \\\"V03.18\\\",\\n        \\\"V03.19\\\",\\n        \\\"V03.9\\\",\\n        \\\"V03.90\\\",\\n        \\\"V03.99\\\",\\n        \\\"V04\\\",\\n        \\\"V04.0\\\",\\n        \\\"V04.1\\\",\\n        \\\"V04.10\\\",\\n        \\\"V04.11\\\",\\n        \\\"V04.14\\\",\\n        \\\"V04.18\\\",\\n        \\\"V04.9\\\",\\n        \\\"V05.0\\\",\\n        \\\"V05.08\\\",\\n        \\\"V05.1\\\",\\n        \\\"V05.18\\\",\\n        \\\"V05.9\\\",\\n        \\\"V06.0\\\",\\n        \\\"V06.1\\\",\\n        \\\"V06.9\\\",\\n        \\\"V09.0\\\",\\n        \\\"V09.09\\\",\\n        \\\"V09.1\\\",\\n        \\\"V09.2\\\",\\n        \\\"V09.3\\\",\\n        \\\"V09.9\\\",\\n        \\\"V09.99\\\"\\n    },\\n    #\\\"Added Conditional Column\\\" =\\n        Table.AddColumn(\\n            Source,\\n            \\\"Cause\\\",\\n            each\\n                if\\n                    List.Contains(\\n                        assault_list,\\n                        [cause_icd_code_id]\\n                    )\\n                then\\n                    \\\"Assault\\\"\\n                else if\\n                    List.Contains(\\n                        high_fall_list,\\n                        [cause_icd_code_id]\\n                    )\\n                then\\n                    \\\"High fall >1m\\\"\\n                else if\\n                    List.Contains(\\n                        low_fall_list,\\n                        [cause_icd_code_id]\\n                    )\\n                then\\n                    \\\"Low Fall\\\"\\n                else if\\n                    List.Contains(\\n                        motor_vehical_list,\\n                        [cause_icd_code_id]\\n                    )\\n                then\\n                    \\\"Motor Vehicle Driver/Passenger\\\"\\n                else if\\n                    List.Contains(\\n                        motorcycle_list,\\n                        [cause_icd_code_id]\\n                    )\\n                then\\n                    \\\"Motorcycle rider/pillion\\\"\\n                else if\\n                    List.Contains(\\n                        pedal_cyclist_list,\\n                        [cause_icd_code_id]\\n                    )\\n                then\\n                    \\\"Pedal cyclist\\\"\\n                else if\\n                    List.Contains(\\n                        pedestrian_list,\\n                        [cause_icd_code_id]\\n                    )\\n                then\\n                    \\\"Pedestrian\\\"\\n                else\\n                    \\\"Other\\\",\\n            type text\\n        ),\\n    look_up_cause = [#\\\"Motor Vehicle Driver/Passenger\\\"=1, #\\\"Motorcycle rider/pillion\\\"=2, #\\\"Pedal cyclist\\\"=3,#\\\"Pedestrian\\\"=4,Assault=5,#\\\"High fall >1m\\\"=6, Low Fall=7, Other = 8],\\n    look_up_transport = [#\\\"Motor Vehicle Driver/Passenger\\\"=\\\"Transport\\\", #\\\"Motorcycle rider/pillion\\\"=\\\"Transport\\\", #\\\"Pedal cyclist\\\"=\\\"Transport\\\",#\\\"Pedestrian\\\"=\\\"Transport\\\",Assault=\\\"Non Transport\\\",#\\\"High fall >1m\\\"=\\\"Non Transport\\\", Low Fall=\\\"Non Transport\\\", Other = \\\"Non Transport\\\"],\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Added Conditional Column\\\", \\\"cause_order\\\", each Record.Field(look_up_cause,[Cause]), Int64.Type),\\n    #\\\"Added Custom1\\\" = Table.AddColumn(#\\\"Added Custom\\\", \\\"Transport\\\", each Record.Field(look_up_transport, [Cause]), type text),\\n    #\\\"Duplicated Column1\\\" = Table.DuplicateColumn(#\\\"Added Custom1\\\", \\\"Transport\\\", \\\"Transport - order\\\"),\\n    #\\\"Replaced Value1\\\" = Table.ReplaceValue(#\\\"Duplicated Column1\\\",\\\"Non Transport\\\",\\\"2\\\",Replacer.ReplaceText,{\\\"Transport - order\\\"}),\\n    #\\\"Replaced Value\\\" = Table.ReplaceValue(#\\\"Replaced Value1\\\",\\\"Transport\\\",\\\"1\\\",Replacer.ReplaceText,{\\\"Transport - order\\\"})\\nin\\n    #\\\"Replaced Value\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_INJURY_SEVERITY",
      "lineageTag": "1f6c12fa-165b-4ef6-a8d6-73305f39ba70",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = {1..75,99},",
        "    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(),type table [iss_id=Int64.Type], null, ExtraValues.Error),",
        "    #\"Added Conditional Column\" = Table.AddColumn(#\"Converted to Table\", \"severity_order\", each if [iss_id] < 13 then 1 else if [iss_id] < 15 then 2 else if [iss_id] < 25 then 3 else if [iss_id] < 41 then 4 else if [iss_id] < 76 then 5 else if [iss_id] = 99 then 6 else null, Int64.Type)",
        "in",
        "    #\"Added Conditional Column\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = {1..75,99},\\n    #\\\"Converted to Table\\\" = Table.FromList(Source, Splitter.SplitByNothing(),type table [iss_id=Int64.Type], null, ExtraValues.Error),\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(#\\\"Converted to Table\\\", \\\"severity_order\\\", each if [iss_id] < 13 then 1 else if [iss_id] < 15 then 2 else if [iss_id] < 25 then 3 else if [iss_id] < 41 then 4 else if [iss_id] < 76 then 5 else if [iss_id] = 99 then 6 else null, Int64.Type)\\nin\\n    #\\\"Added Conditional Column\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_DISCHAGRE",
      "lineageTag": "1433fcf5-b67e-478d-ba83-2ff01f5845f8",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = #table(type table [destination_id= Int64.Type, discharge_description=text],{{1, \"Home\"},{2,\"Rehabilitation\"},{3,\"Residential aged care\"},{4,\"Special accommodation\"},{5,\"Hospital for convalescence\"},{6,\"Left against medical advice\"},{7,\"Death\"},{8,\"Other\"}, {9,\"Acute hospital for further definitive care\" },{99,\"Not stated/inadequately described\"}}),",
        "    #\"Added Conditional Column\" = Table.AddColumn(Source, \"Mortality\", each if [destination_id] = 7 then \"Deaths\" else if [destination_id] = 99 then \"Not stated\" else \"Survivors\",type text)",
        "in",
        "    #\"Added Conditional Column\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #table(type table [destination_id= Int64.Type, discharge_description=text],{{1, \\\"Home\\\"},{2,\\\"Rehabilitation\\\"},{3,\\\"Residential aged care\\\"},{4,\\\"Special accommodation\\\"},{5,\\\"Hospital for convalescence\\\"},{6,\\\"Left against medical advice\\\"},{7,\\\"Death\\\"},{8,\\\"Other\\\"}, {9,\\\"Acute hospital for further definitive care\\\" },{99,\\\"Not stated/inadequately described\\\"}}),\\n    #\\\"Added Conditional Column\\\" = Table.AddColumn(Source, \\\"Mortality\\\", each if [destination_id] = 7 then \\\"Deaths\\\" else if [destination_id] = 99 then \\\"Not stated\\\" else \\\"Survivors\\\",type text)\\nin\\n    #\\\"Added Conditional Column\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM_BODY_REGION",
      "lineageTag": "5313bb13-59b4-48da-943d-9455fa00df4c",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = body_region",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = body_region\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "DIM COUNTRY",
      "lineageTag": "040ee51b-e479-4456-b9de-32547dde189f",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = #table(type table [country = text], {{\"Australia\"}, {\"New Zealand\"}})",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #table(type table [country = text], {{\\\"Australia\\\"}, {\\\"New Zealand\\\"}})\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "RESTRICTED_HOSPITAL",
      "lineageTag": "69b05caa-ae27-4cd9-9d6b-b0eca080af72",
      "queryGroupId": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "text": [
        "let",
        "    Source = hospital_features,",
        "    #\"Added Custom\" = Table.AddColumn(Source, \"site_access_email\", each if [HospitalName]=\"Alfred Hospital\" then \"milinda.abayawardana@monash.edu\" else \"x\", type text) //#table(type table [hospital=text],{{\"x\"},{\"y\"}} )",
        "",
        "in",
        "    #\"Added Custom\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = hospital_features,\\n    #\\\"Added Custom\\\" = Table.AddColumn(Source, \\\"site_access_email\\\", each if [HospitalName]=\\\"Alfred Hospital\\\" then \\\"milinda.abayawardana@monash.edu\\\" else \\\"x\\\", type text) //#table(type table [hospital=text],{{\\\"x\\\"},{\\\"y\\\"}} )\\n\\nin\\n    #\\\"Added Custom\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "FACT_ATR",
      "lineageTag": "cf5fb583-fad1-460b-bba1-284a8ef1dcc4",
      "queryGroupId": "02d6985c-58c9-491c-bfb7-71d8ac30fa29",
      "text": [
        "let",
        "    Source = ATRCompleteDataset_Aggregated",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = ATRCompleteDataset_Aggregated\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "FACT_NATIONAL",
      "lineageTag": "fcf74439-6e69-4ef3-9566-5956f3d70fa2",
      "queryGroupId": "02d6985c-58c9-491c-bfb7-71d8ac30fa29",
      "text": [
        "let",
        "    Source = FACT_ATR",
        "in",
        "    Source"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = FACT_ATR\\nin\\n    Source\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "hospital",
      "lineageTag": "b988c2d5-8f4c-48bd-bd60-14b38bf9f32d",
      "queryGroupId": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "text": [
        "let",
        "    Source = #\"01_TotalCasesPerHospitalAndFinancialYear\"[[InstCodeId], [HospitalName]],",
        "    #\"Removed Duplicates\" = Table.Distinct(Source, {\"InstCodeId\"})",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "ATRCompleteDataset_Aggregated",
      "lineageTag": "f8379ab5-21b8-4e25-94d0-2a18bde20899",
      "queryGroupId": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "text": [
        "let",
        "    Source = ATRCompleteDataset,",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"RegId\", \"InstCodeId\", \"PatAge\", \"ATR_AGE\", \"PatGenderCodeId\", \"InjuryDt\", \"CauseICDCodeId\", \"InjuryTypeCodeId\", \"InjuryIntentCodeId\", \"InjuryPlaceCodeId\", \"TransModeCodeId\", \"OthHospTransCodeId\", \"DischargeDestCodeId\", \"ISS\", \"ATR_ISS\", \"LOS\", \"InjuryActivityCodeId\", \"country\", \"TransferType\", \"TimeToED\", \"TimeInED\", \"body_region\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\"),",
        "    #\"Added Index\" = Table.AddIndexColumn(#\"Removed Duplicates\", \"Index\", 1, 1, Int64.Type)",
        "in",
        "    #\"Added Index\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "ATRCompleteDataset",
      "lineageTag": "59bffb0f-9707-41e1-86e7-7df75762dcc5",
      "queryGroupId": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "text": [
        "let",
        "    Source = #\"07_ATRCompleteDataset\",",
        "    #\"Merged Queries\" = Table.NestedJoin(Source, {\"InstCodeId\"}, hospital_features, {\"InstCodeId\"}, \"hospital_features\", JoinKind.LeftOuter),",
        "    #\"Expanded hospital_features\" = Table.ExpandTableColumn(#\"Merged Queries\", \"hospital_features\", {\"country\"}, {\"country\"}),",
        "    Add_TransferType = Table.AddColumn(#\"Expanded hospital_features\", \"TransferType\", each if [OthHospTransCodeId] = 2 or [OthHospTransCodeId] = -99 then \"Direct Transport\" else \"Transfer\",type text),",
        "    #\"Added KnownArrDt\" =",
        "        Table.AddColumn(",
        "            Add_TransferType,",
        "            \"KnownArrDt\",",
        "            each",
        "                [ArrDt]",
        "                <> #date(1900, 01, 01)",
        "                and not ([ArrDt] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownArrTime\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownArrDt\",",
        "            \"KnownArrTime\",",
        "            each",
        "                [ArrTime]",
        "                <> #time(0, 0, 0)",
        "                and not ([ArrTime] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownInjuryDt\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownArrTime\",",
        "            \"KnownInjurtyDt\",",
        "            each",
        "                [InjuryDt]",
        "                <> #date(1900, 01, 01)",
        "                and not ([InjuryDt] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownInjuryTime\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownInjuryDt\",",
        "            \"KnownInjuryTime\",",
        "            each",
        "                [InjuryTime]",
        "                <> #time(0, 0, 0)",
        "                and not ([InjuryTime] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownEDDischargeDt\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownInjuryTime\",",
        "            \"KnownEDDischargeDt\",",
        "            each",
        "                [EDDischargeDt]",
        "                <> #date(1900, 1, 1)",
        "                and not ([EDDischargeDt] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownEDDischargeTime\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownEDDischargeDt\",",
        "            \"KnownEDDischargeTime\",",
        "            each",
        "                [EDDischargeTime]",
        "                <> #time(0, 0, 0)",
        "                and not ([EDDischargeTime] = null),",
        "            type logical",
        "        ),",
        "    #\"Add TimeToED\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownEDDischargeTime\",",
        "            \"TimeToED\",",
        "            each",
        "                if",
        "                    [OthHospTransCodeId]",
        "                    = 2",
        "                    and [KnownInjurtyDt]",
        "                    and [KnownInjuryTime]",
        "                    and [KnownArrDt]",
        "                    and [KnownArrTime]",
        "                    and [ArrDtTime]",
        "                    >= [InjuryDateTime]",
        "                then",
        "                    [ArrDtTime] - [InjuryDateTime]",
        "                else",
        "                    null,",
        "            Duration.Type",
        "        ),",
        "    #\"Add TimeInED\" =",
        "        Table.AddColumn(",
        "            #\"Add TimeToED\",",
        "            \"TimeInED\",",
        "            each",
        "                if",
        "                    [KnownArrDt]",
        "                    and [KnownArrTime]",
        "                    and [KnownEDDischargeDt]",
        "                    and [KnownEDDischargeTime]",
        "                    and [EDDischargeDtTime]",
        "                    >= [ArrDtTime]",
        "                then",
        "                    [EDDischargeDtTime] - [ArrDtTime]",
        "                else",
        "                    null,",
        "            Duration.Type",
        "        ),",
        "    #\"Replaced Value\" =",
        "        Table.ReplaceValue(",
        "            #\"Add TimeInED\",",
        "            \"\",",
        "            null,",
        "            Replacer.ReplaceValue,",
        "            {",
        "                \"SevereComplications\",",
        "                \"OperationProcedures\",",
        "                \"ComorbCodeIds\"",
        "            }",
        "        ),",
        "    #\"Replaced Value2\" =",
        "        Table.ReplaceValue(",
        "            #\"Replaced Value\",",
        "            each",
        "                [PatDOB]",
        "                = #date(1901, 1, 1)",
        "                or [PatDOB]",
        "                = #date(1900, 1, 1),",
        "            null,",
        "            (x, y, z) as nullable date =>",
        "                if y then",
        "                    z",
        "                else",
        "                    x,",
        "            {\"PatDOB\"}",
        "        ),",
        "    #\"Replaced Value3\" =",
        "        Table.ReplaceValue(",
        "            #\"Replaced Value2\",",
        "            each [PatAge] = 999 or[PatAge] = 9999 or [PatAge] = null,",
        "            -1,",
        "            (x, y, z) as nullable number =>",
        "                if y then",
        "                    z",
        "                else",
        "                    x,",
        "            {\"PatAge\"}",
        "        ),",
        "    Custom1 = Table.ReplaceValue(#\"Replaced Value3\", each [InjuryPcode]=-99, null, (x,y,z) as nullable number => if y then z else x, {\"InjuryPcode\"}),",
        "    #\"Changed Type\" =",
        "        Table.TransformColumnTypes(Custom1,{{\"PatAge\", Int64.Type}, {\"InjuryPcode\", type text}}),",
        "    #\"Split Column by Delimiter\" = Table.ExpandListColumn(Table.TransformColumns(#\"Changed Type\", {{\"OperationProcedures\", Splitter.SplitTextByDelimiter(\";\", QuoteStyle.Csv), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), \"OperationProcedures\"),",
        "    #\"Split Column by Delimiter1\" = Table.ExpandListColumn(Table.TransformColumns(#\"Split Column by Delimiter\", {{\"SevereComplications\", Splitter.SplitTextByDelimiter(\";\", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), \"SevereComplications\"),",
        "    #\"Split Column by Delimiter2\" = Table.ExpandListColumn(Table.TransformColumns(#\"Split Column by Delimiter1\", {{\"AIS\", Splitter.SplitTextByDelimiter(\";\", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), \"AIS\"),",
        "    #\"Split Column by Delimiter3\" = Table.ExpandListColumn(Table.TransformColumns(#\"Split Column by Delimiter2\", {{\"ComorbCodeIds\", Splitter.SplitTextByDelimiter(\";\", QuoteStyle.None), let itemType = (type nullable text) meta [Serialized.Text = true] in type {itemType}}}), \"ComorbCodeIds\"),",
        "    /*bufer_table = Table.Buffer(#\"Split Column by Delimiter3\"),",
        "    test =",
        "        Table.AddColumn(",
        "            bufer_table,",
        "            \"Custom\",",
        "            each",
        "                Table.FromColumns(",
        "                    {",
        "                        try Text.Split([OperationProcedures], \";\") otherwise",
        "                            {",
        "                                null",
        "                            },",
        "                        try Text.Split([SevereComplications], \";\") otherwise",
        "                            {",
        "                                null",
        "                            },",
        "                        try Text.Split([AIS], \";\") otherwise",
        "                            {",
        "                                null",
        "                            },",
        "                        try Text.Split([ComorbCodeIds], \";\") otherwise",
        "                            {",
        "                                null",
        "                            }",
        "                    },",
        "                    type table [",
        "                        OpProcCodeId = text,",
        "                        SevCompCodeId = text,",
        "                        AISCodeId = text,",
        "                        ComorbCodeId = text",
        "                    ]",
        "                ),",
        "            type table [",
        "                OpProcCodeId = text,",
        "                SevCompCodeId = text,",
        "                AISCodeId = text,",
        "                ComorbCodeId = text",
        "            ]",
        "        ),",
        "    #\"Expanded Custom\" =",
        "        Table.ExpandTableColumn(",
        "            test,",
        "            \"Custom\",",
        "            {",
        "                \"OpProcCodeId\",",
        "                \"SevCompCodeId\",",
        "                \"AISCodeId\",",
        "                \"ComorbCodeId\"",
        "            },",
        "            {",
        "                \"OpProcCodeId\",",
        "                \"SevCompCodeId\",",
        "                \"AISCodeId\",",
        "                \"ComorbCodeId\"",
        "            }",
        "        ),*/",
        "    #\"Calculated Total Hours\" = Table.TransformColumns(#\"Split Column by Delimiter3\",{{\"TimeToED\", Duration.TotalHours, type number}, {\"TimeInED\", Duration.TotalHours, type number}}),",
        "    apply_body_region_func = Table.AddColumn(#\"Calculated Total Hours\", \"BodyRegion\", each BodyRegion(_), type record),",
        "    #\"Expanded BodyRegion\" = Table.ExpandRecordColumn(apply_body_region_func, \"BodyRegion\", {\"iso\", \"head_other\", \"serious_spinal\", \"extrem_spine\", \"chest_abdo\", \"no_code\", \"multiple\"}, {\"iso\", \"head_other\", \"serious_spinal\", \"extrem_spine\", \"chest_abdo\", \"no_code\", \"multiple\"}),",
        "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Expanded BodyRegion\",{{\"iso\", Int64.Type}, {\"head_other\", Int64.Type}, {\"serious_spinal\", Int64.Type}, {\"extrem_spine\", Int64.Type}, {\"chest_abdo\", Int64.Type}, {\"no_code\", Int64.Type}, {\"multiple\", Int64.Type}}),",
        "    #\"Replaced Value4\" = Table.ReplaceValue(#\"Changed Type2\",0,null,Replacer.ReplaceValue,{\"iso\", \"head_other\", \"serious_spinal\", \"extrem_spine\", \"chest_abdo\", \"no_code\", \"multiple\"}),",
        "    #\"Unpivoted Only Selected Columns\" = Table.Unpivot(#\"Replaced Value4\", {\"iso\", \"head_other\", \"serious_spinal\", \"extrem_spine\", \"chest_abdo\", \"no_code\", \"multiple\"}, \"body_region\", \"Value\"),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Unpivoted Only Selected Columns\",{\"Value\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "hospital_features",
      "lineageTag": "a8501b6b-9642-403c-8913-52634d0a179a",
      "queryGroupId": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "text": [
        "let",
        "    Source = hospital_features_1,",
        "    #\"Capitalized Each Word\" = Table.TransformColumns(Source,{{\"country\", Text.Proper, type text}})",
        "in",
        "    #\"Capitalized Each Word\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "injury_place_old",
      "lineageTag": "f8a80579-6490-485b-a549-9f59bbf0f74c",
      "queryGroupId": "585fe2e7-fe6e-49d7-b98c-3071cd6031ac",
      "text": [
        "let",
        "    Source = icd_am,",
        "    #\"Renamed Columns\" = Table.RenameColumns(Source,{{\"ICD-10-AM Code\", \"injury_place_code_id\"}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Renamed Columns\", each Text.StartsWith([injury_place_code_id], \"Y92\")),",
        "    #\"Extracted Text After Delimiter\" = Table.TransformColumns(#\"Filtered Rows\", {{\"ICD-10 Map\", each Text.AfterDelimiter(_, \"=\"), type text}}),",
        "    table_type = TableType(#\"Extracted Text After Delimiter\"),",
        "    table_code = #table( table_type, {",
        "        {\"Y92\",\"Place of occurrence\",\"0\"},",
        "        {\"Y92.1\",\"Residential institution\",\"1\"},",
        "        {\"Y92.2\",\"School, other institution and public administrative area\",\"2\"},",
        "        {\"Y92.3\",\"Sports and athletics area\",\"3\"},",
        "        {\"Y92.4\",\"Street and highway\",\"4\"},",
        "        {\"Y92.5\",\"Trade and service area\",\"5\"},",
        "        {\"Y92.6\",\"Industrial and construction area\",\"6\"},",
        "        {\"Y92.8\",\"Other specified place of occurrence\",\"8\"}        ",
        "        } ),",
        "    Custom1 = table_code,",
        "    #\"Appended Query\" = Table.Combine({Custom1, #\"Extracted Text After Delimiter\"})",
        "in",
        "    #\"Appended Query\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "injury_activity",
      "lineageTag": "dc80e1a1-1878-4852-a24c-05c8bd9c3f7c",
      "queryGroupId": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "text": [
        "let",
        "    Source = icd_am,",
        "    #\"Renamed Columns\" = Table.RenameColumns(Source,{{\"ICD-10-AM Code\", \"InjuryActivityCodeId\"}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Renamed Columns\", each Text.StartsWith([InjuryActivityCodeId], \"U\")),",
        "    #\"Extracted Text After Delimiter\" = Table.TransformColumns(#\"Filtered Rows\", {{\"ICD-10 Map\", each Text.AfterDelimiter(_, \"=\"), type text}}),",
        "    table_type = TableType(#\"Extracted Text After Delimiter\"),",
        "    table_code = #table( table_type, {",
        "        {\"U50\",\"Team ball sports\",\"0\"},",
        "        {\"U51\",\"Team bat or stick sports\",\"0\"},",
        "        {\"U52\",\"Team water sports\",\"0\"},",
        "        {\"U53\",\"Boating sports\",\"0\"},",
        "        {\"U54\",\"Individual water sports\",\"0\"},",
        "        {\"U56\",\"Individual athletic activities\",\"0\"},",
        "        {\"U57\",\"Acrobatic sports\",\"0\"},",
        "        {\"U58\",\"Aesthetic activities\",\"0\"},",
        "        {\"U59\",\"Racquet sports\",\"0\"},",
        "        {\"U60\",\"Target and precision sports\",\"0\"},",
        "        {\"U61\",\"Combative sports\",\"0\"},",
        "        {\"U62\",\"Power sports\",\"0\"},",
        "        {\"U63\",\"Equestrian activities\",\"0\"},",
        "        {\"U64\",\"Adventure sports\",\"0\"},",
        "        {\"U65\",\"Wheeled motor sports\",\"0\"},",
        "        {\"U66\",\"Wheeled non-motored sports\",\"0\"},",
        "        {\"U67\",\"Multidiscipline sports\",\"0\"},",
        "        {\"U68\",\"Aero sports\",\"0\"},",
        "        {\"U70\",\"Other specified sport and exercise activity\",\"0\"},",
        "        {\"U73\",\"Other activity\",\"0\"}",
        "        } ),",
        "    Custom1 = table_code,",
        "    #\"Appended Query\" = Table.Combine({Custom1, #\"Extracted Text After Delimiter\"})",
        "in",
        "    #\"Appended Query\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "injury_cause",
      "lineageTag": "b0088671-d192-45c5-82c0-3488d02945c9",
      "queryGroupId": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "text": [
        "let",
        "    Source = List.RemoveMatchingItems(List.Distinct( #\"07_ATRCompleteDataset\"[CauseICDCodeId]), {\"\"}),",
        "    #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Converted to Table\",{{\"Column1\", \"cause_icd_code_id\"}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\",{{\"cause_icd_code_id\", type text}}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Changed Type\", {\"cause_icd_code_id\"}, icd_am, {\"ICD-10-AM Code\"}, \"icd_am\", JoinKind.LeftOuter),",
        "    #\"Expanded icd_am\" = Table.ExpandTableColumn(#\"Merged Queries\", \"icd_am\", {\"ICD-10 code descriptor\", \"ICD-10 Map\"}, {\"ICD-10 code descriptor\", \"ICD-10 Map\"}),",
        "    table_type = TableType(#\"Expanded icd_am\"),",
        "    table_code = #table( table_type, {",
        "        {\"U50\",\"Team ball sports\",\"0\"},",
        "        {\"U51\",\"Team bat or stick sports\",\"0\"},",
        "        {\"U52\",\"Team water sports\",\"0\"},",
        "        {\"U53\",\"Boating sports\",\"0\"},",
        "        {\"U54\",\"Individual water sports\",\"0\"},",
        "        {\"U56\",\"Individual athletic activities\",\"0\"},",
        "        {\"U57\",\"Acrobatic sports\",\"0\"},",
        "        {\"U58\",\"Aesthetic activities\",\"0\"},",
        "        {\"U59\",\"Racquet sports\",\"0\"},",
        "        {\"U60\",\"Target and precision sports\",\"0\"},",
        "        {\"U61\",\"Combative sports\",\"0\"},",
        "        {\"U62\",\"Power sports\",\"0\"},",
        "        {\"U63\",\"Equestrian activities\",\"0\"},",
        "        {\"U64\",\"Adventure sports\",\"0\"},",
        "        {\"U65\",\"Wheeled motor sports\",\"0\"},",
        "        {\"U66\",\"Wheeled non-motored sports\",\"0\"},",
        "        {\"U67\",\"Multidiscipline sports\",\"0\"},",
        "        {\"U68\",\"Aero sports\",\"0\"},",
        "        {\"U70\",\"Other specified sport and exercise activity\",\"0\"},",
        "        {\"U73\",\"Other activity\",\"0\"}",
        "        } ),",
        "    ",
        "    #\"Appended Query\" = #\"Expanded icd_am\"",
        "in",
        "    #\"Appended Query\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "body_region",
      "lineageTag": "4b73e34f-1fbd-4231-8016-53abaffcfd67",
      "queryGroupId": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "text": [
        "let",
        "    Source = #table(type table [body_region=text],{{\"iso\"},{\"head_other\"},{\"serious_spinal\"},{\"extrem_spine\"},{\"chest_abdo\"},{\"no_code\"},{\"multiple\"}}),",
        "    Custom1 = Source[body_region],",
        "    description = {\"Isolated head injury\",\"Head and other injuries\",\"Serious spinal cord injury\",\"Extremity and/or spine injuries only\",\"Chest and/or abdominal injuries only\",\"No coded injuries\",\"Multiple injuries, burns or other\"},",
        "    code = {\"iso\",\"head_other\",\"serious_spinal\",\"extrem_spine\",\"chest_abdo\",\"no_code\",\"multiple\"},",
        "    Custom4 = #table(type table [body_region=text, description=text], List.Zip({code,description})),",
        "    #\"Added Index\" = Table.AddIndexColumn(Custom4, \"sort_body_region\", 1, 1, Int64.Type)",
        "in",
        "    #\"Added Index\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "01_TotalCasesPerHospitalAndFinancialYear",
      "lineageTag": "2d631906-e335-44e9-ab44-4f7127acafe3",
      "queryGroupId": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "text": [
        "let",
        "    Source = Excel.Workbook(File.Contents(data_path&\"01_TotalCasesPerHospitalAndFinancialYear.xlsx\"), null, true),",
        "    Query_Sheet = Source{[Item=\"Query\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Query_Sheet, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"InstCodeId\", type text}, {\"HospitalName\", type text}, {\"FinancialYear\", Int64.Type}, {\"Q1\", Int64.Type}, {\"Q2\", Int64.Type}, {\"Q3\", Int64.Type}, {\"Q4\", Int64.Type}, {\"TotalForYear\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "06_ATRDataExported_tbl_precomorb",
      "lineageTag": "41d9d3bb-0c2c-46c0-b444-59a4a53e78aa",
      "queryGroupId": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "text": [
        "let",
        "    Source = Excel.Workbook(File.Contents(data_path&\"06_ATRDataExported.xls\"), null, true),",
        "    tbl_precomorb_Sheet = Source{[Item=\"tbl_precomorb\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(tbl_precomorb_Sheet, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"RegId\", Int64.Type}, {\"ComorbCodeId\", type text}, {\"UpdatedBy\", type text}, {\"UpdatedDt\", type datetime}, {\"CreatedBy\", type text}, {\"CreatedDt\", type datetime}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Unknown",
      "isHidden": false
    },
    {
      "name": "06_ATRDataExported_tbl_prehospital",
      "lineageTag": "3887b755-09ed-40c3-9351-5ff3d5d48baa",
      "queryGroupId": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "text": [
        "let",
        "    Source = Excel.Workbook(File.Contents(data_path&\"06_ATRDataExported.xls\"), null, true),",
        "    tbl_prehospital_Sheet = Source{[Item=\"tbl_prehospital\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(tbl_prehospital_Sheet, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"PreHospId\", Int64.Type}, {\"RegId\", Int64.Type}, {\"TransModeCodeId\", Int64.Type}, {\"AmbArrDateTime\", type datetime}, {\"OthHospTransCodeId\", Int64.Type}, {\"PreBloodTransfCodeId\", Int64.Type}, {\"PreCPRCodeId\", Int64.Type}, {\"PreArrestCodeId\", Int64.Type}, {\"FirstPulse\", Int64.Type}, {\"FirstSysBP\", Int64.Type}, {\"FirstRespRate\", Int64.Type}, {\"FirstTemp\", type number}, {\"FirstGCSEyeCodeId\", Int64.Type}, {\"FirstGCSVceCodeId\", Int64.Type}, {\"FirstGCSMtrCodeId\", Int64.Type}, {\"FirstTotalGCS\", Int64.Type}, {\"UpdatedBy\", type text}, {\"UpdatedDt\", type datetime}, {\"CreatedBy\", type text}, {\"CreatedDt\", type datetime}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Unknown",
      "isHidden": false
    },
    {
      "name": "06_ATRDataExported_tbl_refhospital",
      "lineageTag": "53a16cd7-ee6a-448a-b4e6-5a0e14233e9d",
      "queryGroupId": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "text": [
        "let",
        "    Source = Excel.Workbook(File.Contents(data_path&\"06_ATRDataExported.xls\"), null, true),",
        "    tbl_refhospital_Sheet = Source{[Item=\"tbl_refhospital\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(tbl_refhospital_Sheet, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"RegId\", Int64.Type}, {\"RefHospCodeId\", type text}, {\"RefHospArrDt\", type datetime}, {\"RefHospDeptDt\", type datetime}, {\"RefHospTranspModeCodeId\", Int64.Type}, {\"UpdatedBy\", type text}, {\"UpdatedDt\", type datetime}, {\"CreatedBy\", type text}, {\"CreatedDt\", type datetime}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "06_ATRDataExported_tbl_safetydvc",
      "lineageTag": "5b7bd45f-c28b-494d-94cb-894452e08931",
      "queryGroupId": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "text": [
        "let",
        "    Source = Excel.Workbook(File.Contents(data_path&\"06_ATRDataExported.xls\"), null, true),",
        "    tbl_safetydvc_Sheet = Source{[Item=\"tbl_safetydvc\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(tbl_safetydvc_Sheet, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"RegId\", Int64.Type}, {\"SafeDvcCodeId\", Int64.Type}, {\"UpdatedBy\", type text}, {\"UpdatedDt\", type datetime}, {\"CreatedBy\", type text}, {\"CreatedDt\", type datetime}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Unknown",
      "isHidden": false
    },
    {
      "name": "07_ATRCompleteDataset",
      "lineageTag": "d483fa6c-fc92-46b8-9ad6-c8de7ac3123c",
      "queryGroupId": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "  Source = Csv.Document(",
        "    File.Contents(data_path & \"07_ATRCompleteDataset.csv\"), ",
        "    [Delimiter = \",\", Columns = null, Encoding = 1252, QuoteStyle = QuoteStyle.Csv]",
        "  ), ",
        "  #\"Cleaned Text\" = Table.TransformColumns(",
        "    Source, ",
        "    {",
        "      {\"Column1\", Text.Clean, type text}, ",
        "      {\"Column2\", Text.Clean, type text}, ",
        "      {\"Column3\", Text.Clean, type text}, ",
        "      {\"Column4\", Text.Clean, type text}, ",
        "      {\"Column5\", Text.Clean, type text}, ",
        "      {\"Column6\", Text.Clean, type text}, ",
        "      {\"Column7\", Text.Clean, type text}, ",
        "      {\"Column8\", Text.Clean, type text}, ",
        "      {\"Column9\", Text.Clean, type text}, ",
        "      {\"Column10\", Text.Clean, type text}, ",
        "      {\"Column11\", Text.Clean, type text}, ",
        "      {\"Column12\", Text.Clean, type text}, ",
        "      {\"Column13\", Text.Clean, type text}, ",
        "      {\"Column14\", Text.Clean, type text}, ",
        "      {\"Column15\", Text.Clean, type text}, ",
        "      {\"Column16\", Text.Clean, type text}, ",
        "      {\"Column17\", Text.Clean, type text}, ",
        "      {\"Column18\", Text.Clean, type text}, ",
        "      {\"Column19\", Text.Clean, type text}, ",
        "      {\"Column20\", Text.Clean, type text}, ",
        "      {\"Column21\", Text.Clean, type text}, ",
        "      {\"Column22\", Text.Clean, type text}, ",
        "      {\"Column23\", Text.Clean, type text}, ",
        "      {\"Column24\", Text.Clean, type text}, ",
        "      {\"Column25\", Text.Clean, type text}, ",
        "      {\"Column26\", Text.Clean, type text}, ",
        "      {\"Column27\", Text.Clean, type text}, ",
        "      {\"Column28\", Text.Clean, type text}, ",
        "      {\"Column29\", Text.Clean, type text}, ",
        "      {\"Column30\", Text.Clean, type text}, ",
        "      {\"Column31\", Text.Clean, type text}, ",
        "      {\"Column32\", Text.Clean, type text}, ",
        "      {\"Column33\", Text.Clean, type text}, ",
        "      {\"Column34\", Text.Clean, type text}, ",
        "      {\"Column35\", Text.Clean, type text}, ",
        "      {\"Column36\", Text.Clean, type text}, ",
        "      {\"Column37\", Text.Clean, type text}, ",
        "      {\"Column38\", Text.Clean, type text}, ",
        "      {\"Column39\", Text.Clean, type text}, ",
        "      {\"Column40\", Text.Clean, type text}, ",
        "      {\"Column41\", Text.Clean, type text}, ",
        "      {\"Column42\", Text.Clean, type text}, ",
        "      {\"Column43\", Text.Clean, type text}, ",
        "      {\"Column44\", Text.Clean, type text}, ",
        "      {\"Column45\", Text.Clean, type text}, ",
        "      {\"Column46\", Text.Clean, type text}, ",
        "      {\"Column47\", Text.Clean, type text}, ",
        "      {\"Column48\", Text.Clean, type text}, ",
        "      {\"Column49\", Text.Clean, type text}, ",
        "      {\"Column50\", Text.Clean, type text}, ",
        "      {\"Column51\", Text.Clean, type text}, ",
        "      {\"Column52\", Text.Clean, type text}, ",
        "      {\"Column53\", Text.Clean, type text}, ",
        "      {\"Column54\", Text.Clean, type text}, ",
        "      {\"Column55\", Text.Clean, type text}, ",
        "      {\"Column56\", Text.Clean, type text}, ",
        "      {\"Column57\", Text.Clean, type text}, ",
        "      {\"Column58\", Text.Clean, type text}, ",
        "      {\"Column59\", Text.Clean, type text}, ",
        "      {\"Column60\", Text.Clean, type text}, ",
        "      {\"Column61\", Text.Clean, type text}, ",
        "      {\"Column62\", Text.Clean, type text}, ",
        "      {\"Column63\", Text.Clean, type text}, ",
        "      {\"Column64\", Text.Clean, type text}, ",
        "      {\"Column65\", Text.Clean, type text}, ",
        "      {\"Column66\", Text.Clean, type text}, ",
        "      {\"Column67\", Text.Clean, type text}, ",
        "      {\"Column68\", Text.Clean, type text}, ",
        "      {\"Column69\", Text.Clean, type text}, ",
        "      {\"Column70\", Text.Clean, type text}, ",
        "      {\"Column71\", Text.Clean, type text}, ",
        "      {\"Column72\", Text.Clean, type text}, ",
        "      {\"Column73\", Text.Clean, type text}, ",
        "      {\"Column74\", Text.Clean, type text}, ",
        "      {\"Column75\", Text.Clean, type text}, ",
        "      {\"Column76\", Text.Clean, type text}, ",
        "      {\"Column77\", Text.Clean, type text}, ",
        "      {\"Column78\", Text.Clean, type text}, ",
        "      {\"Column79\", Text.Clean, type text}, ",
        "      {\"Column80\", Text.Clean, type text}, ",
        "      {\"Column81\", Text.Clean, type text}, ",
        "      {\"Column82\", Text.Clean, type text}, ",
        "      {\"Column83\", Text.Clean, type text}, ",
        "      {\"Column84\", Text.Clean, type text}, ",
        "      {\"Column85\", Text.Clean, type text}, ",
        "      {\"Column86\", Text.Clean, type text}, ",
        "      {\"Column87\", Text.Clean, type text}, ",
        "      {\"Column88\", Text.Clean, type text}, ",
        "      {\"Column89\", Text.Clean, type text}, ",
        "      {\"Column90\", Text.Clean, type text}, ",
        "      {\"Column91\", Text.Clean, type text}, ",
        "      {\"Column92\", Text.Clean, type text}, ",
        "      {\"Column93\", Text.Clean, type text}, ",
        "      {\"Column94\", Text.Clean, type text}, ",
        "      {\"Column95\", Text.Clean, type text}, ",
        "      {\"Column96\", Text.Clean, type text}, ",
        "      {\"Column97\", Text.Clean, type text}, ",
        "      {\"Column98\", Text.Clean, type text}, ",
        "      {\"Column99\", Text.Clean, type text}, ",
        "      {\"Column100\", Text.Clean, type text}, ",
        "      {\"Column101\", Text.Clean, type text}, ",
        "      {\"Column102\", Text.Clean, type text}, ",
        "      {\"Column103\", Text.Clean, type text}, ",
        "      {\"Column104\", Text.Clean, type text}, ",
        "      {\"Column105\", Text.Clean, type text}, ",
        "      {\"Column106\", Text.Clean, type text}, ",
        "      {\"Column107\", Text.Clean, type text}, ",
        "      {\"Column108\", Text.Clean, type text}, ",
        "      {\"Column109\", Text.Clean, type text}, ",
        "      {\"Column110\", Text.Clean, type text}",
        "    }",
        "  ), ",
        "  #\"Trimmed Text\" = Table.TransformColumns(",
        "    #\"Cleaned Text\", ",
        "    {",
        "      {\"Column1\", Text.Trim, type text}, ",
        "      {\"Column2\", Text.Trim, type text}, ",
        "      {\"Column3\", Text.Trim, type text}, ",
        "      {\"Column4\", Text.Trim, type text}, ",
        "      {\"Column5\", Text.Trim, type text}, ",
        "      {\"Column6\", Text.Trim, type text}, ",
        "      {\"Column7\", Text.Trim, type text}, ",
        "      {\"Column8\", Text.Trim, type text}, ",
        "      {\"Column9\", Text.Trim, type text}, ",
        "      {\"Column10\", Text.Trim, type text}, ",
        "      {\"Column11\", Text.Trim, type text}, ",
        "      {\"Column12\", Text.Trim, type text}, ",
        "      {\"Column13\", Text.Trim, type text}, ",
        "      {\"Column14\", Text.Trim, type text}, ",
        "      {\"Column15\", Text.Trim, type text}, ",
        "      {\"Column16\", Text.Trim, type text}, ",
        "      {\"Column17\", Text.Trim, type text}, ",
        "      {\"Column18\", Text.Trim, type text}, ",
        "      {\"Column19\", Text.Trim, type text}, ",
        "      {\"Column20\", Text.Trim, type text}, ",
        "      {\"Column21\", Text.Trim, type text}, ",
        "      {\"Column22\", Text.Trim, type text}, ",
        "      {\"Column23\", Text.Trim, type text}, ",
        "      {\"Column24\", Text.Trim, type text}, ",
        "      {\"Column25\", Text.Trim, type text}, ",
        "      {\"Column26\", Text.Trim, type text}, ",
        "      {\"Column27\", Text.Trim, type text}, ",
        "      {\"Column28\", Text.Trim, type text}, ",
        "      {\"Column29\", Text.Trim, type text}, ",
        "      {\"Column30\", Text.Trim, type text}, ",
        "      {\"Column31\", Text.Trim, type text}, ",
        "      {\"Column32\", Text.Trim, type text}, ",
        "      {\"Column33\", Text.Trim, type text}, ",
        "      {\"Column34\", Text.Trim, type text}, ",
        "      {\"Column35\", Text.Trim, type text}, ",
        "      {\"Column36\", Text.Trim, type text}, ",
        "      {\"Column37\", Text.Trim, type text}, ",
        "      {\"Column38\", Text.Trim, type text}, ",
        "      {\"Column39\", Text.Trim, type text}, ",
        "      {\"Column40\", Text.Trim, type text}, ",
        "      {\"Column41\", Text.Trim, type text}, ",
        "      {\"Column42\", Text.Trim, type text}, ",
        "      {\"Column43\", Text.Trim, type text}, ",
        "      {\"Column44\", Text.Trim, type text}, ",
        "      {\"Column45\", Text.Trim, type text}, ",
        "      {\"Column46\", Text.Trim, type text}, ",
        "      {\"Column47\", Text.Trim, type text}, ",
        "      {\"Column48\", Text.Trim, type text}, ",
        "      {\"Column49\", Text.Trim, type text}, ",
        "      {\"Column50\", Text.Trim, type text}, ",
        "      {\"Column51\", Text.Trim, type text}, ",
        "      {\"Column52\", Text.Trim, type text}, ",
        "      {\"Column53\", Text.Trim, type text}, ",
        "      {\"Column54\", Text.Trim, type text}, ",
        "      {\"Column55\", Text.Trim, type text}, ",
        "      {\"Column56\", Text.Trim, type text}, ",
        "      {\"Column57\", Text.Trim, type text}, ",
        "      {\"Column58\", Text.Trim, type text}, ",
        "      {\"Column59\", Text.Trim, type text}, ",
        "      {\"Column60\", Text.Trim, type text}, ",
        "      {\"Column61\", Text.Trim, type text}, ",
        "      {\"Column62\", Text.Trim, type text}, ",
        "      {\"Column63\", Text.Trim, type text}, ",
        "      {\"Column64\", Text.Trim, type text}, ",
        "      {\"Column65\", Text.Trim, type text}, ",
        "      {\"Column66\", Text.Trim, type text}, ",
        "      {\"Column67\", Text.Trim, type text}, ",
        "      {\"Column68\", Text.Trim, type text}, ",
        "      {\"Column69\", Text.Trim, type text}, ",
        "      {\"Column70\", Text.Trim, type text}, ",
        "      {\"Column71\", Text.Trim, type text}, ",
        "      {\"Column72\", Text.Trim, type text}, ",
        "      {\"Column73\", Text.Trim, type text}, ",
        "      {\"Column74\", Text.Trim, type text}, ",
        "      {\"Column75\", Text.Trim, type text}, ",
        "      {\"Column76\", Text.Trim, type text}, ",
        "      {\"Column77\", Text.Trim, type text}, ",
        "      {\"Column78\", Text.Trim, type text}, ",
        "      {\"Column79\", Text.Trim, type text}, ",
        "      {\"Column80\", Text.Trim, type text}, ",
        "      {\"Column81\", Text.Trim, type text}, ",
        "      {\"Column82\", Text.Trim, type text}, ",
        "      {\"Column83\", Text.Trim, type text}, ",
        "      {\"Column84\", Text.Trim, type text}, ",
        "      {\"Column85\", Text.Trim, type text}, ",
        "      {\"Column86\", Text.Trim, type text}, ",
        "      {\"Column87\", Text.Trim, type text}, ",
        "      {\"Column88\", Text.Trim, type text}, ",
        "      {\"Column89\", Text.Trim, type text}, ",
        "      {\"Column90\", Text.Trim, type text}, ",
        "      {\"Column91\", Text.Trim, type text}, ",
        "      {\"Column92\", Text.Trim, type text}, ",
        "      {\"Column93\", Text.Trim, type text}, ",
        "      {\"Column94\", Text.Trim, type text}, ",
        "      {\"Column95\", Text.Trim, type text}, ",
        "      {\"Column96\", Text.Trim, type text}, ",
        "      {\"Column97\", Text.Trim, type text}, ",
        "      {\"Column98\", Text.Trim, type text}, ",
        "      {\"Column99\", Text.Trim, type text}, ",
        "      {\"Column100\", Text.Trim, type text}, ",
        "      {\"Column101\", Text.Trim, type text}, ",
        "      {\"Column102\", Text.Trim, type text}, ",
        "      {\"Column103\", Text.Trim, type text}, ",
        "      {\"Column104\", Text.Trim, type text}, ",
        "      {\"Column105\", Text.Trim, type text}, ",
        "      {\"Column106\", Text.Trim, type text}, ",
        "      {\"Column107\", Text.Trim, type text}, ",
        "      {\"Column108\", Text.Trim, type text}, ",
        "      {\"Column109\", Text.Trim, type text}, ",
        "      {\"Column110\", Text.Trim, type text}",
        "    }",
        "  ), ",
        "  #\"Promoted Headers\" = Table.PromoteHeaders(#\"Trimmed Text\", [PromoteAllScalars = true]), ",
        "  #\"Replaced Value\" = Table.ReplaceValue(",
        "    #\"Promoted Headers\", ",
        "    \"-99\", ",
        "    \"99\", ",
        "    (x, y, z) as text => if x = y then z else x, ",
        "    {\"ISS\", \"DischargeDest\"}",
        "  ), ",
        "  #\"Changed Type\" = Table.TransformColumnTypes(",
        "    #\"Replaced Value\", ",
        "    {",
        "      {\"RegId\", Int64.Type}, ",
        "      {\"InstitutionID\", type text}, ",
        "      {\"TraumaNo\", type text}, ",
        "      {\"IncidentNo\", type text}, ",
        "      {\"ICDDiag24HR\", Int64.Type}, ",
        "      {\"DOB\", type datetime}, ",
        "      {\"Age\", Int64.Type}, ",
        "      {\"Sex\", Int64.Type}, ",
        "      {\"DOIJ\", type datetime}, ",
        "      //{\"InjuryDt\", type datetime}, ",
        "      //{\"InjuryTime\", type time}, ",
        "      //{\"CauseICDCodeId\", type text}, ",
        "      //{\"InjuryTypeCodeId\", Int64.Type}, ",
        "      //{\"InjuryIntentCodeId\", Int64.Type}, ",
        "      {\"InjuryPcode\", Int64.Type}, ",
        "      //{\"InjuryPlaceCodeId\", type text}, ",
        "      //{\"TransModeCodeId\", Int64.Type}, ",
        "      {\"AmbulanceArrTime\", type datetime}, ",
        "      //{\"AmbArrDate\", type datetime}, ",
        "      //{\"AmbArrTime\", type time}, ",
        "      {\"OthHospTransCodeId\", Int64.Type}, ",
        "      {\"TotalHospTransfer\", Int64.Type}, ",
        "      {\"RefHospID1\", type text}, ",
        "      {\"RefHospArrDt1\", type datetime}, ",
        "      {\"RefHospDeptDt1\", type datetime}, ",
        "      {\"RefHospTranspModeCodeId1\", Int64.Type}, ",
        "      {\"RefHospID2\", type text}, ",
        "      {\"RefHospArrDt2\", type datetime}, ",
        "      {\"RefHospDeptDt2\", type datetime}, ",
        "      {\"RefHospTranspModeCodeId2\", Int64.Type}, ",
        "      {\"RefHospID3\", type text}, ",
        "      {\"RefHospArrDt3\", type datetime}, ",
        "      {\"RefHospDeptDt3\", type datetime}, ",
        "      {\"RefHospTranspModeCodeId3\", type text}, ",
        "      {\"ArrDtTime\", type datetime}, ",
        "      {\"ArrDt\", type datetime}, ",
        "      {\"ArrTime\", type time}, ",
        "      {\"ArrBloodAC\", type number}, ",
        "      {\"PreBloodTransfCodeId\", Int64.Type}, ",
        "      {\"PreCPRCodeId\", Int64.Type}, ",
        "      {\"PreArrestCodeId\", Int64.Type}, ",
        "      {\"FirstPulse\", Int64.Type}, ",
        "      {\"FirstSysBP\", Int64.Type}, ",
        "      {\"FirstRespRate\", Int64.Type}, ",
        "      {\"FirstTemp\", type number}, ",
        "      {\"FirstGCSEyeCodeId\", Int64.Type}, ",
        "      {\"FirstGCSVceCodeId\", Int64.Type}, ",
        "      {\"FirstGCSMtrCodeId\", Int64.Type}, ",
        "      {\"FirstTotalGCS\", Int64.Type}, ",
        "      {\"ArrPulse\", Int64.Type}, ",
        "      {\"ArrSysBP\", Int64.Type}, ",
        "      {\"ArrRespRate\", Int64.Type}, ",
        "      {\"ArrTemp\", type number}, ",
        "      {\"ArrGCSEyeCodeId\", Int64.Type}, ",
        "      {\"ArrGCSVceCodeId\", Int64.Type}, ",
        "      {\"ArrGCSMtrCodeId\", Int64.Type}, ",
        "      {\"ArrTotalGCS\", Int64.Type}, ",
        "      {\"ArrCPRCodeId\", Int64.Type}, ",
        "      {\"ArrBloodTransfCodeId\", Int64.Type}, ",
        "      {\"ArrIntubCodeId\", Int64.Type}, ",
        "      {\"ArrIntubDt\", type datetime}, ",
        "      {\"ArrRespQualCodeId\", Int64.Type}, ",
        "      {\"FirstArteBaseEx\", Int64.Type}, ",
        "      {\"FirstINR\", type number}, ",
        "      {\"EDDischargeDtTime\", type datetime}, ",
        "      {\"EDDischargeDt\", type datetime}, ",
        "      {\"EDDischargeTime\", type time}, ",
        "      {\"EDDispCodeId\", Int64.Type}, ",
        "      {\"DischargeDtTime\", type datetime}, ",
        "      {\"DischargeDt\", type datetime}, ",
        "      {\"DischargeTime\", type time}, ",
        "      {\"DischargeDestCodeId\", Int64.Type}, ",
        "      {\"ISS\", Int64.Type}, ",
        "      {\"LOS\", type number}, ",
        "      {\"ICULOS\", type number}, ",
        "      {\"ComorbCodeIds\", type text}, ",
        "      {\"InjuryActivityCodeId\", type text}, ",
        "      {\"EventDesc\", type text}, ",
        "      {\"SafetyDevices\", type text}, ",
        "      {\"AIS\", type text}, ",
        "      {\"AISCount\", type text}, ",
        "      {\"AIS_BodyRegion\", Int64.Type}, ",
        "      {\"Abd_MaxAIS\", Int64.Type}, ",
        "      {\"Abdo\", Int64.Type}, ",
        "      {\"Ext_MaxAIS\", Int64.Type}, ",
        "      {\"External\", Int64.Type}, ",
        "      {\"Face_MaxAIS\", Int64.Type}, ",
        "      {\"Face\", Int64.Type}, ",
        "      {\"Head_MaxAIS\", Int64.Type}, ",
        "      {\"Head\", Int64.Type}, ",
        "      {\"LoEx_MaxAIS\", Int64.Type}, ",
        "      {\"Lowerextrem\", Int64.Type}, ",
        "      {\"Neck_MaxAIS\", Int64.Type}, ",
        "      {\"Neck\", Int64.Type}, ",
        "      {\"Spine_MaxAIS\", Int64.Type}, ",
        "      {\"Spine\", Int64.Type}, ",
        "      {\"Thor_MaxAIS\", Int64.Type}, ",
        "      {\"Thorax\", Int64.Type}, ",
        "      {\"UpEx_MaxAIS\", Int64.Type}, ",
        "      {\"Upperextrem\", Int64.Type}, ",
        "      {\"NISS\", Int64.Type}, ",
        "      {\"SevereComplications\", type text}, ",
        "      {\"OperationProcedures\", type text}, ",
        "      {\"VentDays\", Int64.Type}, ",
        "      {\"ED_LOS\", type number}, ",
        "      {\"ATR_AGE\", Int64.Type}, ",
        "      {\"ATR_ISS\", Int64.Type}",
        "    }",
        "  ), ",
        "  #\"Extracted Date\" = Table.TransformColumns(",
        "    #\"Changed Type\", ",
        "    {",
        "      {\"PatDOB\", DateTime.Date, type date}, ",
        "      {\"InjuryDt\", DateTime.Date, type date}, ",
        "      {\"AmbArrDate\", DateTime.Date, type date}, ",
        "      {\"RefHospArrDt1\", DateTime.Date, type date}, ",
        "      {\"RefHospDeptDt1\", DateTime.Date, type date}, ",
        "      {\"RefHospArrDt2\", DateTime.Date, type date}, ",
        "      {\"RefHospDeptDt2\", DateTime.Date, type date}, ",
        "      {\"RefHospArrDt3\", DateTime.Date, type date}, ",
        "      {\"RefHospDeptDt3\", DateTime.Date, type date}, ",
        "      {\"ArrDt\", DateTime.Date, type date}, ",
        "      {\"EDDischargeDt\", DateTime.Date, type date}, ",
        "      {\"DischargeDt\", DateTime.Date, type date}",
        "    }",
        "  ), ",
        "  #\"Extracted Text Between Delimiters\" = Table.TransformColumns(",
        "    #\"Extracted Date\", ",
        "    {",
        "      {\"EventDesc\", each Text.BetweenDelimiters(_, \"\"\"\", \"\"\"\"), type text}, ",
        "      {\"AIS\", each Text.BetweenDelimiters(_, \"\"\"\", \"\"\"\"), type text}, ",
        "      {\"AISCount\", each Text.BetweenDelimiters(_, \"\"\"\", \"\"\"\"), type text}, ",
        "      {\"OperationProcedures\", each Text.BetweenDelimiters(_, \"\"\"\", \"\"\"\"), type text}, ",
        "      {\"SafetyDevices\", each Text.BetweenDelimiters(_, \"\"\"\", \"\"\"\"), type text}, ",
        "      {\"SevereComplications\", each Text.BetweenDelimiters(_, \"\"\"\", \"\"\"\"), type text}, ",
        "      {\"ComorbCodeIds\", each Text.BetweenDelimiters(_, \"\"\"\", \"\"\"\"), type text}",
        "    }",
        "  ), ",
        "  #\"Changed Type1\" = Table.TransformColumnTypes(",
        "    #\"Extracted Text Between Delimiters\", ",
        "    {{\"AISCount\", Int64.Type}}",
        "  )",
        "in",
        "  #\"Changed Type1\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "icd_am",
      "lineageTag": "0ad2adee-7652-489c-be89-01403e6554ec",
      "queryGroupId": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "text": [
        "let",
        "    Source = Csv.Document(Web.Contents(\"https://www.ihacpa.gov.au/sites/default/files/2022-08/e18_icd-10-am_eleventh_edition_to_icd-10_2016_0.txt\"),[Delimiter=\",\", Columns=null, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}, {\"Column2\", type text}, {\"Column3\", type text}}),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Changed Type\", [PromoteAllScalars=true])",
        "in",
        "    #\"Promoted Headers\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "hospital_features_1",
      "lineageTag": "7bde0b26-8c73-4fc9-98ec-458d498d9450",
      "queryGroupId": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(data_path &\"Hospital features.csv\"),[Delimiter=\",\", Columns=7, Encoding=1252, QuoteStyle=QuoteStyle.None]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"InstCodeId\", type text}, {\"HospitalName\", type text}, {\"lat\", type number}, {\"long\", type number}, {\"postcode\", type text}, {\"state\", type text}, {\"country\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "TableType",
      "lineageTag": "4a7dce2a-aa5b-4161-af1c-9d3b1223f1bf",
      "queryGroupId": "9a9d4d75-1082-453c-8585-e371dee4871d",
      "text": [
        "let",
        "  Source = (InputTable as table) as type =>",
        "    let",
        "      Source = Table.Schema(InputTable),",
        "      SortRows = Table.Sort(Source, {{\"Position\", Order.Ascending}}),",
        "      AddCustom = Table.AddColumn(",
        "        SortRows,",
        "        \"TypeNames\",",
        "        each Expression.Identifier([Name]) & \" = \" & [Kind]",
        "      ),",
        "      TypeString = \"type table [\" & Text.Combine(AddCustom[TypeNames], \", \") & \"]\",",
        "      Output = Expression.Evaluate(TypeString)",
        "    in",
        "      Output",
        "in",
        "  Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "BodyRegion",
      "lineageTag": "6b458418-9f5f-4d6c-bcbd-8e234fe981a2",
      "queryGroupId": "9a9d4d75-1082-453c-8585-e371dee4871d",
      "text": [
        "let",
        "  Source = (_) =>",
        "    let",
        "      UE_NN = [Upperextrem] <> null,",
        "      LE_NN = [Lowerextrem] <> null,",
        "      S_NN = [Spine] <> null,",
        "      H_NN = [Head] <> null,",
        "      F_NN = [Face] <> null,",
        "      N_NN = [Neck] <> null,",
        "      E_NN = [External] <> null,",
        "      T_NN = [Thorax] <> null,",
        "      A_NN = [Abdo] <> null,",
        "      ortho =",
        "        if ([Upperextrem] > 1 and UE_NN)",
        "          or ([Lowerextrem] > 1 and LE_NN)",
        "          or ([Spine] = 2 and S_NN)",
        "          or ([Spine] = 3 and S_NN)",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      sci = if ([Spine] > 3 and S_NN) then true else false,",
        "      heads = if ([Head] > 2 and H_NN) then true else false,",
        "      othchestabdo =",
        "        if (",
        "          ([Thorax] = 2 and [Abdo] = 2)",
        "            or ([Thorax] = 2 and [Abdo] = 1)",
        "            or ([Thorax] = 2 and A_NN)",
        "            or ([Abdo] = 2 and [Thorax] = 1)",
        "            or ([Abdo] = 2 and T_NN)",
        "        )",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      otherinj =",
        "        if (",
        "          ([Head] = 2 and H_NN)",
        "            or ([Face] > 1 and F_NN)",
        "            or ([Neck] > 1 and N_NN)",
        "            or ([External] > 1 and E_NN)",
        "            or othchestabdo",
        "            and not sci",
        "        )",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      thoraxoth =",
        "        if (([Thorax] > 2 and T_NN) and (heads or ortho or otherinj) and not sci) then",
        "          true",
        "        else",
        "          false,",
        "      abdooth =",
        "        if (([Abdo] > 2 and A_NN) and (heads or ortho or otherinj) and not sci) then",
        "          true",
        "        else",
        "          false,",
        "      chestabdo =",
        "        if (",
        "          (",
        "            ([Thorax] > 2 and T_NN and [Abdo] > 1 and A_NN)",
        "              or ([Abdo] > 2 and A_NN and [Thorax] > 1 and T_NN)",
        "          )",
        "            and ([Head] < 2 or H_NN)",
        "            and not thoraxoth",
        "            and not abdooth",
        "            and not ortho",
        "            and not otherinj",
        "            and not sci",
        "        )",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      isothorax =",
        "        if (",
        "          ([Thorax] > 2 and T_NN)",
        "            and ([Head] < 2 or [Head] = null)",
        "            and ([Abdo] > 2 or [Abdo] = null)",
        "            and not thoraxoth",
        "            and not abdooth",
        "            and not ortho",
        "            and not otherinj",
        "            and not sci",
        "        )",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      isoabdo =",
        "        if (",
        "          ([Abdo] > 2 and A_NN)",
        "            and ([Head] < 2 or [Head] = null)",
        "            and ([Thorax] < 2 or [Thorax] = null)",
        "            and not abdooth",
        "            and not ortho",
        "            and not otherinj",
        "            and not isothorax",
        "            and not sci",
        "        )",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      abdches =",
        "        if ((isothorax and isoabdo) or (not isothorax and isoabdo) or (isothorax and not isoabdo)) then",
        "          true",
        "        else",
        "          false,",
        "      noinj =",
        "        if (not (H_NN or F_NN or N_NN or T_NN or A_NN or S_NN or UE_NN or LE_NN or E_NN)) then",
        "          true",
        "        else",
        "          false,",
        "      Isolated_head_injury =",
        "        if (",
        "          heads",
        "            and not sci",
        "            and not otherinj",
        "            and not thoraxoth",
        "            and not abdooth",
        "            and not chestabdo",
        "            and not isothorax",
        "            and not isoabdo",
        "            and not abdches",
        "            and not ortho",
        "        )",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      Head_and_other_injuries =",
        "        if (",
        "          heads",
        "            and (otherinj or ortho or thoraxoth or abdooth or chestabdo or isothorax or isoabdo)",
        "            and not sci",
        "        )",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      Serious_spinal_cord_injury = if sci then true else false,",
        "      Extremity_and_or_spine_injuries_only =",
        "        if (",
        "          ortho",
        "            and not heads",
        "            and not sci",
        "            and not thoraxoth",
        "            and not abdooth",
        "            and not chestabdo",
        "            and not isothorax",
        "            and not isoabdo",
        "            and not abdches",
        "            and not otherinj",
        "        )",
        "        then",
        "          true",
        "        else",
        "          false,",
        "      Chest_and_or_abdominal_injuries_only =",
        "        if (abdches and not heads and not sci and not ortho and not otherinj) then",
        "          true",
        "        else",
        "          false,",
        "      No_coded_injuries = if noinj then true else false,",
        "      Multiple_injuries_burns_or_other =",
        "        if not Isolated_head_injury",
        "          and not Head_and_other_injuries",
        "          and not Serious_spinal_cord_injury",
        "          and not Extremity_and_or_spine_injuries_only",
        "          and not Chest_and_or_abdominal_injuries_only",
        "          and not No_coded_injuries",
        "        then",
        "          true",
        "        else",
        "          false",
        "    in",
        "      [",
        "        iso            = Isolated_head_injury,",
        "        head_other     = Head_and_other_injuries,",
        "        serious_spinal = Serious_spinal_cord_injury,",
        "        extrem_spine   = Extremity_and_or_spine_injuries_only,",
        "        chest_abdo     = Chest_and_or_abdominal_injuries_only,",
        "        no_code        = No_coded_injuries,",
        "        multiple       = Multiple_injuries_burns_or_other",
        "      ]",
        "in",
        "  Source"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "National ATRCompleteDataset",
      "lineageTag": "17e55262-5151-46ad-a3f3-b36bb1bf5f3b",
      "queryGroupId": "c684f7ff-97cb-460e-9b3e-cd3ffde4b8df",
      "text": [
        "let",
        "    Source = ATRCompleteDataset,",
        "    #\"Removed Other Columns\" = Table.SelectColumns(Source,{\"RegId\", \"InstCodeId\", \"HospitalName\", \"State\", \"PatAge\", \"PatGenderCodeId\", \"InjuryDt\", \"CauseICDCodeId\", \"InjuryTypeCodeId\", \"InjuryIntentCodeId\", \"InjuryPlaceCodeId\", \"TransModeCodeId\", \"DischargeDestCodeId\", \"ISS\", \"InjuryActivityCodeId\", \"country\", \"body_region\"}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Removed Other Columns\")",
        "in",
        "    #\"Removed Duplicates\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "07_ATRCompleteDataset (2)",
      "lineageTag": "e3266644-219c-41bb-830c-0e4906b292f7",
      "queryGroupId": "c684f7ff-97cb-460e-9b3e-cd3ffde4b8df",
      "text": [
        "let",
        "    Source = Csv.Document(File.Contents(data_path&\"07_ATRCompleteDataset.csv\"),[Delimiter=\",\", Columns=110, Encoding=1252, QuoteStyle=QuoteStyle.Csv]),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"RegId\", Int64.Type}, {\"InstCodeId\", Int64.Type}, {\"HospitalName\", type text}, {\"State\", type text}, {\"InstTraumaId\", Int64.Type}, {\"IncidentId\", type text}, {\"Diagnosis24HrCodeId\", Int64.Type}, {\"PatDOB\", type datetime}, {\"PatAge\", Int64.Type}, {\"ATR_AGE\", Int64.Type}, {\"PatGenderCodeId\", Int64.Type}, {\"InjuryDateTime\", type datetime}, {\"InjuryDt\", type datetime}, {\"InjuryTime\", type time}, {\"CauseICDCodeId\", type text}, {\"InjuryTypeCodeId\", Int64.Type}, {\"InjuryIntentCodeId\", Int64.Type}, {\"InjuryPcode\", Int64.Type}, {\"InjuryPlaceCodeId\", Int64.Type}, {\"TransModeCodeId\", Int64.Type}, {\"AmbArrDateTime\", type datetime}, {\"AmbArrDate\", type datetime}, {\"AmbArrTime\", type time}, {\"OthHospTransCodeId\", Int64.Type}, {\"TotalHospTransfer\", Int64.Type}, {\"RefHospID1\", type text}, {\"RefHospArrDt1\", type datetime}, {\"RefHospDeptDt1\", type datetime}, {\"RefHospTranspModeCodeId1\", Int64.Type}, {\"RefHospID2\", type text}, {\"RefHospArrDt2\", type datetime}, {\"RefHospDeptDt2\", type datetime}, {\"RefHospTranspModeCodeId2\", Int64.Type}, {\"RefHospID3\", type text}, {\"RefHospArrDt3\", type text}, {\"RefHospDeptDt3\", type text}, {\"RefHospTranspModeCodeId3\", type text}, {\"ArrDtTime\", type datetime}, {\"ArrDt\", type datetime}, {\"ArrTime\", type time}, {\"ArrBloodAC\", type number}, {\"PreBloodTransfCodeId\", Int64.Type}, {\"PreCPRCodeId\", Int64.Type}, {\"PreArrestCodeId\", Int64.Type}, {\"FirstPulse\", Int64.Type}, {\"FirstSysBP\", Int64.Type}, {\"FirstRespRate\", Int64.Type}, {\"FirstTemp\", type number}, {\"FirstGCSEyeCodeId\", Int64.Type}, {\"FirstGCSVceCodeId\", Int64.Type}, {\"FirstGCSMtrCodeId\", Int64.Type}, {\"FirstTotalGCS\", Int64.Type}, {\"ArrPulse\", Int64.Type}, {\"ArrSysBP\", Int64.Type}, {\"ArrRespRate\", Int64.Type}, {\"ArrTemp\", type number}, {\"ArrGCSEyeCodeId\", Int64.Type}, {\"ArrGCSVceCodeId\", Int64.Type}, {\"ArrGCSMtrCodeId\", Int64.Type}, {\"ArrTotalGCS\", Int64.Type}, {\"ArrCPRCodeId\", Int64.Type}, {\"ArrBloodTransfCodeId\", Int64.Type}, {\"ArrIntubCodeId\", Int64.Type}, {\"ArrIntubDt\", type datetime}, {\"ArrRespQualCodeId\", Int64.Type}, {\"FirstArteBaseEx\", Int64.Type}, {\"FirstINR\", type number}, {\"EDDischargeDtTime\", type datetime}, {\"EDDischargeDt\", type datetime}, {\"EDDischargeTime\", type time}, {\"ED_LOS\", Int64.Type}, {\"EDDispCodeId\", Int64.Type}, {\"DischargeDtTime\", type datetime}, {\"DischargeDt\", type datetime}, {\"DischargeTime\", type time}, {\"DischargeDestCodeId\", Int64.Type}, {\"ISS\", Int64.Type}, {\"ATR_ISS\", Int64.Type}, {\"ATR_NISS\", type text}, {\"LOS\", type number}, {\"ICULOS\", Int64.Type}, {\"VentDays\", Int64.Type}, {\"ComorbCodeIds\", type text}, {\"InjuryActivityCodeId\", Int64.Type}, {\"EventDesc\", type text}, {\"SafetyDevices\", type text}, {\"AIS\", type text}, {\"AISCount\", type text}, {\"AIS_BodyRegion\", Int64.Type}, {\"Abd_MaxAIS\", Int64.Type}, {\"Abdo\", Int64.Type}, {\"Ext_MaxAIS\", Int64.Type}, {\"External\", Int64.Type}, {\"Face_MaxAIS\", Int64.Type}, {\"Face\", Int64.Type}, {\"Head_MaxAIS\", Int64.Type}, {\"Head\", Int64.Type}, {\"LoEx_MaxAIS\", Int64.Type}, {\"Lowerextrem\", Int64.Type}, {\"Neck_MaxAIS\", Int64.Type}, {\"Neck\", Int64.Type}, {\"Spine_MaxAIS\", Int64.Type}, {\"Spine\", Int64.Type}, {\"Thor_MaxAIS\", Int64.Type}, {\"Thorax\", Int64.Type}, {\"UpEx_MaxAIS\", Int64.Type}, {\"Upperextrem\", Int64.Type}, {\"NISS\", Int64.Type}, {\"SevereComplications\", type text}, {\"OperationProcedures\", type text}}),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each ([ISS] = -99 or [DischargeDestCodeId]= -99)),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows\",{\"DischargeDestCodeId\", \"ISS\"}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Removed Other Columns\",{{\"DischargeDestCodeId\", type text}, {\"ISS\", type text}}),",
        "    Custom1 = Table.ReplaceValue(#\"Changed Type1\",\"-99\",\"99\",(x,y,z) as text=> if x=y then z else x,{\"ISS\",\"DischargeDestCodeId\"})",
        "in",
        "    Custom1"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "ATRCompleteDataset (2)",
      "lineageTag": "7453b666-baad-4e5a-b504-fe302fc4a529",
      "queryGroupId": "c684f7ff-97cb-460e-9b3e-cd3ffde4b8df",
      "text": [
        "let",
        "    Source = #\"07_ATRCompleteDataset\",",
        "    #\"Added KnownArrDt\" =",
        "        Table.AddColumn(",
        "            Source,",
        "            \"KnownArrDt\",",
        "            each",
        "                [ArrDt]",
        "                <> #date(1900, 01, 01)",
        "                and not ([ArrDt] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownArrTime\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownArrDt\",",
        "            \"KnownArrTime\",",
        "            each",
        "                [ArrTime]",
        "                <> #time(0, 0, 0)",
        "                and not ([ArrTime] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownInjuryDt\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownArrTime\",",
        "            \"KnownInjurtyDt\",",
        "            each",
        "                [InjuryDt]",
        "                <> #date(1900, 01, 01)",
        "                and not ([InjuryDt] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownInjuryTime\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownInjuryDt\",",
        "            \"KnownInjuryTime\",",
        "            each",
        "                [InjuryTime]",
        "                <> #time(0, 0, 0)",
        "                and not ([InjuryTime] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownEDDischargeDt\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownInjuryTime\",",
        "            \"KnownEDDischargeDt\",",
        "            each",
        "                [EDDischargeDt]",
        "                <> #date(1900, 1, 1)",
        "                and not ([EDDischargeDt] = null),",
        "            type logical",
        "        ),",
        "    #\"Added KnownEDDischargeTime\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownEDDischargeDt\",",
        "            \"KnownEDDischargeTime\",",
        "            each",
        "                [EDDischargeTime]",
        "                <> #time(0, 0, 0)",
        "                and not ([EDDischargeTime] = null),",
        "            type logical",
        "        ),",
        "    #\"Add TimeToED\" =",
        "        Table.AddColumn(",
        "            #\"Added KnownEDDischargeTime\",",
        "            \"TimeToED\",",
        "            each",
        "                if",
        "                    [OthHospTransCodeId]",
        "                    = 2",
        "                    and [KnownInjurtyDt]",
        "                    and [KnownInjuryTime]",
        "                    and [KnownArrDt]",
        "                    and [KnownArrTime]",
        "                    and [ArrDtTime]",
        "                    >= [InjuryDateTime]",
        "                then",
        "                    [ArrDtTime] - [InjuryDateTime]",
        "                else",
        "                    null,",
        "            Duration.Type",
        "        ),",
        "    #\"Add TimeInED\" =",
        "        Table.AddColumn(",
        "            #\"Add TimeToED\",",
        "            \"TimeInED\",",
        "            each",
        "                if",
        "                    [KnownArrDt]",
        "                    and [KnownArrTime]",
        "                    and [KnownEDDischargeDt]",
        "                    and [KnownEDDischargeTime]",
        "                    and [EDDischargeDtTime]",
        "                    >= [ArrDtTime]",
        "                then",
        "                    [EDDischargeDtTime] - [ArrDtTime]",
        "                else",
        "                    null,",
        "            Duration.Type",
        "        ),",
        "    #\"Replaced Value\" =",
        "        Table.ReplaceValue(",
        "            #\"Add TimeInED\",",
        "            \"\",",
        "            null,",
        "            Replacer.ReplaceValue,",
        "            {",
        "                \"SevereComplications\",",
        "                \"OperationProcedures\",",
        "                \"ComorbCodeIds\"",
        "            }",
        "        ),",
        "    #\"Replaced Value2\" =",
        "        Table.ReplaceValue(",
        "            #\"Replaced Value\",",
        "            each",
        "                [PatDOB]",
        "                = #date(1901, 1, 1)",
        "                or [PatDOB]",
        "                = #date(1900, 1, 1),",
        "            null,",
        "            (x, y, z) as nullable date =>",
        "                if y then",
        "                    z",
        "                else",
        "                    x,",
        "            {\"PatDOB\"}",
        "        ),",
        "    #\"Replaced Value3\" =",
        "        Table.ReplaceValue(",
        "            #\"Replaced Value2\",",
        "            each [PatAge] = 999 or[PatAge] = 9999 or [PatAge] = null,",
        "            -1,",
        "            (x, y, z) as nullable number =>",
        "                if y then",
        "                    z",
        "                else",
        "                    x,",
        "            {\"PatAge\"}",
        "        ),",
        "    Custom1 = Table.ReplaceValue(#\"Replaced Value3\", each [InjuryPcode]=-99, null, (x,y,z) as nullable number => if y then z else x, {\"InjuryPcode\"}),",
        "    #\"Changed Type\" =",
        "        Table.TransformColumnTypes(Custom1,{{\"PatAge\", Int64.Type}, {\"InjuryPcode\", type text}}),",
        "    bufer_table = Table.Buffer(#\"Changed Type\"),",
        "    test =",
        "        Table.AddColumn(",
        "            bufer_table,",
        "            \"Custom\",",
        "            each",
        "                Table.FromColumns(",
        "                    {",
        "                        try Text.Split([OperationProcedures], \";\") otherwise",
        "                            {",
        "                                null",
        "                            },",
        "                        try Text.Split([SevereComplications], \";\") otherwise",
        "                            {",
        "                                null",
        "                            },",
        "                        try Text.Split([AIS], \";\") otherwise",
        "                            {",
        "                                null",
        "                            },",
        "                        try Text.Split([ComorbCodeIds], \";\") otherwise",
        "                            {",
        "                                null",
        "                            }",
        "                    },",
        "                    type table [",
        "                        OpProcCodeId = text,",
        "                        SevCompCodeId = text,",
        "                        AISCodeId = text,",
        "                        ComorbCodeId = text",
        "                    ]",
        "                ),",
        "            type table [",
        "                OpProcCodeId = text,",
        "                SevCompCodeId = text,",
        "                AISCodeId = text,",
        "                ComorbCodeId = text",
        "            ]",
        "        ),",
        "    #\"Expanded Custom\" =",
        "        Table.ExpandTableColumn(",
        "            test,",
        "            \"Custom\",",
        "            {",
        "                \"OpProcCodeId\",",
        "                \"SevCompCodeId\",",
        "                \"AISCodeId\",",
        "                \"ComorbCodeId\"",
        "            },",
        "            {",
        "                \"OpProcCodeId\",",
        "                \"SevCompCodeId\",",
        "                \"AISCodeId\",",
        "                \"ComorbCodeId\"",
        "            }",
        "        ),",
        "    #\"Calculated Total Hours\" = Table.TransformColumns(#\"Expanded Custom\",{{\"TimeToED\", Duration.TotalHours, type number}, {\"TimeInED\", Duration.TotalHours, type number}}),",
        "    #\"Invoked Custom Function\" = Table.AddColumn(#\"Calculated Total Hours\", \"BodyRegion\", each BodyRegion(_), type record),",
        "    #\"Expanded BodyRegion\" = Table.ExpandRecordColumn(#\"Invoked Custom Function\", \"BodyRegion\", {\"iso\", \"head_other\", \"serious_spinal\", \"extrem_spine\", \"chest_abdo\", \"no_code\", \"multiple\"}, {\"iso\", \"head_other\", \"serious_spinal\", \"extrem_spine\", \"chest_abdo\", \"no_code\", \"multiple\"}),",
        "    #\"Changed Type2\" = Table.TransformColumnTypes(#\"Expanded BodyRegion\",{{\"iso\", Int64.Type}, {\"head_other\", Int64.Type}, {\"serious_spinal\", Int64.Type}, {\"extrem_spine\", Int64.Type}, {\"chest_abdo\", Int64.Type}, {\"no_code\", Int64.Type}, {\"multiple\", Int64.Type}}),",
        "    #\"Replaced Value4\" = Table.ReplaceValue(#\"Changed Type2\",0,null,Replacer.ReplaceValue,{\"iso\", \"head_other\", \"serious_spinal\", \"extrem_spine\", \"chest_abdo\", \"no_code\", \"multiple\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Replaced Value4\", \"Custom\", each [iso] +[head_other] +[serious_spinal] +[extrem_spine] +[chest_abdo] +[no_code] +[multiple]),",
        "    #\"Unpivoted Only Selected Columns\" = Table.Unpivot(#\"Added Custom\", {\"iso\", \"head_other\", \"serious_spinal\", \"extrem_spine\", \"chest_abdo\", \"no_code\", \"multiple\"}, \"Attribute\", \"Value\")",
        "in",
        "    #\"Unpivoted Only Selected Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Unknown",
      "isHidden": false
    },
    {
      "name": "StartDate",
      "lineageTag": "dbba15e3-e954-483a-abd0-4a0c45a47d3a",
      "text": [
        "#date(2000, 1, 1) meta [IsParameterQuery=true, Type=\"Date\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Date",
      "isHidden": false
    },
    {
      "name": "EndDate",
      "lineageTag": "16342a7d-b4f0-4441-86e7-acf24a077aba",
      "text": [
        "#date(2024, 1, 1) meta [IsParameterQuery=true, Type=\"Date\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Date",
      "isHidden": false
    },
    {
      "name": "data_path",
      "lineageTag": "d33d6cbc-baeb-411c-a777-0043c198ad8f",
      "navigationStepName": "Navigation",
      "text": [
        "\"E:\\projects\\ATR\\data\\\" meta [IsParameterQuery=true, List={\"E:\\projects\\ATR\\data\\\", \"C:\\Users\\maba0001\\Projects\\ATR\\\", \"C:\\Users\\bose_nivea\\projects\\ATR\\\"}, DefaultValue=\"E:\\projects\\ATR\\data\\\", Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "ICD-10-AM_mapping_table",
      "lineageTag": "025a5e7f-5921-4c20-a5e4-07c63998852a",
      "text": [
        "\"https://www.ihacpa.gov.au/sites/default/files/2022-12/ICD-10%20and%20ICD-10-AM%20mapping%20tables%20-%20Twelfth%20Edition.XLSX\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "KeyMeasures",
      "lineageTag": "9b349d70-db67-490c-a8a7-959e6815a7ef",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WSlSKjQUA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Column1\", type text}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"Column1\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\\\"i45WSlSKjQUA\\\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Column1 = _t]),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(Source,{{\\\"Column1\\\", type text}}),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Changed Type\\\",{\\\"Column1\\\"})\\nin\\n    #\\\"Removed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "#shared",
      "lineageTag": "dd38ae48-f8bd-4e13-8cf7-d5b194d428d4",
      "text": [
        "let",
        "    Source = #shared,",
        "    #\"Converted to Table\" = Record.ToTable(Source),",
        "    #\"Filtered Rows\" = Table.SelectRows(#\"Converted to Table\", each ([Name] = \"Table.ExpandRecordColumn\")),",
        "    Value = #\"Filtered Rows\"{0}[Value]",
        "in",
        "    Value"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "ICD-10-AM",
      "lineageTag": "95f44289-ae58-40ef-83be-c73ad90dfe26",
      "queryGroupId": "16c2748a-15f2-44ed-a279-050aa69980be",
      "navigationStepName": "Navigation",
      "refreshWhenRefreshingAll": false,
      "text": [
        "let",
        "    Source = Pdf.Tables(File.Contents(\"C:\\Users\\staff\\projects\\ATR\\ref\\icd-10-am_chronicle_-_eleventh_edition.pdf\"), [Implementation=\"1.3\"]),",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each ([Kind] = \"Table\")),",
        "    #\"Inserted Text After Delimiter\" = Table.AddColumn(#\"Filtered Rows\", \"Text After Delimiter\", each Text.AfterDelimiter([Id], \"Table\"), type text),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Inserted Text After Delimiter\",{{\"Text After Delimiter\", Int64.Type}}),",
        "    #\"Filtered Rows1\" = Table.SelectRows(#\"Changed Type1\", each [Text After Delimiter] <= 1285 and [Text After Delimiter] >= 4),",
        "    #\"Removed Other Columns\" = Table.SelectColumns(#\"Filtered Rows1\",{\"Data\"}),",
        "    #\"Expanded Data\" = Table.ExpandTableColumn(#\"Removed Other Columns\", \"Data\", {\"Column1\", \"Column2\"}, {\"Column1\", \"Column2\"}),",
        "    #\"Cleaned Text\" = Table.TransformColumns(#\"Expanded Data\",{{\"Column1\", Text.Clean, type text}, {\"Column2\", Text.Clean, type text}}),",
        "    #\"Trimmed Text\" = Table.TransformColumns(#\"Cleaned Text\",{{\"Column1\", Text.Trim, type text}, {\"Column2\", Text.Trim, type text}}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Trimmed Text\",{{\"Column1\", type text}, {\"Column2\", type text}}),",
        "    #\"Filtered Rows2\" = Table.SelectRows(#\"Changed Type\", each not (Text.Contains([Column1], \"Chapter\")or Text.Contains([Column1], \"-\"))),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Filtered Rows2\",{{\"Column1\", \"icd_code\"}, {\"Column2\", \"icd_code_description\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = Pdf.Tables(File.Contents(\\\"C:\\\\Users\\\\staff\\\\projects\\\\ATR\\\\ref\\\\icd-10-am_chronicle_-_eleventh_edition.pdf\\\"), [Implementation=\\\"1.3\\\"]),\\n    #\\\"Filtered Rows\\\" = Table.SelectRows(Source, each ([Kind] = \\\"Table\\\")),\\n    #\\\"Inserted Text After Delimiter\\\" = Table.AddColumn(#\\\"Filtered Rows\\\", \\\"Text After Delimiter\\\", each Text.AfterDelimiter([Id], \\\"Table\\\"), type text),\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Inserted Text After Delimiter\\\",{{\\\"Text After Delimiter\\\", Int64.Type}}),\\n    #\\\"Filtered Rows1\\\" = Table.SelectRows(#\\\"Changed Type1\\\", each [Text After Delimiter] <= 1285 and [Text After Delimiter] >= 4),\\n    #\\\"Removed Other Columns\\\" = Table.SelectColumns(#\\\"Filtered Rows1\\\",{\\\"Data\\\"}),\\n    #\\\"Expanded Data\\\" = Table.ExpandTableColumn(#\\\"Removed Other Columns\\\", \\\"Data\\\", {\\\"Column1\\\", \\\"Column2\\\"}, {\\\"Column1\\\", \\\"Column2\\\"}),\\n    #\\\"Cleaned Text\\\" = Table.TransformColumns(#\\\"Expanded Data\\\",{{\\\"Column1\\\", Text.Clean, type text}, {\\\"Column2\\\", Text.Clean, type text}}),\\n    #\\\"Trimmed Text\\\" = Table.TransformColumns(#\\\"Cleaned Text\\\",{{\\\"Column1\\\", Text.Trim, type text}, {\\\"Column2\\\", Text.Trim, type text}}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Trimmed Text\\\",{{\\\"Column1\\\", type text}, {\\\"Column2\\\", type text}}),\\n    #\\\"Filtered Rows2\\\" = Table.SelectRows(#\\\"Changed Type\\\", each not (Text.Contains([Column1], \\\"Chapter\\\")or Text.Contains([Column1], \\\"-\\\"))),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Filtered Rows2\\\",{{\\\"Column1\\\", \\\"icd_code\\\"}, {\\\"Column2\\\", \\\"icd_code_description\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "A  ICD-10 to ICD-10-AM",
      "lineageTag": "d55acbe0-8022-4ade-b6df-0c3574c7b749",
      "queryGroupId": "c68675be-dac6-4250-a2bd-b86c822d3cef",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(#\"ICD-10-AM_mapping_table\"), null, true),",
        "    #\"A. ICD-10 to ICD-10-AM_Sheet\" = Source{[Item=\"A. ICD-10 to ICD-10-AM\",Kind=\"Sheet\"]}[Data],",
        "    #\"Removed Top Rows\" = Table.Skip(#\"A. ICD-10 to ICD-10-AM_Sheet\",1),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(#\"Removed Top Rows\", [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ICD-10 code\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "B  ICD-10 Place of occurrence",
      "lineageTag": "491feb52-a71b-41df-81d1-83f2d76128bd",
      "queryGroupId": "c68675be-dac6-4250-a2bd-b86c822d3cef",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(#\"ICD-10-AM_mapping_table\"), null, true),",
        "    #\"B. ICD-10 Place of occurrence_Sheet\" = Table.Skip(Source{[Item=\"B. ICD-10 Place of occurrence\",Kind=\"Sheet\"]}[Data],1),",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(#\"B. ICD-10 Place of occurrence_Sheet\", [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ICD-10 Place of occurence category\", type text}, {\"WHO update\", type any}, {\"ICD-10 category descriptor\", type text}, {\"ICD-10-AM map\", type text}, {\"Australian update\", type any}, {\"ICD-10-AM code descriptor of map\", type text}, {\"Column7\", type any}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "injury_place",
      "lineageTag": "195f24db-7a56-4351-acc8-30cc2889c2f6",
      "queryGroupId": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "text": [
        "let",
        "    Source = #\"ICD-10-AM_injury_place\",",
        "    #\"Renamed Columns\" = Table.RenameColumns(Source,{{\"icd_code\", \"injury_place_code_id\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "C  ICD-10 Activity",
      "lineageTag": "df093c78-779e-4377-ab7f-4588957adea9",
      "queryGroupId": "c68675be-dac6-4250-a2bd-b86c822d3cef",
      "text": [
        "let",
        "    Source = Excel.Workbook(Web.Contents(#\"ICD-10-AM_mapping_table\"), null, true),",
        "    #\"C. ICD-10 Activity_Sheet\" = Source{[Item=\"C. ICD-10 Activity\",Kind=\"Sheet\"]}[Data],",
        "    #\"Promoted Headers\" = Table.PromoteHeaders(Table.Skip(#\"C. ICD-10 Activity_Sheet\",1), [PromoteAllScalars=true]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Promoted Headers\",{{\"ICD-10 Activity category\", type text}, {\"ICD-10-AM map\", type text}, {\"ICD-10 category descriptor\", type text}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "ICD-10-AM_injury_place",
      "lineageTag": "18630809-4bd0-4161-9b5f-438ca988fc9b",
      "queryGroupId": "16c2748a-15f2-44ed-a279-050aa69980be",
      "text": [
        "let",
        "    Source = #\"ICD-10-AM\",",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each Text.StartsWith([icd_code], \"Y92\")),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Filtered Rows\", {\"icd_code\"}, #\"B  ICD-10 Place of occurrence\", {\"ICD-10-AM map\"}, \"B  ICD-10 Place of occurrence\", JoinKind.LeftOuter),",
        "    #\"Expanded B  ICD-10 Place of occurrence\" = Table.ExpandTableColumn(#\"Merged Queries\", \"B  ICD-10 Place of occurrence\", {\"ICD-10 category descriptor\"}, {\"icd_place_category\"}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Expanded B  ICD-10 Place of occurrence\",{{\"icd_code\", Order.Ascending}}),",
        "    #\"Removed Duplicates\" = Table.Distinct(#\"Sorted Rows\", {\"icd_code\"}),",
        "    replace_record = [Y92=\"Other specified places\",Y92.22=\"Medical hospital\",Y92.63=\"Mine or quarry\",Y92.89 =\"Other specified places\",Y92.40=\"Street and highway\"],",
        "    #\"Replaced Value\" = Table.ReplaceValue(#\"Removed Duplicates\",each [icd_code] ,replace_record,(x,y,z) as text => if Record.HasFields(z, y) then Record.Field(z,y) else x,{\"icd_place_category\"}),",
        "    #\"Filled Up\" = Table.FillUp(#\"Replaced Value\",{\"icd_place_category\"})",
        "in",
        "    #\"Filled Up\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "ICD-10-AM_injury_activity",
      "lineageTag": "daf77e64-dfd6-45bf-9726-ce4f1c4e9542",
      "queryGroupId": "16c2748a-15f2-44ed-a279-050aa69980be",
      "text": [
        "let",
        "    Source = #\"ICD-10-AM\",",
        "    #\"Filtered Rows\" = Table.SelectRows(Source, each Text.StartsWith([icd_code], \"U5\") or Text.StartsWith([icd_code], \"U6\") or Text.StartsWith([icd_code], \"U7\") and not Text.StartsWith([icd_code], \"U78\") and not Text.StartsWith([icd_code], \"U79\")),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Filtered Rows\", {\"icd_code\"}, #\"C  ICD-10 Activity\", {\"ICD-10-AM map\"}, \"C  ICD-10 Activity\", JoinKind.LeftOuter),",
        "    #\"Expanded C  ICD-10 Activity\" = Table.ExpandTableColumn(#\"Merged Queries\", \"C  ICD-10 Activity\", {\"ICD-10 category descriptor\"}, {\"icd_activity_category\"}),",
        "    #\"Sorted Rows\" = Table.Sort(#\"Expanded C  ICD-10 Activity\",{{\"icd_code\", Order.Ascending}})",
        "in",
        "    #\"Sorted Rows\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "Dimension",
      "id": "3096dbc3-fb55-4eda-8c57-8e61e3f9a6fc",
      "description": ""
    },
    {
      "name": "Production",
      "id": "02d6985c-58c9-491c-bfb7-71d8ac30fa29",
      "order": 1,
      "description": ""
    },
    {
      "name": "Pre-process",
      "id": "400604c3-5df2-40ae-ac8e-83d5e9ba4c16",
      "order": 2,
      "description": ""
    },
    {
      "name": "Source",
      "id": "c47ac11d-45b1-4d63-a72f-40613970f054",
      "order": 9,
      "description": ""
    },
    {
      "name": "Functions",
      "id": "9a9d4d75-1082-453c-8585-e371dee4871d",
      "order": 4,
      "description": ""
    },
    {
      "name": "DEV",
      "id": "c684f7ff-97cb-460e-9b3e-cd3ffde4b8df",
      "order": 5,
      "description": ""
    },
    {
      "name": "To delete",
      "id": "585fe2e7-fe6e-49d7-b98c-3071cd6031ac",
      "order": 6,
      "description": ""
    },
    {
      "name": "ICD-10-AM/ACHI",
      "id": "16c2748a-15f2-44ed-a279-050aa69980be",
      "description": "",
      "parentId": "c47ac11d-45b1-4d63-a72f-40613970f054"
    },
    {
      "name": "ICD-10",
      "id": "c68675be-dac6-4250-a2bd-b86c822d3cef",
      "description": "",
      "parentId": "16c2748a-15f2-44ed-a279-050aa69980be"
    }
  ],
  "culture": "en-AU",
  "firewallEnabled": true
}