{
  "$schema": "https://developer.microsoft.com/json-schemas/fabric/item/report/definition/visualContainer/1.0.0/schema.json",
  "name": "83f051efc4d80289596d",
  "position": {
    "x": 744,
    "y": 48,
    "z": 10000,
    "width": 528,
    "height": 328,
    "tabOrder": 9000
  },
  "visual": {
    "visualType": "RHTML_FUNNEL_978302916642",
    "query": {
      "queryState": {
        "occurrence": {
          "projections": [
            {
              "field": {
                "Measure": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "KeyMeasures"
                    }
                  },
                  "Property": "Time in ED"
                }
              },
              "queryRef": "KeyMeasures.Time in ED",
              "nativeQueryRef": "Time in ED"
            }
          ]
        },
        "population": {
          "projections": [
            {
              "field": {
                "Measure": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "KeyMeasures"
                    }
                  },
                  "Property": "Number of injuries"
                }
              },
              "queryRef": "KeyMeasures.Number of injuries",
              "nativeQueryRef": "Number of injuries"
            }
          ]
        },
        "tooltips": {
          "projections": [
            {
              "field": {
                "Column": {
                  "Expression": {
                    "SourceRef": {
                      "Entity": "DIM_HOSPITAL"
                    }
                  },
                  "Property": "HospitalName"
                }
              },
              "queryRef": "DIM_HOSPITAL.HospitalName",
              "nativeQueryRef": "HospitalName"
            }
          ]
        }
      },
      "sortDefinition": {
        "sort": [
          {
            "field": {
              "Measure": {
                "Expression": {
                  "SourceRef": {
                    "Entity": "KeyMeasures"
                  }
                },
                "Property": "Number of injuries"
              }
            },
            "direction": "Descending"
          }
        ],
        "isDefaultSort": true
      }
    },
    "objects": {
      "rcv_script": [
        {
          "properties": {
            "source": {
              "expr": {
                "Literal": {
                  "Value": "'# Copyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\n# Third Party Programs. This software enables you to obtain software applications from other sources. \r\n# Those applications are offered and distributed by third parties under their own license terms.\r\n# Microsoft is not developing, distributing or licensing those applications to you, but instead, \r\n# as a convenience, enables you to use this software to obtain those applications directly from \r\n# the application providers.\r\n# By using the software, you acknowledge and agree that you are obtaining the applications directly\r\n# from the third party providers and under separate license terms, and that it is your responsibility to locate, \r\n# understand and comply with those license terms.\r\n# Microsoft grants you no license rights for third-party software or applications that is obtained using this software.\r\n\r\n# See also:\r\n# http://stats.stackexchange.com/questions/5195/how-to-draw-funnel-plot-using-ggplot2-in-r/5210#5210\r\n\r\n\r\n############ User Parameters #########\r\n# Set of parameters from GUI\r\n\r\n##PBI_PARAM Color of scatterplot points\r\n#Type:string, Default:\"orange\", Range:NA, PossibleValues:\"orange\",\"blue\",\"green\",\"black\"\r\npointsCol = \"orange\"\r\nif(exists(\"settings_scatter_params_pointColor\")){\r\n  pointsCol = settings_scatter_params_pointColor\r\n}\r\n\r\n#PBI_PARAM Transparency of scatterplot points\r\n#Type:numeric, Default:0.4, Range:[0,1], PossibleValues:NA, Remarks: NA\r\ntransparency = 0.4\r\nif(exists(\"settings_scatter_params_percentile\")){\r\n  transparency = settings_scatter_params_percentile/100\r\n}\r\n\r\n##PBI_PARAM Color of baseline\r\n#Type:string, Default:\"blue\", Range:NA, PossibleValues:\"orange\",\"blue\",\"green\",\"black\"\r\nlineColor = \"blue\"\r\nif(exists(\"settings_funnel_params_lineColor\")){\r\n  lineColor = settings_funnel_params_lineColor\r\n}\r\n\r\n\r\n#PBI_PARAM Sparsification of scatterplot points\r\n#Type:bool, Default:TRUE, Range:NA, PossibleValues:NA, Remarks: NA\r\nsparsify = TRUE\r\nif(exists(\"settings_scatter_params_sparsify\")){\r\n  sparsify = settings_scatter_params_sparsify\r\n}\r\n\r\n#PBI_PARAM Size of points on the plot\r\n#Type:numeric, Default: 1 , Range:[0.1,5], PossibleValues:NA, Remarks: NA\r\npointCex = 1\r\nif(exists(\"settings_scatter_params_weight\")){\r\n  pointCex = min(50,max(settings_scatter_params_weight,1))/10\r\n}\r\n\r\n\r\n#PBI_PARAM Confidence level line\r\n#Type:numeric, Default: 0.75 , Range:[0,1], PossibleValues:NA, Remarks: GUI input is predefined set of values\r\nconf1 = 0.95\r\nif(exists(\"settings_funnel_params_conf1\")){\r\n  conf1 = as.numeric(settings_funnel_params_conf1)\r\n}\r\n\r\n#PBI_PARAM Confidence level line #2\r\n#Type:numeric, Default: 0.95 , Range:[0,1], PossibleValues:NA, Remarks: NA\r\nconf2 = 0.99\r\nif(exists(\"settings_funnel_params_conf2\")){\r\n  conf2 = as.numeric(settings_funnel_params_conf2)\r\n}\r\n\r\n\r\naxisXisPercentage = TRUE # ratio or percentage \r\nif(exists(\"settings_axes_params_axisXisPercentage\")){\r\n  axisXisPercentage = as.numeric(settings_axes_params_axisXisPercentage)\r\n}\r\n\r\nscaleXformat = \"comma\"\r\nif(exists(\"settings_axes_params_scaleXformat\")){\r\n  scaleXformat = settings_axes_params_scaleXformat\r\n}\r\n\r\nscaleYformat = \"none\"\r\nif(exists(\"settings_axes_params_scaleYformat\")){\r\n  scaleYformat = settings_axes_params_scaleYformat\r\n}\r\n\r\n#PBI_PARAM Size of labels on axes\r\nsizeLabel = 12\r\nif(exists(\"settings_axes_params_textSize\")){\r\n  sizeLabel = settings_axes_params_textSize\r\n}\r\n\r\n#PBI_PARAM Size of ticks on axes \r\nsizeTicks = 6\r\nif(exists(\"settings_axes_params_sizeTicks\")){\r\n  sizeTicks = as.numeric(settings_axes_params_sizeTicks)\r\n}\r\n#PBI_PARAM Size of labels on axes\r\ncolLabel = \"gray\"\r\nif(exists(\"settings_axes_params_colLabel\")){\r\n  colLabel = settings_axes_params_colLabel\r\n}\r\n##PBI_PARAM: export out data to HTML?\r\n#Type:logical, Default:FALSE, Range:NA, PossibleValues:NA, Remarks: NA\r\nkeepOutData = FALSE\r\nif(exists(\"settings_export_params_show\"))\r\n  keepOutData = settings_export_params_show \r\n\r\n##PBI_PARAM: method of export interface\r\n#Type: string , Default:\"copy\",  Range:NA, PossibleValues:\"copy\", \"download\",  Remarks: NA\r\nexportMethod = \"copy\"\r\nif(exists(\"settings_export_params_method\"))\r\n  exportMethod = settings_export_params_method \r\n\r\n##PBI_PARAM: limit the out table exported\r\n#Type: string , Default:1000,  Range:NA, PossibleValues:\"1000\", \"10000\", Inf,  Remarks: NA\r\nlimitExportSize = 1000\r\nif(exists(\"settings_export_params_limitExportSize\"))\r\n  limitExportSize = as.numeric(settings_export_params_limitExportSize)\r\n\r\n###############Library Declarations###############\r\n\r\n############### Utility functions ###############\r\nlibraryRequireInstall = function(packageName, ...)\r\n{\r\n  if(!require(packageName, character.only = TRUE)) \r\n    warning(paste(\"*** The package: ''\", packageName, \"'' was not installed ***\", sep=\"\"))\r\n}\r\n\r\nlibraryRequireInstall(\"XML\")\r\nlibraryRequireInstall(\"htmlwidgets\")\r\n\r\ninternalSaveWidget <- function(widget, fname)\r\n{\r\n  tempFname = paste(fname, \".tmp\", sep=\"\")\r\n  htmlwidgets::saveWidget(widget, file = tempFname, selfcontained = FALSE)\r\n  FlattenHTML(tempFname, fname)\r\n}\r\n\r\nFlattenHTML <- function(fnameIn, fnameOut)\r\n{\r\n  # Read and parse HTML file\r\n  # Embed all js and css files into one unified file\r\n  \r\n  if(!file.exists(fnameIn))\r\n    return(FALSE)\r\n  \r\n  dir = dirname(fnameIn)\r\n  html = htmlTreeParse(fnameIn, useInternal = TRUE)\r\n  top = xmlRoot(html)\r\n  \r\n  # extract all <script> tags with src value\r\n  srcNode=getNodeSet(top, ''//script[@src]'')\r\n  for (node in srcNode)\r\n  {\r\n    b = xmlAttrs(node)\r\n    fname = file.path(dir, b[''src''])\r\n    alternateSrc = FindSrcReplacement(fname)\r\n    if (!is.null(alternateSrc))\r\n    {\r\n      s = alternateSrc\r\n      names(s) = ''src''\r\n      newNode = xmlNode(\"script\",attrs = s)\r\n      replaceNodes(node, newNode)\r\n    }else{\r\n      str=ReadFileForEmbedding(fname);\r\n      if (!is.null(str))\r\n      {      \r\n        newNode = xmlNode(\"script\", str, attrs = c(type = \"text/javascript\"))\r\n        replaceNodes(node, newNode)\r\n      }\r\n    }\r\n  }\r\n  \r\n  # extract all <link> tags with src value\r\n  linkNode=getNodeSet(top, ''//link[@href]'')\r\n  for (node in linkNode)\r\n  {\r\n    b = xmlAttrs(node)\r\n    fname = file.path(dir, b[''href''])\r\n    str = ReadFileForEmbedding(fname, FALSE);\r\n    if (!is.null(str))\r\n    {\r\n      newNode = xmlNode(\"style\", str)\r\n      replaceNodes(node, newNode)\r\n    }\r\n  }\r\n  \r\n  saveXML(html, file = fnameOut)\r\n  return(TRUE)\r\n}\r\n\r\nReadFileForEmbedding <- function(fname, addCdata = TRUE)\r\n{\r\n  data = ReadFullFile(fname)\r\n  if (is.null(data))\r\n    return(NULL)\r\n\r\n  str = paste(data, collapse =''\\n'')\r\n  if (addCdata) {\r\n    str = paste(cbind(''// <![CDATA['', str,''// ]]>''), collapse =''\\n'')\r\n  }\r\n  return(str)\r\n}\r\n\r\nReadFullFile <- function(fname)\r\n{\r\n  if(!file.exists(fname))\r\n    return(NULL)\r\n  \r\n  con = file(fname, open = \"r\")\r\n  data = readLines(con)\r\n  close(con)\r\n  return(data)\r\n}\r\n\r\nFindSrcReplacement <- function(str)\r\n{\r\n  # finds reference to ''plotly'' js and replaces with a version from CDN\r\n  # This allows the HTML to be smaller, since this script is not fully embedded in it\r\n  str <- iconv(str, to=\"UTF-8\")\r\n  pattern = \"plotlyjs-(\\\\w.+)/plotly-latest.min.js\"\r\n  match1=regexpr(pattern, str)\r\n  attr(match1, ''useBytes'') <- FALSE\r\n  strMatch=regmatches(str, match1, invert = FALSE)\r\n  if (length(strMatch) == 0) return(NULL)\r\n  \r\n  pattern2 = \"-(\\\\d.+)/\"\r\n  match2 = regexpr(pattern2, strMatch[1])\r\n  attr(match2, ''useBytes'') <- FALSE\r\n  strmatch = regmatches(strMatch[1], match2)\r\n  if (length(strmatch) == 0) return(NULL)\r\n  \r\n  # CDN url is https://cdn.plot.ly/plotly-<Version>.js\r\n  # This matches the specific version used in the plotly package used.\r\n  verstr = substr(strmatch, 2, nchar(strmatch)-1)\r\n  str = paste(''https://cdn.plot.ly/plotly-'', verstr,''.min.js'', sep='''')\r\n  return(str)\r\n}\r\n#ReadFullFileReplaceString\r\nReadFullFileReplaceString <- function(fnameIn, fnameOut, sourceString,targetString)\r\n{\r\n  if(!file.exists(fnameIn))\r\n    return(NULL)\r\n  \r\n  tx  <- readLines(fnameIn)\r\n  tx2  <- gsub(pattern = sourceString, replace = targetString, x = tx)\r\n  writeLines(tx2, con = fnameOut)\r\n}\r\n#################################################\r\n\r\n#utils.r file with small general functions \r\n\r\nlibraryRequireInstall = function(packageName, ...)\r\n{\r\n  if(!require(packageName, character.only = TRUE)) \r\n    warning(paste(\"*** The package: ''\", packageName, \"'' was not installed ***\", sep=\"\"))\r\n}\r\n\r\n\r\n# Ecamone text string \r\n# if very very long abbreviate\r\n# if looooooong convert to lo...\r\n# if shorter than maxChar remove \r\ncutStr2Show = function(strText, strCex = 0.8, abbrTo = 100, isH = TRUE, maxChar = 3, partAvailable = 1)\r\n{\r\n  # partAvailable, wich portion of window is available, in [0,1]\r\n  if(is.null(strText))\r\n    return (NULL)\r\n  \r\n  SCL = 0.075*strCex/0.8\r\n  pardin = par()$din\r\n  gStand = partAvailable*(isH*pardin[1]+(1-isH)*pardin[2]) /SCL\r\n  \r\n  # if very very long abbreviate\r\n  if(nchar(strText)>abbrTo && nchar(strText)> 1)\r\n    strText = abbreviate(strText, abbrTo)\r\n  \r\n  # if looooooong convert to lo...\r\n  if(nchar(strText)>round(gStand) && nchar(strText)> 1)\r\n    strText = paste(substring(strText,1,floor(gStand)),\"...\",sep=\"\")\r\n  \r\n  # if shorter than maxChar remove \r\n  if(gStand<=maxChar)\r\n    strText = NULL\r\n  \r\n  return(strText) \r\n}\r\n\r\n#if it attributeColumn is legal colors() use them \r\n#if all the entries in attributeColumn are the same number - use defaultColor\r\n#if it has many numeric variables color from green to red range \r\n#if it has few unique strings - use rainbow to color them \r\nColorPerPoint = function (attributeColumn, defaultColor = pointsCol, sizeColRange = 30)\r\n{\r\n  N = length(attributeColumn)\r\n  if(sum(attributeColumn %in% colors()) == N) # all legal colors\r\n    return(attributeColumn)\r\n  \r\n  UN = length(unique(attributeColumn))\r\n  if(UN == 1) # single number \r\n    return(defaultColor)\r\n  \r\n  sortedUniqueValues = sort(unique(attributeColumn))\r\n  \r\n  if((UN > sizeColRange*3) || (UN >= N - 2 && is.numeric(attributeColumn))) # many numbers --> color range \r\n  {\r\n    rangeColors = terrain.colors(sizeColRange)# 30 colors\r\n    if(is.numeric(attributeColumn))\r\n    {\r\n      breaks = seq(min(sortedUniqueValues), max(sortedUniqueValues),length.out = sizeColRange + 1)\r\n      pointsCol = as.character(cut(attributeColumn, breaks,labels = rangeColors))\r\n      return(pointsCol)\r\n    }\r\n    else\r\n    {# spread colors\r\n      outCol = rep(rangeColors, each = ceiling(N/sizeColRange), length.out = N)\r\n      return(outCol)\r\n    }\r\n  } else {\r\n    rangeColors = rainbow(UN)\r\n    names(rangeColors) = sortedUniqueValues\r\n    return(rangeColors[as.character(attributeColumn)])\r\n  }\r\n}\r\n\r\n\r\n#randomly remove points from scatter if too many \r\nSparsifyScatter = function (xyDataFrame, numXstrips = 9, numYstrips = 7, minMaxPoints = c(3000,9000), minmaxInStrip =  c(900,9000), maxInCell = 300, remDuplicated = TRUE)\r\n{\r\n  \r\n  N_big = N = nrow(xyDataFrame)\r\n  usePoints = rep(TRUE,N)\r\n  \r\n  if(N <= minMaxPoints[1]) # do nothing\r\n    return (usePoints)\r\n  \r\n  if(remDuplicated) # remove duplicated\r\n  {\r\n    usePoints = usePoints & (!duplicated(xyDataFrame))\r\n    N = sum(usePoints)\r\n  }\r\n  \r\n  if(N <= minMaxPoints[1]) # do nothing\r\n    return (usePoints)\r\n  \r\n  rangeX = range(xyDataFrame[,1])\r\n  rangeY = range(xyDataFrame[,2])\r\n  \r\n  gridX = seq(rangeX[1],rangeX[2], length.out = numXstrips + 1)\r\n  gridY = seq(rangeY[1],rangeY[2], length.out = numYstrips + 1)\r\n  \r\n  #go cell by cell and sparsify \r\n  for (iX in seq(1,numXstrips))\r\n  {\r\n    smallRangeX = c(gridX[iX],gridX[iX+1])\r\n    inStrip = xyDataFrame[,1]>= smallRangeX[1] & xyDataFrame[,1]<= smallRangeX[2] &  usePoints\r\n    if(sum(inStrip) > minmaxInStrip[1])\r\n      for (iY in seq(1,numYstrips))\r\n      {\r\n        smallRangeY = c(gridY[iY],gridY[iY+1])\r\n        inCell = xyDataFrame[,2]>= smallRangeY[1] & xyDataFrame[,2]<= smallRangeY[2] &  inStrip\r\n        if(sum(inCell) > maxInCell)\r\n        {\r\n          inCellIndexes = seq(1,N_big)[inCell]\r\n          #randomly select maxInCell out of inCellIndexes\r\n          iii = sample(inCellIndexes,size = sum(inCell) - maxInCell, replace = FALSE)\r\n          usePoints[iii] = FALSE\r\n        }\r\n      }\r\n    \r\n  }\r\n  N = sum(usePoints)\r\n  \r\n  #if by the end still too many points --> go on whole set  \r\n  if(N > minMaxPoints[2])\r\n  {\r\n    inIndexes = seq(1,N_big)[usePoints]\r\n    #randomly select minMaxPoints[2] out of inIndexes\r\n    iii = sample(inIndexes,size = minMaxPoints[2], replace = FALSE)\r\n    usePoints[-iii] = FALSE\r\n    \r\n  }\r\n  return (usePoints)\r\n}\r\n\r\n# return FALSE if canvas is too small\r\ngoodPlotDimension = function(minWidthInch = 3,minHeightInch = 2.2)\r\n{\r\n  re = (par()$din[1] > minWidthInch) & (par()$din[2] > minHeightInch)\r\n  return(re)\r\n}\r\n\r\n\r\n\r\nlibraryRequireInstall(\"ggplot2\")\r\nlibraryRequireInstall(\"plotly\")\r\nlibraryRequireInstall(\"scales\")\r\nlibraryRequireInstall(\"caTools\")\r\n\r\n\r\n###############Internal parameters definitions#################\r\n# Set of parameters, which are not exported to GUI\r\n\r\n#PBI_PARAM is vertical plot\r\nverticalPlot = FALSE\r\n\r\n#PBI_PARAM Minimal number of points for funnel plot\r\nminPoints = 10\r\n\r\n#PBI_PARAM Size of warnings font\r\nsizeWarn = 11\r\n\r\n\r\n###############Internal functions definitions#################\r\n\r\n#paste tooltips together separated by <br>\r\ngenerateNiceTooltips = function(dataset)\r\n{\r\n  myNames = names(dataset)\r\n  LMN = length(myNames)\r\n  s = 1; if(LMN > 2)  s = 3\r\n  \r\n  nms = myNames[s:LMN]\r\n  dta = dataset[,s:LMN]\r\n  niceTooltips = NULL\r\n  \r\n  for (n in c(1:length(nms)))\r\n  {\r\n    if(length(nms) == 1)\r\n      niceTooltips = paste(nms,\" = \", dta, sep = \"\") \r\n    else\r\n    {\r\n      niceTooltips = paste(niceTooltips,nms[n],\" = \", dta[,n], sep = \"\")  \r\n      if(n < length(nms))\r\n        niceTooltips = paste(niceTooltips,\"<br>\", sep = \"\")\r\n    }\r\n  }\r\n  return(niceTooltips)\r\n}\r\n\r\n#tweak the limits of the axis\r\nNiceLimitsAxis <- function(axisData, baseline =NULL, isPositive = TRUE)\r\n{\r\nlimsA = c(min(axisData), max(axisData)) # default\r\nif(is.null(baseline))\r\n  baseline = sum(limsA)/2\r\n\r\nlimsA = (limsA - mean(limsA)) * 1.3 + baseline # centralize\r\nlimsA[1] = min(limsA[1], min(axisData)) # include outliers\r\nlimsA[2] = max(limsA[2], max(axisData)) # include outliers\r\nif(limsA[1] < 0 && isPositive) # don''t include region far away from 0\r\n{ \r\n  temp = -0.02 * (limsA[2])\r\n  limsA[1] = max(temp, limsA[1]) \r\n}\r\nreturn(limsA)\r\n}\r\nConvertDF64encoding = function (df, withoutEncoding = FALSE)\r\n{\r\n  header_row <- paste(names(df), collapse=\", \")\r\n  tab <- apply(df, 1, function(x)paste(x, collapse=\", \"))\r\n  \r\n  if(withoutEncoding){\r\n    text <- paste(c(header_row, tab), collapse=\"\\n\")\r\n    x <- text\r\n  }\r\n  else\r\n  {\r\n    text <- paste(c(header_row, tab), collapse=\"\\n\")\r\n    x <- caTools::base64encode(text)\r\n  }\r\n  return(x)\r\n}\r\n\r\n\r\nKeepOutDataInHTML = function(df, htmlFile = ''out.html'', exportMethod = \"copy\", limitExportSize = 1000)\r\n{\r\n  if(nrow(df)>limitExportSize)\r\n    df = df[1:limitExportSize,]\r\n  \r\n  outDataString64 = ConvertDF64encoding(df)\r\n  \r\n  linkElem = ''\\n<a href=\"\"  download=\"data.csv\"  style=\"position: absolute; top:0px; left: 0px; z-index: 20000;\" id = \"mydataURL\">export</a>\\n''\r\n  updateLinkElem = paste(''<script>\\n link_element = document.getElementById(\"mydataURL\");link_element.href = outDataString64href;'', ''\\n</script> '', sep ='' '')\r\n  var64 = paste(''<script> outDataString64 =\"'', outDataString64, ''\"; </script>'', sep =\"\")\r\n  var64href = paste(''<script> outDataString64href =\"data:;base64,'', outDataString64, ''\"; </script>'', sep =\"\")\r\n  \r\n  buttonElem = ''<button style=\"position: absolute; top:0px; left: 0px; z-index: 20000;\"  onclick=\"myFunctionCopy(1)\">copy to clipboard</button>''\r\n  funcScript = ''<script> \r\n  function myFunctionCopy(is64) \r\n  {\r\n  const el = document.createElement(\"textarea\");\r\n  if(is64)\r\n  {\r\n  el.value = atob(outDataString64);\r\n  }\r\n  else\r\n  {\r\n  el.value = outDataStringPlane;\r\n  }\r\n  document.body.appendChild(el);\r\n  el.select();\r\n  document.execCommand(\"copy\");\r\n  document.body.removeChild(el);};\t\r\n  </script>''\r\n  \r\n  if(exportMethod == \"copy\")\r\n    endOfBody = paste(var64,funcScript, buttonElem,''\\n</body>'',sep =\"\")\r\n  else#\"download\"\r\n    endOfBody = paste(linkElem,var64, var64href,updateLinkElem,''\\n</body>'',sep =\"\")\r\n  \r\n  ReadFullFileReplaceString(''out.html'', ''out.html'', ''</body>'', endOfBody)\r\n  \r\n}\r\n\r\n############# Input validation & initializations ############# \r\n\r\nif(conf2 < conf1)# swap\r\n{   temp = conf1; conf1 = conf2; conf2 = temp}\r\n\r\nvalidToPlot = TRUE\r\n\r\npbiWarning = \"\"\r\n\r\ngpd = goodPlotDimension()\r\n\r\n\r\nif(validToPlot && !gpd) # too small canvas\r\n{\r\n  validToPlot = FALSE\r\n  pbiWarning1 = \"Visual is \"\r\n  pbiWarning1 = cutStr2Show(pbiWarning1, strCex = sizeWarn/6, partAvailable = 0.9)\r\n  pbiWarning2 = \"too small \"\r\n  pbiWarning2 = cutStr2Show(pbiWarning2, strCex = sizeWarn/6, partAvailable = 0.9)\r\n  pbiWarning<-paste(pbiWarning1, \"<br>\", pbiWarning2, sep=\"\")\r\n  sizeWarn = 8 #smaller \r\n}\r\n\r\nif(validToPlot && (!exists(\"population\") ||!exists(\"occurrence\"))) # invalid input \r\n{\r\n  validToPlot = FALSE\r\n  pbiWarning1 = \"Both population and occurrence are required\"\r\n  pbiWarning = cutStr2Show(pbiWarning1, strCex = sizeWarn/6, partAvailable = 0.9)\r\n}\r\n\r\nif(validToPlot)\r\n{\r\n  population[is.na(population)] = 0\r\n  occurrence[is.na(occurrence)] = -1\r\n  population[is.null(population)] = 0\r\n  occurrence[is.null(occurrence)] = -1\r\n  \r\n  #clean data\r\n  validData = rep(TRUE,nrow(population))\r\n  validData = as.logical(validData & (population > 1) & (occurrence >= 0)  & (occurrence <= population ))\r\n}\r\n\r\nif(validToPlot && (sum(validData) < minPoints)) # not enough data samples\r\n{\r\n  validToPlot = FALSE\r\n  pbiWarning1 = \"Not enough data samples\"\r\n  pbiWarning1 = cutStr2Show(pbiWarning1, strCex = sizeWarn/6, partAvailable = 0.9)\r\n  pbiWarning2 = \"for funnel plot\"\r\n  pbiWarning2 = cutStr2Show(pbiWarning2, strCex = sizeWarn/6, partAvailable = 0.9)\r\n  pbiWarning<-paste(pbiWarning1, \"<br>\", pbiWarning2, sep=\"\")\r\n}\r\n\r\nif(validToPlot ) # check packages\r\n{\r\n  si = sessionInfo()\r\n  namesPackages =  c(names(si$otherPkgs), names(si$basePkgs),names(si$loadedOnly))\r\n  checkPackages = c(\"XML\",\"plotly\",\"ggplot2\",\"htmlwidgets\",\"scales\")\r\n  flagAllPackages = prod(checkPackages %in% namesPackages)\r\n\r\n  if(!flagAllPackages) \r\n    warning(\"*** Some of the packages are missing ! ***\")\r\n}\r\n\r\n############# Main code #####################\r\n\r\nif(validToPlot)\r\n{\r\n  if(!exists(\"tooltips\"))\r\n  {\r\n    dataset = cbind(population,occurrence)\r\n  }else{\r\n    dataset = cbind(population,occurrence,tooltips)\r\n  }\r\n  \r\n  dataset = dataset[validData,]# keep only valid\r\n  namesDS = names(dataset)\r\n  \r\n  countValue = dataset[,1]\r\n  p = dataset[,2]/dataset[,1]\r\n  p.se <- sqrt((p*(1-p)) / (countValue))\r\n  df <- data.frame(p, countValue, p.se)\r\n  \r\n  ## common effect (fixed effect model)\r\n  p.fem <- weighted.mean(p[p.se>0], 1/p.se[p.se>0]^2)\r\n  \r\n  ## lower and upper limits, based on FEM estimator\r\n  zLow = qnorm(conf1)\r\n  zUp = qnorm(conf2)\r\n  \r\n  \r\n  mult = 1\r\n  entryWordLabelY = \"Ratio of \"\r\n  if(axisXisPercentage)\r\n  {\r\n    mult = 100\r\n    entryWordLabelY = \"Percentage of \"\r\n  }\r\n  \r\n  number.seq <- seq(from = min(countValue), to = max(countValue), length.out= 1000)\r\n  number.llconf1 <- (p.fem - zLow * sqrt((p.fem*(1-p.fem)) / (number.seq)))*mult\r\n  number.ulconf1 <- (p.fem + zLow * sqrt((p.fem*(1-p.fem)) / (number.seq)))*mult\r\n  number.llconf2 <- (p.fem - zUp * sqrt((p.fem*(1-p.fem)) / (number.seq)))*mult\r\n  number.ulconf2 <- (p.fem + zUp * sqrt((p.fem*(1-p.fem)) / (number.seq)))*mult\r\n  \r\n  if(keepOutData)\r\n  {\r\n    exportDF = dataset\r\n    exportDF$p = p * mult\r\n    exportDF$llconf1 <- (p.fem - zLow * sqrt((p.fem*(1-p.fem)) / (countValue)))*mult\r\n    exportDF$ulconf1 <- (p.fem + zLow * sqrt((p.fem*(1-p.fem)) / (countValue)))*mult\r\n    exportDF$llconf2 <- (p.fem - zUp * sqrt((p.fem*(1-p.fem)) / (countValue)))*mult\r\n    exportDF$ulconf2 <- (p.fem + zUp * sqrt((p.fem*(1-p.fem)) / (countValue)))*mult\r\n  }\r\n  \r\n  yAxis = p*mult\r\n  p.fem = p.fem*mult\r\n  \r\n  dfCI <- data.frame(number.llconf1, number.ulconf1, number.llconf2, number.ulconf2, number.seq, p.fem)\r\n  \r\n  #tweak the limits of the y-axis\r\n  limsY = NiceLimitsAxis(axisData = yAxis, baseline = p.fem)\r\n  \r\n  xLabText = cutStr2Show( namesDS[1], strCex = sizeLabel/6, isH = TRUE, partAvailable = 0.85)\r\n  yLabText = cutStr2Show( paste(entryWordLabelY, namesDS[2], sep =\"\"), strCex = sizeLabel/6, isH = FALSE, partAvailable = 0.85)\r\n  \r\n  ## draw plot\r\n  if(sparsify)\r\n    drawPoints = SparsifyScatter(dataset)# remove points from dense regions\r\n  else\r\n    drawPoints = SparsifyScatter(dataset,minMaxPoints = c(Inf,Inf))\r\n  \r\n  fp <- ggplot(aes(x = countValue[drawPoints], y = yAxis[drawPoints]), data = df[drawPoints,]) \r\n  fp <- fp + geom_point(shape = 19, colour = alpha(pointsCol,transparency), size = pointCex*2 ) \r\n  \r\n  fp <- fp + geom_line(aes(x = number.seq, y = number.llconf1),linetype = 1, colour = \"green\",data = dfCI) \r\n  fp <- fp + geom_line(aes(x = number.seq, y = number.ulconf1),linetype = 1, colour = \"green\", data = dfCI) \r\n  \r\n  fp <- fp + geom_line(aes(x = number.seq, y = number.llconf2),linetype = 2, colour = \"red\",data = dfCI) \r\n  fp <- fp + geom_line(aes(x = number.seq, y = number.ulconf2), linetype = 2, colour = \"red\",data = dfCI) \r\n  \r\n  fp <- fp + geom_hline(aes(yintercept = p.fem), data = dfCI, colour = lineColor, linetype = 4)\r\n  \r\n  if(scaleYformat %in% c(\"none\"))\r\n    fp <- fp + scale_y_continuous(limits =limsY)\r\n  \r\n  if(scaleYformat %in% c(\"comma\"))\r\n    fp <- fp + scale_y_continuous(limits =limsY, labels = comma)\r\n  \r\n  if(scaleYformat %in% c(\"scientific\"))\r\n    fp <- fp + scale_y_continuous(limits =limsY, labels = scientific)\r\n  \r\n  if(scaleXformat %in% c(\"comma\"))\r\n    fp <- fp + scale_x_continuous(labels = comma)\r\n  \r\n  if(scaleXformat %in% c(\"dollar\"))\r\n    fp <- fp + scale_x_continuous(labels = dollar)\r\n  \r\n  if(scaleXformat %in% c(\"scientific\"))\r\n    fp <- fp + scale_x_continuous(labels = scientific)\r\n  \r\n  fp <- fp + xlab(xLabText) + ylab(yLabText) + theme_bw()\r\n  \r\n  if(verticalPlot)\r\n    fp <- fp +  coord_flip()\r\n  \r\n}else{# empty plot \r\n  fp <- ggplot()\r\n}\r\n\r\n#add warning as title\r\nfp = fp + labs (title = pbiWarning, caption = NULL) + theme_bw() + \r\n  theme(plot.title  = element_text(hjust = 0.5, size = sizeWarn), \r\n        axis.title=element_text(size =  sizeLabel, colour = colLabel),\r\n        axis.text=element_text(size =  sizeTicks),\r\n        panel.border = element_blank(), axis.line = element_line())\r\n\r\nif(!validToPlot) # remove box from empty plot \r\n  fp = fp + theme(axis.line = element_blank())\r\n\r\n\r\n############# Create and save widget ###############\r\n\r\np = ggplotly(fp);\r\n\r\ndisabledButtonsList <- list(''toImage'', ''sendDataToCloud'', ''zoom2d'', ''pan'', ''pan2d'', ''select2d'', ''lasso2d'', ''hoverClosestCartesian'', ''hoverCompareCartesian'')\r\np$x$config$modeBarButtonsToRemove = disabledButtonsList\r\n\r\np <- config(p, staticPlot = FALSE, editable = FALSE, sendData = FALSE, showLink = FALSE,\r\n            displaylogo = FALSE,  collaborate = FALSE, cloud=FALSE)\r\n\r\nif(validToPlot)\r\n{\r\n  layerScatter = 1 # first layer is scatter \r\n  ntt = generateNiceTooltips(dataset[drawPoints,])\r\n  #tooltips on scatter\r\n  p$x$data[[layerScatter]]$text = ntt\r\n  \r\n  #tooltips on lines\r\n  p$x$data[[2]]$text = paste(as.character(conf1*100),\"% limits (l)\",sep =\"\")\r\n  p$x$data[[3]]$text = paste(as.character(conf1*100),\"% limits (u)\",sep =\"\")\r\n  p$x$data[[4]]$text = paste(as.character(conf2*100),\"% limits (l)\",sep =\"\")\r\n  p$x$data[[5]]$text = paste(as.character(conf2*100),\"% limits (u)\",sep =\"\")\r\n  p$x$data[[6]]$text = paste(\"baseline \", as.character(round(p.fem,4)), sep =\"\")\r\n  \r\n}\r\n\r\ninternalSaveWidget(p, ''out.html'')\r\n# resolve bug in plotly (margin of 40 px)\r\nReadFullFileReplaceString(''out.html'', ''out.html'', '',\"padding\":40,'', '',\"padding\":0,'')\r\n\r\nif(keepOutData) \r\n  KeepOutDataInHTML(df = exportDF, htmlFile = ''out.html'', exportMethod = exportMethod, limitExportSize = limitExportSize)\r\n\r\n####################################################\r\n\r\n'"
                }
              }
            }
          }
        }
      ]
    },
    "visualContainerObjects": {
      "background": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "color": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#F8FAFC'"
                    }
                  }
                }
              }
            },
            "transparency": {
              "expr": {
                "Literal": {
                  "Value": "0D"
                }
              }
            }
          }
        }
      ],
      "border": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "color": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#F8FAFC'"
                    }
                  }
                }
              }
            },
            "radius": {
              "expr": {
                "Literal": {
                  "Value": "5D"
                }
              }
            }
          }
        }
      ],
      "dropShadow": [
        {
          "properties": {
            "show": {
              "expr": {
                "Literal": {
                  "Value": "false"
                }
              }
            },
            "position": {
              "expr": {
                "Literal": {
                  "Value": "'Outer'"
                }
              }
            },
            "color": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#CAD4E7'"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "visualTooltip": [
        {
          "properties": {
            "titleFontColor": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#DFDFE9'"
                    }
                  }
                }
              }
            },
            "valueFontColor": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#F1F2F7'"
                    }
                  }
                }
              }
            },
            "background": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#323447'"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "visualHeader": [
        {
          "properties": {
            "background": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#F8FAF7'"
                    }
                  }
                }
              }
            },
            "border": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#F8FAFC'"
                    }
                  }
                }
              }
            },
            "foreground": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#323447'"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "visualHeaderTooltip": [
        {
          "properties": {
            "titleFontColor": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#DFDFE9'"
                    }
                  }
                }
              }
            },
            "background": {
              "solid": {
                "color": {
                  "expr": {
                    "Literal": {
                      "Value": "'#323447'"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "title": [
        {
          "properties": {
            "text": {
              "expr": {
                "Literal": {
                  "Value": "'Funnel Plot 3'"
                }
              }
            },
            "show": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "fontSize": {
              "expr": {
                "Literal": {
                  "Value": "10D"
                }
              }
            },
            "bold": {
              "expr": {
                "Literal": {
                  "Value": "true"
                }
              }
            },
            "alignment": {
              "expr": {
                "Literal": {
                  "Value": "'center'"
                }
              }
            }
          }
        }
      ]
    },
    "drillFilterOtherVisuals": true
  },
  "filterConfig": {
    "filters": [
      {
        "name": "Filter0d97ff31561ec2b8865f",
        "field": {
          "Column": {
            "Expression": {
              "SourceRef": {
                "Entity": "DIM_INJURY_TYPE"
              }
            },
            "Property": "description"
          }
        },
        "filter": {
          "Version": 2,
          "From": [
            {
              "Name": "d",
              "Entity": "DIM_INJURY_TYPE",
              "Type": 0
            }
          ],
          "Where": [
            {
              "Condition": {
                "Not": {
                  "Expression": {
                    "In": {
                      "Expressions": [
                        {
                          "Column": {
                            "Expression": {
                              "SourceRef": {
                                "Source": "d"
                              }
                            },
                            "Property": "description"
                          }
                        }
                      ],
                      "Values": [
                        [
                          {
                            "Literal": {
                              "Value": "null"
                            }
                          }
                        ]
                      ]
                    }
                  }
                }
              }
            }
          ]
        },
        "objects": {
          "general": [
            {
              "properties": {
                "isInvertedSelectionMode": {
                  "expr": {
                    "Literal": {
                      "Value": "true"
                    }
                  }
                }
              }
            }
          ]
        },
        "howCreated": "User"
      }
    ]
  }
}